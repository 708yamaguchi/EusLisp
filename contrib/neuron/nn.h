static pointer clo179();
static pointer clo181();
static pointer clo183();
static pointer clo185();
static pointer (*ftab[23])();

#define QUOTE_STRINGS_SIZE 241
const static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "/",
    "1.0",
    "+",
    "1.0",
    "exp",
    "-",
    "transform",
    "v+",
    "v-",
    "scale",
    "#(:temperature)",
    "layer",
    "make-instance",
    ":element-type",
    ":float",
    "make-array",
    "v=noise",
    "link",
    "m=noise",
    "progn",
    "spaces",
    "format",
    "\" (~a . \"",
    "quote",
    "prin1",
    "slot",
    "class",
    "strm",
    "\" )~%\"",
    "\"(layer ~a\"",
    "\" (size . ~a)\"",
    "\" (temperature . ~a)\"",
    "\"~%\"",
    "\" (~a . \"",
    "bias",
    "\" )~%\"",
    "\" (~a . \"",
    "input",
    "\" )~%\"",
    "\" (~a . \"",
    "output",
    "\" )~%\"",
    "\" (~a . \"",
    "delta",
    "\" )~%\"",
    "\" (~a . \"",
    "dbias",
    "\" )~%\"",
    "\" (from . ~a)~%\"",
    "\" (to . ~a)~%\"",
    "\")~%\"",
    "or",
    "cdr",
    "assoc",
    "hash-table-p",
    "sethash",
    "size",
    "temperature",
    "\"Illegal Layer Format:~a\"",
    "\" (~a . ~%\"",
    "2",
    "pprint",
    "tab",
    "2",
    "\" )~%\"",
    "\"(link (~a ~a) (~a ~a)~%\"",
    "\" (~a . ~%\"",
    "weight",
    "\" )~%\"",
    "\" (~a . ~%\"",
    "dweight",
    "\" )~%\"",
    "\")~%\"",
    "list",
    "cdddr",
    "\"Illegal Link Format: ~a\"",
    "gethash",
    "v+=m*v",
    "v=",
    "v=sigmoid",
    "v+=v*m",
    "v*=dsigdx_o",
    "v=s",
    "v=a*v+e*v",
    "v+=",
    "m=a*m+e*v**v",
    "m+=",
    ":test",
    "equal",
    "alpha",
    "eta",
    "@",
    ":temperature",
    "layered-network",
    "\"Illegal layered-network form: ~a\"",
    "parameters",
    "layers",
    "links",
    "\"Illeval layered-network form: ~a\"",
    "construct-layered-network",
    "\"(parameters~%\"",
    "\"(temperature ~a)~%\"",
    "\"(alpha ~a)~%\"",
    "\"(eta ~a)\"",
    "\"~%\"",
    "\"(~a ~a)\"",
    "param-val",
    "\")~%\"",
    "\"(layers\"",
    "\"~%\"",
    "\"(@ . \"",
    "\")\"",
    "\")~%\"",
    "\"(links\"",
    "\"~%\"",
    "\"(@ . \"",
    "\")\"",
    "\")\"",
    "\"(layered-network ~a~%\"",
    "\")~%\"",
    ":var",
    "name",
    "layered-network-name",
    "layered-network-temperature",
    "layered-network-alpha",
    "layered-network-eta",
    "get-layer-by-name",
    "get-link-by-name",
    "nn",
    "*package*",
    "\"no such package\"",
    "*alpha*",
    ":vtype",
    ":global",
    "*eta*",
    "sigmoid",
    "\"(x th)\"",
    "v=m*v",
    "\"(fltvec0 fltmat fltvec1)\"",
    "v=v*m",
    "\"(fltvec0 fltvec1 fltmat)\"",
    "v=v+v",
    "\"(fltvec0 fltvec1 fltvec2)\"",
    "v=v-v",
    "\"(fltvec0 fltvec1 fltvec2)\"",
    "v*=s",
    "\"(fltvec0 scalar)\"",
    ":super",
    "object",
    ":slots",
    "((name :type string) (size :type :integer) (bias :type float-vector) (input :type float-vector) (output :type float-vector) (delta :type float-vector) (dbias :type float-vector) (temperature :type :float) (from) (to))",
    ":metaclass",
    ":size",
    ":documentation",
    "make-class",
    "((from :type layer) (to :type layer) (n :type :integer) (m :type :integer) (weight) (dweight))",
    "create-layer",
    "\"(name size &key (temperature 1.0))\"",
    "init-layer",
    "\"(ly &optional (min -1.0) (max 1.0))\"",
    "create-link",
    "\"(from to)\"",
    "init-link",
    "\"(ln &optional (min -1.0) (max 1.0))\"",
    "save-layer-array",
    "\"(ly array-name strm tab)\"",
    "save-layer",
    "\"(ly &optional (strm t) (tab 0) (detailp nil))\"",
    "load-layer",
    "\"(&optional (strm t))\"",
    "construct-layer-array",
    "\"(dt arrayname size)\"",
    "construct-layer",
    "\"(dt &optional (layer-table t))\"",
    "construct-layer0",
    "\"(dt)\"",
    "save-link-matrix",
    "\"(ln matrix-name strm tab)\"",
    "save-link",
    "\"(ln &optional (strm t) (tab 0) (detailp nil))\"",
    "load-link",
    "\"(&optional (strm t))\"",
    "construct-link-matrix",
    "\"(dt matrixname rowsize colsize)\"",
    "construct-link0",
    "\"(dt)\"",
    "wire-link",
    "\"(ln layer-table)\"",
    "construct-link",
    "\"(dt &optional (layer-table t))\"",
    "f-propagate-link",
    "\"(ln)\"",
    "f-propagate-sigmoid-layer",
    "\"(ly)\"",
    "f-propagate-liner-layer",
    "\"(ly)\"",
    "b-propagate-link",
    "\"(ln)\"",
    "b-propagate-sigmoid-output-layer",
    "\"(ly target)\"",
    "b-propagate-liner-output-layer",
    "\"(ly target)\"",
    "b-propagate-sigmoid-hidden-layer",
    "\"(ly)\"",
    "b-propagate-liner-hidden-layer",
    "\"(ly)\"",
    "learn-layer",
    "\"(ly alpha eta)\"",
    "learn-link",
    "\"(ln alpha eta)\"",
    "((name) (layer-table) (link-table) (parameter-table) (temperature :type :float) (alpha :type :float) (eta :type :float))",
    "\"(name lnet)\"",
    "\"(name lnet)\"",
    "construct-layered-network-parameters",
    "\"(lnet param-list)\"",
    "construct-layered-network-layers",
    "\"(lnet layer-list)\"",
    "construct-layered-network-links",
    "\"(lnet link-list)\"",
    "\"(dt)\"",
    "\"(&rest body)\"",
    "save-layered-network-parameters",
    "\"(lnet &optional (strm t) (tab 0) (detailp nil))\"",
    "save-layered-network-layers",
    "\"(lnet &optional (strm t) (tab 0) (detailp nil))\"",
    "save-layered-network-links",
    "\"(lnet &optional (strm t) (tab 0) (detailp nil))\"",
    "save-layered-network",
    "\"(lnet &optional (strm t) (tab 0) (detailp nil))\"",
    "match",
    "\"(a b)\"",
    "match-sub",
    "\"(a b blist)\"",
    "subst-multi",
    "\"(tree subst-table)\"",
    "assoc-by-match",
    "\"(key subst-table)\"",
    "subst-multi-by-match",
    "\"(tree subst-table)\"",
    "with-layered-network",
    "\"(var-lnet &rest body)\"",
  };
