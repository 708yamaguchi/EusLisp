static pointer clo119();
static pointer clo213();
static pointer clo413();
static pointer clo416();
static pointer clo431();
static pointer clo447();
static pointer clo449();
static pointer clo450();
static pointer (*ftab[19])();

#define QUOTE_STRINGS_SIZE 128
const static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ":common-perpendicular",
    "*contact-threshold*",
    ":parallel",
    "*penetration-threshold*",
    ":parameter",
    ":distance",
    "minusp",
    "*epsilon*",
    "triangle",
    "eps-zero",
    "eps-in-range",
    ":border",
    ":outside",
    ":inside",
    ":on-vertex",
    "vector-angle",
    "eps=",
    ":plane-distance",
    ":eps-insidep",
    "direction-vector",
    "normal",
    "*parallel-threshold*",
    ":all-edges",
    ":contact",
    "super",
    ":intersection",
    ":box",
    ":possibly-contacting-vertices",
    ":possibly-contacting-faces",
    ":contactp",
    "constrained-point",
    ":init",
    ":position",
    ":hisposition",
    ":foot",
    ":hisface",
    ":to-convex",
    ":possibly-contacting-edges",
    ":contact-edge",
    ":test",
    "find",
    "plusp",
    ":myneighborhood",
    "eps-v=",
    "float-vector-p",
    "error-from-eq-or-cond",
    "#(:position :hisposition :hisface :myneighborhood :condition)",
    ":divide1",
    ":dividen",
    "remove",
    "last",
    ":point",
    "edge",
    ":pvertex",
    ":nvertex",
    ":pface",
    ":nface",
    "facep",
    "eq-or-cond",
    ":test-not",
    ":key",
    "member",
    ":condition",
    "*viewer*",
    ":draw-arrow",
    "#(:constrained-body :constraining-body :constraints)",
    ":analyse-contact",
    "delete",
    ":neighborpoints",
    ":normal",
    "make-plane",
    ":separation",
    ":anothervertex",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "*package*",
    "\"no such package\"",
    ":geoclasses",
    "\"geoclasses.l\"",
    "require",
    ":constraint",
    "provide",
    "\"model2constraint V1.21 Aug.26.1994.~%\"",
    "(constrained-point-position constrained-point-hisposition constrained-point-hisface constrained-point-myneighborhood constrained-point-condition constraint-relation-constrained-body constraint-relation-constraining-body constraint-relation-constraints contact-to-constraint face-contact edge-edge-contact edge-vertex-contact vertex-vertex-contact)",
    "(*penetration-threshold*)",
    ":vtype",
    ":global",
    "\"(self class e)\"",
    "plane",
    "\"(self class hisposition mypoints hispoints)\"",
    "polygon",
    "\"(self class point &optional (eps *epsilon*))\"",
    ":contact-point",
    "\"(self class p &optional (tolerance *contact-threshold*))\"",
    "face",
    "\"(self class e1)\"",
    "\"(self class point &optional (eps *epsilon*))\"",
    ":contact-vertices",
    "body",
    "\"(self class b)\"",
    ":contact-edges",
    "\"(self class b)\"",
    "\"(x y)\"",
    "\"(self class &key ((:position v1)) ((:hisposition v2)) ((:hisface f)) ((:myneighborhood n)) ((:condition c)))\"",
    "\"(self class)\"",
    "\"(self class or-edge)\"",
    "\"(self class or-edge)\"",
    "\"(self class hispoint)\"",
    ":draw-constraint",
    "\"(self class &optional v (arrow-length 30) c)\"",
    "draw-arrow",
    "\"(p1 p2 &optional clip color)\"",
    "constraint-relation",
    "\"(self class &key ((:constrained-body m)) ((:constraining-body h)) ((:constraints c)))\"",
    ":constrained-body",
    "\"(self class)\"",
    ":constraining-body",
    "\"(self class)\"",
    "contact-to-constraint",
    "\"(mycontact hiscontact)\"",
    "face-contact",
    "\"(f sign)\"",
    "edge-edge-contact",
    "\"(position hisposition myedge hisedge)\"",
    "edge-vertex-contact",
    "\"(position hisposition myedge hisvertex sign)\"",
    "vertex-vertex-contact",
    "\"(position hisposition myvertex hisvertex)\"",
  };
