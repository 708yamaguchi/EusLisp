;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass maruman-55-analog-clock-object
  :super cascaded-link
  :slots (sensors))
(defmethod maruman-55-analog-clock-object
  (:init
   (&rest args &key (name "maruman-55-analog-clock") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3
         joint0 joint1 joint2 joint3
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset158544900
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 12.5 27.5 55.0) (float-vector 6.5 27.5 55.0) (float-vector 6.5 -27.5 55.0) (float-vector 12.5 -27.5 55.0)))
         (instance face :init :vertices (list (float-vector 6.5 27.5 0.0) (float-vector 12.5 27.5 0.0) (float-vector 12.5 -27.5 0.0) (float-vector 6.5 -27.5 0.0)))
         (instance face :init :vertices (list (float-vector 12.5 27.5 55.0) (float-vector 12.5 27.5 0.0) (float-vector 6.5 27.5 0.0) (float-vector 6.5 27.5 55.0)))
         (instance face :init :vertices (list (float-vector 12.5 -27.5 55.0) (float-vector 12.5 -27.5 0.0) (float-vector 12.5 27.5 0.0) (float-vector 12.5 27.5 55.0)))
         (instance face :init :vertices (list (float-vector 6.5 -27.5 55.0) (float-vector 6.5 -27.5 0.0) (float-vector 12.5 -27.5 0.0) (float-vector 12.5 -27.5 55.0)))
         (instance face :init :vertices (list (float-vector 6.5 27.5 55.0) (float-vector 6.5 27.5 0.0) (float-vector 6.5 -27.5 0.0) (float-vector 6.5 -27.5 55.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 6.5 27.5 55.0) (float-vector -12.5 27.5 55.0) (float-vector -12.5 -27.5 55.0) (float-vector 6.5 -27.5 55.0)))
         (instance face :init :vertices (list (float-vector -12.5 27.5 0.0) (float-vector 6.5 27.5 0.0) (float-vector 6.5 -27.5 0.0) (float-vector -12.5 -27.5 0.0)))
         (instance face :init :vertices (list (float-vector 6.5 27.5 55.0) (float-vector 6.5 27.5 0.0) (float-vector -12.5 27.5 0.0) (float-vector -12.5 27.5 55.0)))
         (instance face :init :vertices (list (float-vector 6.5 -27.5 55.0) (float-vector 6.5 -27.5 0.0) (float-vector 6.5 27.5 0.0) (float-vector 6.5 27.5 55.0)))
         (instance face :init :vertices (list (float-vector -12.5 -27.5 55.0) (float-vector -12.5 -27.5 0.0) (float-vector 6.5 -27.5 0.0) (float-vector 6.5 -27.5 55.0)))
         (instance face :init :vertices (list (float-vector -12.5 27.5 55.0) (float-vector -12.5 27.5 0.0) (float-vector -12.5 -27.5 0.0) (float-vector -12.5 -27.5 55.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (gl::transparent (elt bc 0) 0.1)
     (send (elt bc 1) :set-color :gray10)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset158544900 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset165349424
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.5 1.0 13.75) (float-vector -0.5 1.0 13.75) (float-vector -0.5 -1.0 13.75) (float-vector 0.5 -1.0 13.75)))
         (instance face :init :vertices (list (float-vector -0.5 1.0 0.0) (float-vector 0.5 1.0 0.0) (float-vector 0.5 -1.0 0.0) (float-vector -0.5 -1.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.5 1.0 13.75) (float-vector 0.5 1.0 0.0) (float-vector -0.5 1.0 0.0) (float-vector -0.5 1.0 13.75)))
         (instance face :init :vertices (list (float-vector 0.5 -1.0 13.75) (float-vector 0.5 -1.0 0.0) (float-vector 0.5 1.0 0.0) (float-vector 0.5 1.0 13.75)))
         (instance face :init :vertices (list (float-vector -0.5 -1.0 13.75) (float-vector -0.5 -1.0 0.0) (float-vector 0.5 -1.0 0.0) (float-vector 0.5 -1.0 13.75)))
         (instance face :init :vertices (list (float-vector -0.5 1.0 13.75) (float-vector -0.5 1.0 0.0) (float-vector -0.5 -1.0 0.0) (float-vector -0.5 -1.0 13.75)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.500001 -1.5 -2.59807) (float-vector 0.500001 0.0 -3.0) (float-vector 0.500001 1.5 -2.59808) (float-vector 0.500001 2.59808 -1.5) (float-vector 0.5 3.0 0.0) (float-vector 0.5 2.59808 1.5) (float-vector 0.499999 1.5 2.59808) (float-vector 0.499999 1.860283e-06 3.0) (float-vector 0.499999 -1.5 2.59808) (float-vector 0.5 -2.59807 1.5) (float-vector 0.5 -3.0 3.814697e-06) (float-vector 0.500001 -2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector -0.499999 0.0 -3.0) (float-vector -0.499999 -1.5 -2.59807) (float-vector -0.5 -2.59808 -1.5) (float-vector -0.5 -3.0 1.907349e-06) (float-vector -0.5 -2.59807 1.5) (float-vector -0.500001 -1.5 2.59808) (float-vector -0.500001 1.860283e-06 3.0) (float-vector -0.500001 1.5 2.59808) (float-vector -0.5 2.59808 1.5) (float-vector -0.5 3.0 0.0) (float-vector -0.5 2.59808 -1.5) (float-vector -0.499999 1.5 -2.59808)))
         (instance face :init :vertices (list (float-vector 0.500001 -1.5 -2.59807) (float-vector -0.499999 -1.5 -2.59807) (float-vector -0.499999 0.0 -3.0) (float-vector 0.500001 0.0 -3.0)))
         (instance face :init :vertices (list (float-vector 0.500001 -2.59808 -1.5) (float-vector -0.5 -2.59808 -1.5) (float-vector -0.499999 -1.5 -2.59807) (float-vector 0.500001 -1.5 -2.59807)))
         (instance face :init :vertices (list (float-vector 0.5 -3.0 3.814697e-06) (float-vector -0.5 -3.0 1.907349e-06) (float-vector -0.5 -2.59808 -1.5) (float-vector 0.500001 -2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector 0.5 -2.59807 1.5) (float-vector -0.5 -2.59807 1.5) (float-vector -0.5 -3.0 1.907349e-06) (float-vector 0.5 -3.0 3.814697e-06)))
         (instance face :init :vertices (list (float-vector 0.499999 -1.5 2.59808) (float-vector -0.500001 -1.5 2.59808) (float-vector -0.5 -2.59807 1.5) (float-vector 0.5 -2.59807 1.5)))
         (instance face :init :vertices (list (float-vector 0.499999 1.860283e-06 3.0) (float-vector -0.500001 1.860283e-06 3.0) (float-vector -0.500001 -1.5 2.59808) (float-vector 0.499999 -1.5 2.59808)))
         (instance face :init :vertices (list (float-vector 0.499999 1.5 2.59808) (float-vector -0.500001 1.5 2.59808) (float-vector -0.500001 1.860283e-06 3.0) (float-vector 0.499999 1.860283e-06 3.0)))
         (instance face :init :vertices (list (float-vector 0.5 2.59808 1.5) (float-vector -0.5 2.59808 1.5) (float-vector -0.500001 1.5 2.59808) (float-vector 0.499999 1.5 2.59808)))
         (instance face :init :vertices (list (float-vector 0.5 3.0 0.0) (float-vector -0.5 3.0 0.0) (float-vector -0.5 2.59808 1.5) (float-vector 0.5 2.59808 1.5)))
         (instance face :init :vertices (list (float-vector 0.500001 2.59808 -1.5) (float-vector -0.5 2.59808 -1.5) (float-vector -0.5 3.0 0.0) (float-vector 0.5 3.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.500001 1.5 -2.59808) (float-vector -0.499999 1.5 -2.59808) (float-vector -0.5 2.59808 -1.5) (float-vector 0.500001 2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector 0.500001 0.0 -3.0) (float-vector -0.499999 0.0 -3.0) (float-vector -0.499999 1.5 -2.59808) (float-vector 0.500001 1.5 -2.59808)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset165349424 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset174945540
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.5 0.5 22.0) (float-vector -0.5 0.5 22.0) (float-vector -0.5 -0.5 22.0) (float-vector 0.5 -0.5 22.0)))
         (instance face :init :vertices (list (float-vector -0.5 0.5 -1.144409e-05) (float-vector 0.5 0.5 -1.144409e-05) (float-vector 0.5 -0.5 -1.144409e-05) (float-vector -0.5 -0.5 -1.144409e-05)))
         (instance face :init :vertices (list (float-vector 0.5 0.5 22.0) (float-vector 0.5 0.5 -1.144409e-05) (float-vector -0.5 0.5 -1.144409e-05) (float-vector -0.5 0.5 22.0)))
         (instance face :init :vertices (list (float-vector 0.5 -0.5 22.0) (float-vector 0.5 -0.5 -1.144409e-05) (float-vector 0.5 0.5 -1.144409e-05) (float-vector 0.5 0.5 22.0)))
         (instance face :init :vertices (list (float-vector -0.5 -0.5 22.0) (float-vector -0.5 -0.5 -1.144409e-05) (float-vector 0.5 -0.5 -1.144409e-05) (float-vector 0.5 -0.5 22.0)))
         (instance face :init :vertices (list (float-vector -0.5 0.5 22.0) (float-vector -0.5 0.5 -1.144409e-05) (float-vector -0.5 -0.5 -1.144409e-05) (float-vector -0.5 -0.5 22.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.500001 -1.5 -2.59807) (float-vector 0.500001 0.0 -3.0) (float-vector 0.500001 1.5 -2.59808) (float-vector 0.500001 2.59808 -1.5) (float-vector 0.5 3.0 0.0) (float-vector 0.499999 2.59808 1.5) (float-vector 0.499999 1.5 2.59808) (float-vector 0.499999 1.860283e-06 3.0) (float-vector 0.499999 -1.5 2.59808) (float-vector 0.499999 -2.59807 1.5) (float-vector 0.5 -3.0 3.814697e-06) (float-vector 0.500001 -2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector -0.499999 0.0 -3.0) (float-vector -0.499999 -1.5 -2.59807) (float-vector -0.499999 -2.59808 -1.5) (float-vector -0.5 -3.0 1.907349e-06) (float-vector -0.5 -2.59807 1.5) (float-vector -0.500001 -1.5 2.59808) (float-vector -0.500001 1.860283e-06 3.0) (float-vector -0.500001 1.5 2.59808) (float-vector -0.5 2.59808 1.5) (float-vector -0.5 3.0 0.0) (float-vector -0.499999 2.59808 -1.5) (float-vector -0.499999 1.5 -2.59808)))
         (instance face :init :vertices (list (float-vector 0.500001 -1.5 -2.59807) (float-vector -0.499999 -1.5 -2.59807) (float-vector -0.499999 0.0 -3.0) (float-vector 0.500001 0.0 -3.0)))
         (instance face :init :vertices (list (float-vector 0.500001 -2.59808 -1.5) (float-vector -0.499999 -2.59808 -1.5) (float-vector -0.499999 -1.5 -2.59807) (float-vector 0.500001 -1.5 -2.59807)))
         (instance face :init :vertices (list (float-vector 0.5 -3.0 3.814697e-06) (float-vector -0.5 -3.0 1.907349e-06) (float-vector -0.499999 -2.59808 -1.5) (float-vector 0.500001 -2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector 0.499999 -2.59807 1.5) (float-vector -0.5 -2.59807 1.5) (float-vector -0.5 -3.0 1.907349e-06) (float-vector 0.5 -3.0 3.814697e-06)))
         (instance face :init :vertices (list (float-vector 0.499999 -1.5 2.59808) (float-vector -0.500001 -1.5 2.59808) (float-vector -0.5 -2.59807 1.5) (float-vector 0.499999 -2.59807 1.5)))
         (instance face :init :vertices (list (float-vector 0.499999 1.860283e-06 3.0) (float-vector -0.500001 1.860283e-06 3.0) (float-vector -0.500001 -1.5 2.59808) (float-vector 0.499999 -1.5 2.59808)))
         (instance face :init :vertices (list (float-vector 0.499999 1.5 2.59808) (float-vector -0.500001 1.5 2.59808) (float-vector -0.500001 1.860283e-06 3.0) (float-vector 0.499999 1.860283e-06 3.0)))
         (instance face :init :vertices (list (float-vector 0.499999 2.59808 1.5) (float-vector -0.5 2.59808 1.5) (float-vector -0.500001 1.5 2.59808) (float-vector 0.499999 1.5 2.59808)))
         (instance face :init :vertices (list (float-vector 0.5 3.0 0.0) (float-vector -0.5 3.0 0.0) (float-vector -0.5 2.59808 1.5) (float-vector 0.499999 2.59808 1.5)))
         (instance face :init :vertices (list (float-vector 0.500001 2.59808 -1.5) (float-vector -0.499999 2.59808 -1.5) (float-vector -0.5 3.0 0.0) (float-vector 0.5 3.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.500001 1.5 -2.59808) (float-vector -0.499999 1.5 -2.59808) (float-vector -0.499999 2.59808 -1.5) (float-vector 0.500001 2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector 0.500001 0.0 -3.0) (float-vector -0.499999 0.0 -3.0) (float-vector -0.499999 1.5 -2.59808) (float-vector 0.500001 1.5 -2.59808)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset174945540 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset174941676
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.5 0.25 23.375) (float-vector -0.5 0.25 23.375) (float-vector -0.5 -0.25 23.375) (float-vector 0.5 -0.25 23.375)))
         (instance face :init :vertices (list (float-vector -0.5 0.25 -1.144409e-05) (float-vector 0.5 0.25 -1.144409e-05) (float-vector 0.5 -0.25 -1.144409e-05) (float-vector -0.5 -0.25 -1.144409e-05)))
         (instance face :init :vertices (list (float-vector 0.5 0.25 23.375) (float-vector 0.5 0.25 -1.144409e-05) (float-vector -0.5 0.25 -1.144409e-05) (float-vector -0.5 0.25 23.375)))
         (instance face :init :vertices (list (float-vector 0.5 -0.25 23.375) (float-vector 0.5 -0.25 -1.144409e-05) (float-vector 0.5 0.25 -1.144409e-05) (float-vector 0.5 0.25 23.375)))
         (instance face :init :vertices (list (float-vector -0.5 -0.25 23.375) (float-vector -0.5 -0.25 -1.144409e-05) (float-vector 0.5 -0.25 -1.144409e-05) (float-vector 0.5 -0.25 23.375)))
         (instance face :init :vertices (list (float-vector -0.5 0.25 23.375) (float-vector -0.5 0.25 -1.144409e-05) (float-vector -0.5 -0.25 -1.144409e-05) (float-vector -0.5 -0.25 23.375)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.500001 -1.5 -2.59807) (float-vector 0.500001 0.0 -3.0) (float-vector 0.500001 1.5 -2.59808) (float-vector 0.500001 2.59808 -1.5) (float-vector 0.5 3.0 0.0) (float-vector 0.499999 2.59808 1.5) (float-vector 0.499999 1.5 2.59808) (float-vector 0.499999 1.860283e-06 3.0) (float-vector 0.499999 -1.5 2.59808) (float-vector 0.499999 -2.59807 1.5) (float-vector 0.5 -3.0 3.814697e-06) (float-vector 0.500001 -2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector -0.499999 0.0 -3.0) (float-vector -0.499999 -1.5 -2.59807) (float-vector -0.499999 -2.59808 -1.5) (float-vector -0.5 -3.0 1.907349e-06) (float-vector -0.500001 -2.59807 1.5) (float-vector -0.500001 -1.5 2.59808) (float-vector -0.500001 1.860283e-06 3.0) (float-vector -0.500001 1.5 2.59808) (float-vector -0.500001 2.59808 1.5) (float-vector -0.5 3.0 0.0) (float-vector -0.499999 2.59808 -1.5) (float-vector -0.499999 1.5 -2.59808)))
         (instance face :init :vertices (list (float-vector 0.500001 -1.5 -2.59807) (float-vector -0.499999 -1.5 -2.59807) (float-vector -0.499999 0.0 -3.0) (float-vector 0.500001 0.0 -3.0)))
         (instance face :init :vertices (list (float-vector 0.500001 -2.59808 -1.5) (float-vector -0.499999 -2.59808 -1.5) (float-vector -0.499999 -1.5 -2.59807) (float-vector 0.500001 -1.5 -2.59807)))
         (instance face :init :vertices (list (float-vector 0.5 -3.0 3.814697e-06) (float-vector -0.5 -3.0 1.907349e-06) (float-vector -0.499999 -2.59808 -1.5) (float-vector 0.500001 -2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector 0.499999 -2.59807 1.5) (float-vector -0.500001 -2.59807 1.5) (float-vector -0.5 -3.0 1.907349e-06) (float-vector 0.5 -3.0 3.814697e-06)))
         (instance face :init :vertices (list (float-vector 0.499999 -1.5 2.59808) (float-vector -0.500001 -1.5 2.59808) (float-vector -0.500001 -2.59807 1.5) (float-vector 0.499999 -2.59807 1.5)))
         (instance face :init :vertices (list (float-vector 0.499999 1.860283e-06 3.0) (float-vector -0.500001 1.860283e-06 3.0) (float-vector -0.500001 -1.5 2.59808) (float-vector 0.499999 -1.5 2.59808)))
         (instance face :init :vertices (list (float-vector 0.499999 1.5 2.59808) (float-vector -0.500001 1.5 2.59808) (float-vector -0.500001 1.860283e-06 3.0) (float-vector 0.499999 1.860283e-06 3.0)))
         (instance face :init :vertices (list (float-vector 0.499999 2.59808 1.5) (float-vector -0.500001 2.59808 1.5) (float-vector -0.500001 1.5 2.59808) (float-vector 0.499999 1.5 2.59808)))
         (instance face :init :vertices (list (float-vector 0.5 3.0 0.0) (float-vector -0.5 3.0 0.0) (float-vector -0.500001 2.59808 1.5) (float-vector 0.499999 2.59808 1.5)))
         (instance face :init :vertices (list (float-vector 0.500001 2.59808 -1.5) (float-vector -0.499999 2.59808 -1.5) (float-vector -0.5 3.0 0.0) (float-vector 0.5 3.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.500001 1.5 -2.59808) (float-vector -0.499999 1.5 -2.59808) (float-vector -0.499999 2.59808 -1.5) (float-vector 0.500001 2.59808 -1.5)))
         (instance face :init :vertices (list (float-vector 0.500001 0.0 -3.0) (float-vector -0.499999 0.0 -3.0) (float-vector -0.499999 1.5 -2.59808) (float-vector 0.500001 1.5 -2.59808)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :red)
     (send (elt bc 1) :set-color :red)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset174941676 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink3 :newcoords (make-coords :pos (float-vector 9.5 0.0 27.5) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink2 :newcoords (make-coords :pos (float-vector 8.5 0.0 27.5) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink1 :newcoords (make-coords :pos (float-vector 7.5 0.0 27.5) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :hour-joint
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :hour-joint :axis :-x
			     :min -360.0 :max  360.0))

     ;; definition of :minute-joint
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink1 :child-link blink2 :name :minute-joint :axis :-x
			     :min -360.0 :max  360.0))

     ;; definition of :second-joint
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink2 :child-link blink3 :name :second-joint :axis :-x
			     :min -360.0 :max  360.0))

     (setq links (list blink0 blink1 blink2 blink3))
     (setq joint-list (list joint0 joint1 joint2))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun maruman-55-analog-clock (&rest args) (instance* maruman-55-analog-clock-object :init args))
;; (format *error-output* "(instance maruman-55-analog-clock-object :init) for generating model~%")
