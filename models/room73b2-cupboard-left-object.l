;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass room73b2-cupboard-left-object
  :super cascaded-link
  :slots (sensors))
(defmethod room73b2-cupboard-left-object
  (:init
   (&rest args &key (name "room73b2-cupboard-left") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4
         joint0 joint1 joint2 joint3 joint4
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 176.5 293.0 1816.0) (float-vector -176.5 293.0 1816.0) (float-vector -176.5 -293.0 1816.0) (float-vector 176.5 -293.0 1816.0)))
         (instance face :init :vertices (list (float-vector -176.5 293.0 1796.0) (float-vector 176.5 293.0 1796.0) (float-vector 176.5 -293.0 1796.0) (float-vector -176.5 -293.0 1796.0)))
         (instance face :init :vertices (list (float-vector 176.5 293.0 1816.0) (float-vector 176.5 293.0 1796.0) (float-vector -176.5 293.0 1796.0) (float-vector -176.5 293.0 1816.0)))
         (instance face :init :vertices (list (float-vector 176.5 -293.0 1816.0) (float-vector 176.5 -293.0 1796.0) (float-vector 176.5 293.0 1796.0) (float-vector 176.5 293.0 1816.0)))
         (instance face :init :vertices (list (float-vector -176.5 -293.0 1816.0) (float-vector -176.5 -293.0 1796.0) (float-vector 176.5 -293.0 1796.0) (float-vector 176.5 -293.0 1816.0)))
         (instance face :init :vertices (list (float-vector -176.5 293.0 1816.0) (float-vector -176.5 293.0 1796.0) (float-vector -176.5 -293.0 1796.0) (float-vector -176.5 -293.0 1816.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 293.0 84.5) (float-vector -176.5 293.0 84.5) (float-vector -176.5 -293.0 84.5) (float-vector 166.5 -293.0 84.5)))
         (instance face :init :vertices (list (float-vector -176.5 293.0 -0.5) (float-vector 166.5 293.0 -0.5) (float-vector 166.5 -293.0 -0.5) (float-vector -176.5 -293.0 -0.5)))
         (instance face :init :vertices (list (float-vector 166.5 293.0 84.5) (float-vector 166.5 293.0 -0.5) (float-vector -176.5 293.0 -0.5) (float-vector -176.5 293.0 84.5)))
         (instance face :init :vertices (list (float-vector 166.5 -293.0 84.5) (float-vector 166.5 -293.0 -0.5) (float-vector 166.5 293.0 -0.5) (float-vector 166.5 293.0 84.5)))
         (instance face :init :vertices (list (float-vector -176.5 -293.0 84.5) (float-vector -176.5 -293.0 -0.5) (float-vector 166.5 -293.0 -0.5) (float-vector 166.5 -293.0 84.5)))
         (instance face :init :vertices (list (float-vector -176.5 293.0 84.5) (float-vector -176.5 293.0 -0.5) (float-vector -176.5 -293.0 -0.5) (float-vector -176.5 -293.0 84.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -166.0 283.0 1795.5) (float-vector -176.0 283.0 1795.5) (float-vector -176.0 -283.0 1795.5) (float-vector -166.0 -283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.0 283.0 84.5) (float-vector -166.0 283.0 84.5) (float-vector -166.0 -283.0 84.5) (float-vector -176.0 -283.0 84.5)))
         (instance face :init :vertices (list (float-vector -166.0 283.0 1795.5) (float-vector -166.0 283.0 84.5) (float-vector -176.0 283.0 84.5) (float-vector -176.0 283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -166.0 -283.0 1795.5) (float-vector -166.0 -283.0 84.5) (float-vector -166.0 283.0 84.5) (float-vector -166.0 283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.0 -283.0 1795.5) (float-vector -176.0 -283.0 84.5) (float-vector -166.0 -283.0 84.5) (float-vector -166.0 -283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.0 283.0 1795.5) (float-vector -176.0 283.0 84.5) (float-vector -176.0 -283.0 84.5) (float-vector -176.0 -283.0 1795.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 293.0 1795.5) (float-vector -176.5 293.0 1795.5) (float-vector -176.5 283.0 1795.5) (float-vector 166.5 283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.5 293.0 84.5) (float-vector 166.5 293.0 84.5) (float-vector 166.5 283.0 84.5) (float-vector -176.5 283.0 84.5)))
         (instance face :init :vertices (list (float-vector 166.5 293.0 1795.5) (float-vector 166.5 293.0 84.5) (float-vector -176.5 293.0 84.5) (float-vector -176.5 293.0 1795.5)))
         (instance face :init :vertices (list (float-vector 166.5 283.0 1795.5) (float-vector 166.5 283.0 84.5) (float-vector 166.5 293.0 84.5) (float-vector 166.5 293.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.5 283.0 1795.5) (float-vector -176.5 283.0 84.5) (float-vector 166.5 283.0 84.5) (float-vector 166.5 283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.5 293.0 1795.5) (float-vector -176.5 293.0 84.5) (float-vector -176.5 283.0 84.5) (float-vector -176.5 283.0 1795.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 -283.0 1795.5) (float-vector -176.5 -283.0 1795.5) (float-vector -176.5 -293.0 1795.5) (float-vector 166.5 -293.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.5 -283.0 84.5) (float-vector 166.5 -283.0 84.5) (float-vector 166.5 -293.0 84.5) (float-vector -176.5 -293.0 84.5)))
         (instance face :init :vertices (list (float-vector 166.5 -283.0 1795.5) (float-vector 166.5 -283.0 84.5) (float-vector -176.5 -283.0 84.5) (float-vector -176.5 -283.0 1795.5)))
         (instance face :init :vertices (list (float-vector 166.5 -293.0 1795.5) (float-vector 166.5 -293.0 84.5) (float-vector 166.5 -283.0 84.5) (float-vector 166.5 -283.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.5 -293.0 1795.5) (float-vector -176.5 -293.0 84.5) (float-vector 166.5 -293.0 84.5) (float-vector 166.5 -293.0 1795.5)))
         (instance face :init :vertices (list (float-vector -176.5 -283.0 1795.5) (float-vector -176.5 -283.0 84.5) (float-vector -176.5 -293.0 84.5) (float-vector -176.5 -293.0 1795.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 283.0 530.0) (float-vector -166.5 283.0 530.0) (float-vector -166.5 -283.0 530.0) (float-vector 166.5 -283.0 530.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 520.0) (float-vector 166.5 283.0 520.0) (float-vector 166.5 -283.0 520.0) (float-vector -166.5 -283.0 520.0)))
         (instance face :init :vertices (list (float-vector 166.5 283.0 530.0) (float-vector 166.5 283.0 520.0) (float-vector -166.5 283.0 520.0) (float-vector -166.5 283.0 530.0)))
         (instance face :init :vertices (list (float-vector 166.5 -283.0 530.0) (float-vector 166.5 -283.0 520.0) (float-vector 166.5 283.0 520.0) (float-vector 166.5 283.0 530.0)))
         (instance face :init :vertices (list (float-vector -166.5 -283.0 530.0) (float-vector -166.5 -283.0 520.0) (float-vector 166.5 -283.0 520.0) (float-vector 166.5 -283.0 530.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 530.0) (float-vector -166.5 283.0 520.0) (float-vector -166.5 -283.0 520.0) (float-vector -166.5 -283.0 530.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 283.0 880.0) (float-vector -166.5 283.0 880.0) (float-vector -166.5 -283.0 880.0) (float-vector 166.5 -283.0 880.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 870.0) (float-vector 166.5 283.0 870.0) (float-vector 166.5 -283.0 870.0) (float-vector -166.5 -283.0 870.0)))
         (instance face :init :vertices (list (float-vector 166.5 283.0 880.0) (float-vector 166.5 283.0 870.0) (float-vector -166.5 283.0 870.0) (float-vector -166.5 283.0 880.0)))
         (instance face :init :vertices (list (float-vector 166.5 -283.0 880.0) (float-vector 166.5 -283.0 870.0) (float-vector 166.5 283.0 870.0) (float-vector 166.5 283.0 880.0)))
         (instance face :init :vertices (list (float-vector -166.5 -283.0 880.0) (float-vector -166.5 -283.0 870.0) (float-vector 166.5 -283.0 870.0) (float-vector 166.5 -283.0 880.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 880.0) (float-vector -166.5 283.0 870.0) (float-vector -166.5 -283.0 870.0) (float-vector -166.5 -283.0 880.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 283.0 1330.0) (float-vector -166.5 283.0 1330.0) (float-vector -166.5 -283.0 1330.0) (float-vector 166.5 -283.0 1330.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 1320.0) (float-vector 166.5 283.0 1320.0) (float-vector 166.5 -283.0 1320.0) (float-vector -166.5 -283.0 1320.0)))
         (instance face :init :vertices (list (float-vector 166.5 283.0 1330.0) (float-vector 166.5 283.0 1320.0) (float-vector -166.5 283.0 1320.0) (float-vector -166.5 283.0 1330.0)))
         (instance face :init :vertices (list (float-vector 166.5 -283.0 1330.0) (float-vector 166.5 -283.0 1320.0) (float-vector 166.5 283.0 1320.0) (float-vector 166.5 283.0 1330.0)))
         (instance face :init :vertices (list (float-vector -166.5 -283.0 1330.0) (float-vector -166.5 -283.0 1320.0) (float-vector 166.5 -283.0 1320.0) (float-vector 166.5 -283.0 1330.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 1330.0) (float-vector -166.5 283.0 1320.0) (float-vector -166.5 -283.0 1320.0) (float-vector -166.5 -283.0 1330.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 166.5 283.0 1565.0) (float-vector -166.5 283.0 1565.0) (float-vector -166.5 -283.0 1565.0) (float-vector 166.5 -283.0 1565.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 1555.0) (float-vector 166.5 283.0 1555.0) (float-vector 166.5 -283.0 1555.0) (float-vector -166.5 -283.0 1555.0)))
         (instance face :init :vertices (list (float-vector 166.5 283.0 1565.0) (float-vector 166.5 283.0 1555.0) (float-vector -166.5 283.0 1555.0) (float-vector -166.5 283.0 1565.0)))
         (instance face :init :vertices (list (float-vector 166.5 -283.0 1565.0) (float-vector 166.5 -283.0 1555.0) (float-vector 166.5 283.0 1555.0) (float-vector 166.5 283.0 1565.0)))
         (instance face :init :vertices (list (float-vector -166.5 -283.0 1565.0) (float-vector -166.5 -283.0 1555.0) (float-vector 166.5 -283.0 1555.0) (float-vector 166.5 -283.0 1565.0)))
         (instance face :init :vertices (list (float-vector -166.5 283.0 1565.0) (float-vector -166.5 283.0 1555.0) (float-vector -166.5 -283.0 1555.0) (float-vector -166.5 -283.0 1565.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :beige)
     (send (elt bc 2) :set-color :beige)
     (send (elt bc 3) :set-color :beige)
     (send (elt bc 4) :set-color :beige)
     (send (elt bc 5) :set-color :beige)
     (send (elt bc 6) :set-color :beige)
     (send (elt bc 7) :set-color :beige)
     (send (elt bc 8) :set-color :beige)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset304831448
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 5.5 450.0) (float-vector -5.0 5.5 450.0) (float-vector -5.0 -287.5 450.0) (float-vector 5.0 -287.5 450.0)))
         (instance face :init :vertices (list (float-vector -5.0 5.5 0.0) (float-vector 5.0 5.5 0.0) (float-vector 5.0 -287.5 0.0) (float-vector -5.0 -287.5 0.0)))
         (instance face :init :vertices (list (float-vector 5.0 5.5 450.0) (float-vector 5.0 5.5 0.0) (float-vector -5.0 5.5 0.0) (float-vector -5.0 5.5 450.0)))
         (instance face :init :vertices (list (float-vector 5.0 -287.5 450.0) (float-vector 5.0 -287.5 0.0) (float-vector 5.0 5.5 0.0) (float-vector 5.0 5.5 450.0)))
         (instance face :init :vertices (list (float-vector -5.0 -287.5 450.0) (float-vector -5.0 -287.5 0.0) (float-vector 5.0 -287.5 0.0) (float-vector 5.0 -287.5 450.0)))
         (instance face :init :vertices (list (float-vector -5.0 5.5 450.0) (float-vector -5.0 5.5 0.0) (float-vector -5.0 -287.5 0.0) (float-vector -5.0 -287.5 450.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :lightgoldenrodyellow)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset304831448 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset304851932
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.00024 287.5 450.0) (float-vector -4.99976 287.5 450.0) (float-vector -5.0 -5.5 450.0) (float-vector 5.0 -5.5 450.0)))
         (instance face :init :vertices (list (float-vector -4.99976 287.5 0.0) (float-vector 5.00024 287.5 0.0) (float-vector 5.0 -5.5 0.0) (float-vector -5.0 -5.5 0.0)))
         (instance face :init :vertices (list (float-vector 5.00024 287.5 450.0) (float-vector 5.00024 287.5 0.0) (float-vector -4.99976 287.5 0.0) (float-vector -4.99976 287.5 450.0)))
         (instance face :init :vertices (list (float-vector 5.0 -5.5 450.0) (float-vector 5.0 -5.5 0.0) (float-vector 5.00024 287.5 0.0) (float-vector 5.00024 287.5 450.0)))
         (instance face :init :vertices (list (float-vector -5.0 -5.5 450.0) (float-vector -5.0 -5.5 0.0) (float-vector 5.0 -5.5 0.0) (float-vector 5.0 -5.5 450.0)))
         (instance face :init :vertices (list (float-vector -4.99976 287.5 450.0) (float-vector -4.99976 287.5 0.0) (float-vector -5.0 -5.5 0.0) (float-vector -5.0 -5.5 450.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :lightgoldenrodyellow)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset304851932 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset304876532
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 5.0 470.0) (float-vector -5.0 5.0 470.0) (float-vector -5.0 -55.0 470.0) (float-vector 5.0 -55.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 5.0 0.0) (float-vector 5.0 5.0 0.0) (float-vector 5.0 -55.0 0.0) (float-vector -5.0 -55.0 0.0)))
         (instance face :init :vertices (list (float-vector 5.0 5.0 470.0) (float-vector 5.0 5.0 0.0) (float-vector -5.0 5.0 0.0) (float-vector -5.0 5.0 470.0)))
         (instance face :init :vertices (list (float-vector 5.0 -55.0 470.0) (float-vector 5.0 -55.0 0.0) (float-vector 5.0 5.0 0.0) (float-vector 5.0 5.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -55.0 470.0) (float-vector -5.0 -55.0 0.0) (float-vector 5.0 -55.0 0.0) (float-vector 5.0 -55.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 5.0 470.0) (float-vector -5.0 5.0 0.0) (float-vector -5.0 -55.0 0.0) (float-vector -5.0 -55.0 470.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 -54.5 470.0) (float-vector -5.0 -54.5 470.0) (float-vector -5.0 -227.5 470.0) (float-vector 5.0 -227.5 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -54.5 0.0) (float-vector 5.0 -54.5 0.0) (float-vector 5.0 -227.5 0.0) (float-vector -5.0 -227.5 0.0)))
         (instance face :init :vertices (list (float-vector 5.0 -54.5 470.0) (float-vector 5.0 -54.5 0.0) (float-vector -5.0 -54.5 0.0) (float-vector -5.0 -54.5 470.0)))
         (instance face :init :vertices (list (float-vector 5.0 -227.5 470.0) (float-vector 5.0 -227.5 0.0) (float-vector 5.0 -54.5 0.0) (float-vector 5.0 -54.5 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -227.5 470.0) (float-vector -5.0 -227.5 0.0) (float-vector 5.0 -227.5 0.0) (float-vector 5.0 -227.5 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -54.5 470.0) (float-vector -5.0 -54.5 0.0) (float-vector -5.0 -227.5 0.0) (float-vector -5.0 -227.5 470.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 -227.0 470.0) (float-vector -5.0 -227.0 470.0) (float-vector -5.0 -287.0 470.0) (float-vector 5.0 -287.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -227.0 0.0) (float-vector 5.0 -227.0 0.0) (float-vector 5.0 -287.0 0.0) (float-vector -5.0 -287.0 0.0)))
         (instance face :init :vertices (list (float-vector 5.0 -227.0 470.0) (float-vector 5.0 -227.0 0.0) (float-vector -5.0 -227.0 0.0) (float-vector -5.0 -227.0 470.0)))
         (instance face :init :vertices (list (float-vector 5.0 -287.0 470.0) (float-vector 5.0 -287.0 0.0) (float-vector 5.0 -227.0 0.0) (float-vector 5.0 -227.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -287.0 470.0) (float-vector -5.0 -287.0 0.0) (float-vector 5.0 -287.0 0.0) (float-vector 5.0 -287.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -227.0 470.0) (float-vector -5.0 -227.0 0.0) (float-vector -5.0 -287.0 0.0) (float-vector -5.0 -287.0 470.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :lightgoldenrodyellow)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.5)
     (send (elt bc 2) :set-color :lightgoldenrodyellow)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset304876532 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset304946024
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.00024 287.0 470.0) (float-vector -4.99976 287.0 470.0) (float-vector -5.0 227.0 470.0) (float-vector 5.0 227.0 470.0)))
         (instance face :init :vertices (list (float-vector -4.99976 287.0 0.0) (float-vector 5.00024 287.0 0.0) (float-vector 5.0 227.0 0.0) (float-vector -5.0 227.0 0.0)))
         (instance face :init :vertices (list (float-vector 5.00024 287.0 470.0) (float-vector 5.00024 287.0 0.0) (float-vector -4.99976 287.0 0.0) (float-vector -4.99976 287.0 470.0)))
         (instance face :init :vertices (list (float-vector 5.0 227.0 470.0) (float-vector 5.0 227.0 0.0) (float-vector 5.00024 287.0 0.0) (float-vector 5.00024 287.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 227.0 470.0) (float-vector -5.0 227.0 0.0) (float-vector 5.0 227.0 0.0) (float-vector 5.0 227.0 470.0)))
         (instance face :init :vertices (list (float-vector -4.99976 287.0 470.0) (float-vector -4.99976 287.0 0.0) (float-vector -5.0 227.0 0.0) (float-vector -5.0 227.0 470.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 227.5 470.0) (float-vector -5.0 227.5 470.0) (float-vector -5.0 54.5 470.0) (float-vector 5.0 54.5 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 227.5 0.0) (float-vector 5.0 227.5 0.0) (float-vector 5.0 54.5 0.0) (float-vector -5.0 54.5 0.0)))
         (instance face :init :vertices (list (float-vector 5.0 227.5 470.0) (float-vector 5.0 227.5 0.0) (float-vector -5.0 227.5 0.0) (float-vector -5.0 227.5 470.0)))
         (instance face :init :vertices (list (float-vector 5.0 54.5 470.0) (float-vector 5.0 54.5 0.0) (float-vector 5.0 227.5 0.0) (float-vector 5.0 227.5 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 54.5 470.0) (float-vector -5.0 54.5 0.0) (float-vector 5.0 54.5 0.0) (float-vector 5.0 54.5 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 227.5 470.0) (float-vector -5.0 227.5 0.0) (float-vector -5.0 54.5 0.0) (float-vector -5.0 54.5 470.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 55.0 470.0) (float-vector -5.0 55.0 470.0) (float-vector -5.0 -5.0 470.0) (float-vector 5.0 -5.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 55.0 0.0) (float-vector 5.0 55.0 0.0) (float-vector 5.0 -5.0 0.0) (float-vector -5.0 -5.0 0.0)))
         (instance face :init :vertices (list (float-vector 5.0 55.0 470.0) (float-vector 5.0 55.0 0.0) (float-vector -5.0 55.0 0.0) (float-vector -5.0 55.0 470.0)))
         (instance face :init :vertices (list (float-vector 5.0 -5.0 470.0) (float-vector 5.0 -5.0 0.0) (float-vector 5.0 55.0 0.0) (float-vector 5.0 55.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 -5.0 470.0) (float-vector -5.0 -5.0 0.0) (float-vector 5.0 -5.0 0.0) (float-vector 5.0 -5.0 470.0)))
         (instance face :init :vertices (list (float-vector -5.0 55.0 470.0) (float-vector -5.0 55.0 0.0) (float-vector -5.0 -5.0 0.0) (float-vector -5.0 -5.0 470.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :lightgoldenrodyellow)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.5)
     (send (elt bc 2) :set-color :lightgoldenrodyellow)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset304946024 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 171.0 -288.0 1325.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 171.0 288.0 1325.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 171.0 -288.0 80.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 171.0 288.0 80.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door-upper-right
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door-upper-right :axis :-z
			     :min    0.0 :max   90.0))

     ;; definition of :door-upper-left
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :door-upper-left :axis :z 
			     :min    0.0 :max   90.0))

     ;; definition of :door-lower-right
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink3 :name :door-lower-right :axis :-z
			     :min    0.0 :max   90.0))

     ;; definition of :door-lower-left
     (setq joint3 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink4 :name :door-lower-left :axis :z 
			     :min    0.0 :max   90.0))

     (setq links (list blink0 blink1 blink2 blink3 blink4))
     (setq joint-list (list joint0 joint1 joint2 joint3))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun room73b2-cupboard-left (&rest args) (instance* room73b2-cupboard-left-object :init args))
;; (format *error-output* "(instance room73b2-cupboard-left-object :init) for generating model~%")
