;;
;;
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room83b1-shelf-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod room83b1-shelf-object
  (:init
   (&rest args &key (name "room83b1-shelf") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 handle0
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room83b1-shelf-bodyset11
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 125.0 400.0 50.0) (float-vector -125.0 400.0 50.0) (float-vector -125.0 -400.0 50.0) (float-vector 125.0 -400.0 50.0)))
         (instance face :init :vertices (list (float-vector -125.0 400.0 0.0) (float-vector 125.0 400.0 0.0) (float-vector 125.0 -400.0 0.0) (float-vector -125.0 -400.0 0.0)))
         (instance face :init :vertices (list (float-vector 125.0 400.0 50.0) (float-vector 125.0 400.0 0.0) (float-vector -125.0 400.0 0.0) (float-vector -125.0 400.0 50.0)))
         (instance face :init :vertices (list (float-vector 125.0 -400.0 50.0) (float-vector 125.0 -400.0 0.0) (float-vector 125.0 400.0 0.0) (float-vector 125.0 400.0 50.0)))
         (instance face :init :vertices (list (float-vector -125.0 -400.0 50.0) (float-vector -125.0 -400.0 0.0) (float-vector 125.0 -400.0 0.0) (float-vector 125.0 -400.0 50.0)))
         (instance face :init :vertices (list (float-vector -125.0 400.0 50.0) (float-vector -125.0 400.0 0.0) (float-vector -125.0 -400.0 0.0) (float-vector -125.0 -400.0 50.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 125.0 400.0 1800.0) (float-vector -125.0 400.0 1800.0) (float-vector -125.0 -400.0 1800.0) (float-vector 125.0 -400.0 1800.0)))
         (instance face :init :vertices (list (float-vector -125.0 400.0 1750.0) (float-vector 125.0 400.0 1750.0) (float-vector 125.0 -400.0 1750.0) (float-vector -125.0 -400.0 1750.0)))
         (instance face :init :vertices (list (float-vector 125.0 400.0 1800.0) (float-vector 125.0 400.0 1750.0) (float-vector -125.0 400.0 1750.0) (float-vector -125.0 400.0 1800.0)))
         (instance face :init :vertices (list (float-vector 125.0 -400.0 1800.0) (float-vector 125.0 -400.0 1750.0) (float-vector 125.0 400.0 1750.0) (float-vector 125.0 400.0 1800.0)))
         (instance face :init :vertices (list (float-vector -125.0 -400.0 1800.0) (float-vector -125.0 -400.0 1750.0) (float-vector 125.0 -400.0 1750.0) (float-vector 125.0 -400.0 1800.0)))
         (instance face :init :vertices (list (float-vector -125.0 400.0 1800.0) (float-vector -125.0 400.0 1750.0) (float-vector -125.0 -400.0 1750.0) (float-vector -125.0 -400.0 1800.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -75.0 375.0 1750.0) (float-vector -125.0 375.0 1750.0) (float-vector -125.0 -375.0 1750.0) (float-vector -75.0 -375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 375.0 50.0) (float-vector -75.0 375.0 50.0) (float-vector -75.0 -375.0 50.0) (float-vector -125.0 -375.0 50.0)))
         (instance face :init :vertices (list (float-vector -75.0 375.0 1750.0) (float-vector -75.0 375.0 50.0) (float-vector -125.0 375.0 50.0) (float-vector -125.0 375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -75.0 -375.0 1750.0) (float-vector -75.0 -375.0 50.0) (float-vector -75.0 375.0 50.0) (float-vector -75.0 375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 -375.0 1750.0) (float-vector -125.0 -375.0 50.0) (float-vector -75.0 -375.0 50.0) (float-vector -75.0 -375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 375.0 1750.0) (float-vector -125.0 375.0 50.0) (float-vector -125.0 -375.0 50.0) (float-vector -125.0 -375.0 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 125.0 425.0 1750.0) (float-vector -125.0 425.0 1750.0) (float-vector -125.0 375.0 1750.0) (float-vector 125.0 375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 425.0 50.0) (float-vector 125.0 425.0 50.0) (float-vector 125.0 375.0 50.0) (float-vector -125.0 375.0 50.0)))
         (instance face :init :vertices (list (float-vector 125.0 425.0 1750.0) (float-vector 125.0 425.0 50.0) (float-vector -125.0 425.0 50.0) (float-vector -125.0 425.0 1750.0)))
         (instance face :init :vertices (list (float-vector 125.0 375.0 1750.0) (float-vector 125.0 375.0 50.0) (float-vector 125.0 425.0 50.0) (float-vector 125.0 425.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 375.0 1750.0) (float-vector -125.0 375.0 50.0) (float-vector 125.0 375.0 50.0) (float-vector 125.0 375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 425.0 1750.0) (float-vector -125.0 425.0 50.0) (float-vector -125.0 375.0 50.0) (float-vector -125.0 375.0 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 125.0 -375.0 1750.0) (float-vector -125.0 -375.0 1750.0) (float-vector -125.0 -425.0 1750.0) (float-vector 125.0 -425.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 -375.0 50.0) (float-vector 125.0 -375.0 50.0) (float-vector 125.0 -425.0 50.0) (float-vector -125.0 -425.0 50.0)))
         (instance face :init :vertices (list (float-vector 125.0 -375.0 1750.0) (float-vector 125.0 -375.0 50.0) (float-vector -125.0 -375.0 50.0) (float-vector -125.0 -375.0 1750.0)))
         (instance face :init :vertices (list (float-vector 125.0 -425.0 1750.0) (float-vector 125.0 -425.0 50.0) (float-vector 125.0 -375.0 50.0) (float-vector 125.0 -375.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 -425.0 1750.0) (float-vector -125.0 -425.0 50.0) (float-vector 125.0 -425.0 50.0) (float-vector 125.0 -425.0 1750.0)))
         (instance face :init :vertices (list (float-vector -125.0 -375.0 1750.0) (float-vector -125.0 -375.0 50.0) (float-vector -125.0 -425.0 50.0) (float-vector -125.0 -425.0 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 112.5 387.5 1435.0) (float-vector -112.5 387.5 1435.0) (float-vector -112.5 -387.5 1435.0) (float-vector 112.5 -387.5 1435.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 1385.0) (float-vector 112.5 387.5 1385.0) (float-vector 112.5 -387.5 1385.0) (float-vector -112.5 -387.5 1385.0)))
         (instance face :init :vertices (list (float-vector 112.5 387.5 1435.0) (float-vector 112.5 387.5 1385.0) (float-vector -112.5 387.5 1385.0) (float-vector -112.5 387.5 1435.0)))
         (instance face :init :vertices (list (float-vector 112.5 -387.5 1435.0) (float-vector 112.5 -387.5 1385.0) (float-vector 112.5 387.5 1385.0) (float-vector 112.5 387.5 1435.0)))
         (instance face :init :vertices (list (float-vector -112.5 -387.5 1435.0) (float-vector -112.5 -387.5 1385.0) (float-vector 112.5 -387.5 1385.0) (float-vector 112.5 -387.5 1435.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 1435.0) (float-vector -112.5 387.5 1385.0) (float-vector -112.5 -387.5 1385.0) (float-vector -112.5 -387.5 1435.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 112.5 387.5 1095.0) (float-vector -112.5 387.5 1095.0) (float-vector -112.5 -387.5 1095.0) (float-vector 112.5 -387.5 1095.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 1045.0) (float-vector 112.5 387.5 1045.0) (float-vector 112.5 -387.5 1045.0) (float-vector -112.5 -387.5 1045.0)))
         (instance face :init :vertices (list (float-vector 112.5 387.5 1095.0) (float-vector 112.5 387.5 1045.0) (float-vector -112.5 387.5 1045.0) (float-vector -112.5 387.5 1095.0)))
         (instance face :init :vertices (list (float-vector 112.5 -387.5 1095.0) (float-vector 112.5 -387.5 1045.0) (float-vector 112.5 387.5 1045.0) (float-vector 112.5 387.5 1095.0)))
         (instance face :init :vertices (list (float-vector -112.5 -387.5 1095.0) (float-vector -112.5 -387.5 1045.0) (float-vector 112.5 -387.5 1045.0) (float-vector 112.5 -387.5 1095.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 1095.0) (float-vector -112.5 387.5 1045.0) (float-vector -112.5 -387.5 1045.0) (float-vector -112.5 -387.5 1095.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 112.5 387.5 755.0) (float-vector -112.5 387.5 755.0) (float-vector -112.5 -387.5 755.0) (float-vector 112.5 -387.5 755.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 705.0) (float-vector 112.5 387.5 705.0) (float-vector 112.5 -387.5 705.0) (float-vector -112.5 -387.5 705.0)))
         (instance face :init :vertices (list (float-vector 112.5 387.5 755.0) (float-vector 112.5 387.5 705.0) (float-vector -112.5 387.5 705.0) (float-vector -112.5 387.5 755.0)))
         (instance face :init :vertices (list (float-vector 112.5 -387.5 755.0) (float-vector 112.5 -387.5 705.0) (float-vector 112.5 387.5 705.0) (float-vector 112.5 387.5 755.0)))
         (instance face :init :vertices (list (float-vector -112.5 -387.5 755.0) (float-vector -112.5 -387.5 705.0) (float-vector 112.5 -387.5 705.0) (float-vector 112.5 -387.5 755.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 755.0) (float-vector -112.5 387.5 705.0) (float-vector -112.5 -387.5 705.0) (float-vector -112.5 -387.5 755.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 112.5 387.5 415.0) (float-vector -112.5 387.5 415.0) (float-vector -112.5 -387.5 415.0) (float-vector 112.5 -387.5 415.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 365.0) (float-vector 112.5 387.5 365.0) (float-vector 112.5 -387.5 365.0) (float-vector -112.5 -387.5 365.0)))
         (instance face :init :vertices (list (float-vector 112.5 387.5 415.0) (float-vector 112.5 387.5 365.0) (float-vector -112.5 387.5 365.0) (float-vector -112.5 387.5 415.0)))
         (instance face :init :vertices (list (float-vector 112.5 -387.5 415.0) (float-vector 112.5 -387.5 365.0) (float-vector 112.5 387.5 365.0) (float-vector 112.5 387.5 415.0)))
         (instance face :init :vertices (list (float-vector -112.5 -387.5 415.0) (float-vector -112.5 -387.5 365.0) (float-vector 112.5 -387.5 365.0) (float-vector 112.5 -387.5 415.0)))
         (instance face :init :vertices (list (float-vector -112.5 387.5 415.0) (float-vector -112.5 387.5 365.0) (float-vector -112.5 -387.5 365.0) (float-vector -112.5 -387.5 415.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray20)
     (send (elt bc 1) :set-color :gray20)
     (send (elt bc 2) :set-color :gray20)
     (send (elt bc 3) :set-color :gray20)
     (send (elt bc 4) :set-color :gray20)
     (send (elt bc 5) :set-color :gray20)
     (send (elt bc 6) :set-color :gray20)
     (send (elt bc 7) :set-color :gray20)
     (send (elt bc 8) :set-color :gray20)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room83b1-shelf-bodyset11 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 1250.0 3255.0 0.0) :rot #2f((2.220446e-16 1.0 0.0) (-1.0 2.220446e-16 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send self :assoc handle0)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:handle () (list  handle0))
  (:handle-handle0 () handle0)
  (:attention () (list ))
  (:button () (list ))
  )

(defun room83b1-shelf (&rest args) (instance* room83b1-shelf-object :init args))
;; (format *error-output* "(instance room83b1-shelf-object :init) for generating model~%")
