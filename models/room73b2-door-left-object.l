;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r482M 655:657 48161) for Linux64 created on k-okada-t410s(Tue Jun 21 11:43:49 JST 2011)
;;
;;
(defclass room73b2-door-left-object
  :super cascaded-link
  :slots (sensors
         joint0 ))
(defmethod room73b2-door-left-object
  (:init
   (&rest args &key (name "room73b2-door-left") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset118524248
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -10.0 395.0 2350.0) (float-vector -20.0 395.0 2350.0) (float-vector -20.0 385.0 2350.0) (float-vector -10.0 385.0 2350.0)))
         (instance face :init :vertices (list (float-vector -20.0 395.0 0.0) (float-vector -10.0 395.0 0.0) (float-vector -10.0 385.0 0.0) (float-vector -20.0 385.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 395.0 2350.0) (float-vector -10.0 395.0 0.0) (float-vector -20.0 395.0 0.0) (float-vector -20.0 395.0 2350.0)))
         (instance face :init :vertices (list (float-vector -10.0 385.0 2350.0) (float-vector -10.0 385.0 0.0) (float-vector -10.0 395.0 0.0) (float-vector -10.0 395.0 2350.0)))
         (instance face :init :vertices (list (float-vector -20.0 385.0 2350.0) (float-vector -20.0 385.0 0.0) (float-vector -10.0 385.0 0.0) (float-vector -10.0 385.0 2350.0)))
         (instance face :init :vertices (list (float-vector -20.0 395.0 2350.0) (float-vector -20.0 395.0 0.0) (float-vector -20.0 385.0 0.0) (float-vector -20.0 385.0 2350.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset118524248 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset118609528
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -25.0 -485.0 175.0) (float-vector -25.0 -585.0 175.0) (float-vector 0.0 -585.0 175.0) (float-vector 0.0 -485.0 175.0)))
         (instance face :init :vertices (list (float-vector 10.0 -485.0 175.0) (float-vector 10.0 -585.0 175.0) (float-vector 25.0 -585.0 175.0) (float-vector 25.0 -485.0 175.0)))
         (instance face :init :vertices (list (float-vector 10.0 -485.0 2175.0) (float-vector 10.0 -485.0 175.0) (float-vector 25.0 -485.0 175.0) (float-vector 25.0 -485.0 2175.0)))
         (instance face :init :vertices (list (float-vector -25.0 -485.0 175.0) (float-vector 0.0 -485.0 175.0) (float-vector 0.0 -485.0 2175.0) (float-vector -25.0 -485.0 2175.0)))
         (instance face :init :vertices (list (float-vector 10.0 -585.0 2175.0) (float-vector 10.0 -485.0 2175.0) (float-vector 25.0 -485.0 2175.0) (float-vector 25.0 -585.0 2175.0)))
         (instance face :init :vertices (list (float-vector -25.0 -485.0 2175.0) (float-vector 0.0 -485.0 2175.0) (float-vector 0.0 -585.0 2175.0) (float-vector -25.0 -585.0 2175.0)))
         (instance face :init :vertices (list (float-vector -25.0 -585.0 2175.0) (float-vector 0.0 -585.0 2175.0) (float-vector 0.0 -585.0 175.0) (float-vector -25.0 -585.0 175.0)))
         (instance face :init :vertices (list (float-vector 25.0 -585.0 175.0) (float-vector 10.0 -585.0 175.0) (float-vector 10.0 -585.0 2175.0) (float-vector 25.0 -585.0 2175.0)))
         (instance face :init :vertices (list (float-vector -15.0 -795.0 0.0) (float-vector 15.0 -795.0 0.0) (float-vector 15.0 -795.0 2350.0) (float-vector -15.0 -795.0 2350.0)))
         (instance face :init :vertices (list (float-vector -15.0 -795.0 0.0) (float-vector -15.0 -795.0 2350.0) (float-vector -15.0 15.0 2350.0) (float-vector -15.0 15.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -15.0 -615.0 145.0) (float-vector -15.0 -455.0 145.0) (float-vector -15.0 -455.0 2205.0) (float-vector -15.0 -615.0 2205.0)))
))
         (instance face :init :vertices (list (float-vector 15.0 -795.0 2350.0) (float-vector 15.0 -795.0 0.0) (float-vector 15.0 15.0 0.0) (float-vector 15.0 15.0 2350.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 15.0 -615.0 2205.0) (float-vector 15.0 -455.0 2205.0) (float-vector 15.0 -455.0 145.0) (float-vector 15.0 -615.0 145.0)))
))
         (instance face :init :vertices (list (float-vector -15.0 15.0 2350.0) (float-vector -15.0 -795.0 2350.0) (float-vector 15.0 -795.0 2350.0) (float-vector 15.0 15.0 2350.0)))
         (instance face :init :vertices (list (float-vector 15.0 15.0 0.0) (float-vector 15.0 -795.0 0.0) (float-vector -15.0 -795.0 0.0) (float-vector -15.0 15.0 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 0.0) (float-vector -15.0 15.0 2350.0) (float-vector 15.0 15.0 2350.0) (float-vector 15.0 15.0 0.0)))
         (instance face :init :vertices (list (float-vector 15.0 -615.0 2205.0) (float-vector 15.0 -615.0 145.0) (float-vector 25.0 -615.0 145.0) (float-vector 25.0 -615.0 2205.0)))
         (instance face :init :vertices (list (float-vector -15.0 -615.0 145.0) (float-vector -15.0 -615.0 2205.0) (float-vector -25.0 -615.0 2205.0) (float-vector -25.0 -615.0 145.0)))
         (instance face :init :vertices (list (float-vector -25.0 -615.0 145.0) (float-vector -25.0 -615.0 2205.0) (float-vector -25.0 -455.0 2205.0) (float-vector -25.0 -455.0 145.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -25.0 -585.0 175.0) (float-vector -25.0 -485.0 175.0) (float-vector -25.0 -485.0 2175.0) (float-vector -25.0 -585.0 2175.0)))
))
         (instance face :init :vertices (list (float-vector 25.0 -615.0 2205.0) (float-vector 25.0 -615.0 145.0) (float-vector 25.0 -455.0 145.0) (float-vector 25.0 -455.0 2205.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 25.0 -585.0 2175.0) (float-vector 25.0 -485.0 2175.0) (float-vector 25.0 -485.0 175.0) (float-vector 25.0 -585.0 175.0)))
))
         (instance face :init :vertices (list (float-vector -25.0 -455.0 2205.0) (float-vector -25.0 -615.0 2205.0) (float-vector -15.0 -615.0 2205.0) (float-vector -15.0 -455.0 2205.0)))
         (instance face :init :vertices (list (float-vector 15.0 -455.0 2205.0) (float-vector 15.0 -615.0 2205.0) (float-vector 25.0 -615.0 2205.0) (float-vector 25.0 -455.0 2205.0)))
         (instance face :init :vertices (list (float-vector -15.0 -455.0 145.0) (float-vector -15.0 -615.0 145.0) (float-vector -25.0 -615.0 145.0) (float-vector -25.0 -455.0 145.0)))
         (instance face :init :vertices (list (float-vector -25.0 -455.0 145.0) (float-vector -25.0 -455.0 2205.0) (float-vector -15.0 -455.0 2205.0) (float-vector -15.0 -455.0 145.0)))
         (instance face :init :vertices (list (float-vector 25.0 -455.0 145.0) (float-vector 25.0 -615.0 145.0) (float-vector 15.0 -615.0 145.0) (float-vector 15.0 -455.0 145.0)))
         (instance face :init :vertices (list (float-vector 15.0 -455.0 145.0) (float-vector 15.0 -455.0 2205.0) (float-vector 25.0 -455.0 2205.0) (float-vector 25.0 -455.0 145.0)))
         (instance face :init :vertices (list (float-vector 0.0 -470.0 2190.0) (float-vector 0.0 -600.0 2190.0) (float-vector 0.0 -600.0 160.0) (float-vector 0.0 -470.0 160.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 0.0 -585.0 2175.0) (float-vector 0.0 -485.0 2175.0) (float-vector 0.0 -485.0 175.0) (float-vector 0.0 -585.0 175.0)))
))
         (instance face :init :vertices (list (float-vector 0.0 -600.0 160.0) (float-vector 0.0 -600.0 2190.0) (float-vector 10.0 -600.0 2190.0) (float-vector 10.0 -600.0 160.0)))
         (instance face :init :vertices (list (float-vector 10.0 -600.0 160.0) (float-vector 10.0 -600.0 2190.0) (float-vector 10.0 -470.0 2190.0) (float-vector 10.0 -470.0 160.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 10.0 -585.0 175.0) (float-vector 10.0 -485.0 175.0) (float-vector 10.0 -485.0 2175.0) (float-vector 10.0 -585.0 2175.0)))
))
         (instance face :init :vertices (list (float-vector 10.0 -470.0 2190.0) (float-vector 10.0 -600.0 2190.0) (float-vector 0.0 -600.0 2190.0) (float-vector 0.0 -470.0 2190.0)))
         (instance face :init :vertices (list (float-vector 10.0 -470.0 160.0) (float-vector 10.0 -470.0 2190.0) (float-vector 0.0 -470.0 2190.0) (float-vector 0.0 -470.0 160.0)))
         (instance face :init :vertices (list (float-vector 0.0 -470.0 160.0) (float-vector 0.0 -600.0 160.0) (float-vector 10.0 -600.0 160.0) (float-vector 10.0 -470.0 160.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 7.5 15.0 2350.0) (float-vector -7.5 15.0 2350.0) (float-vector -7.5 -795.0 2350.0) (float-vector 7.5 -795.0 2350.0)))
         (instance face :init :vertices (list (float-vector -7.5 15.0 0.0) (float-vector 7.5 15.0 0.0) (float-vector 7.5 -795.0 0.0) (float-vector -7.5 -795.0 0.0)))
         (instance face :init :vertices (list (float-vector 7.5 15.0 2350.0) (float-vector 7.5 15.0 0.0) (float-vector -7.5 15.0 0.0) (float-vector -7.5 15.0 2350.0)))
         (instance face :init :vertices (list (float-vector 7.5 -795.0 2350.0) (float-vector 7.5 -795.0 0.0) (float-vector 7.5 15.0 0.0) (float-vector 7.5 15.0 2350.0)))
         (instance face :init :vertices (list (float-vector -7.5 -795.0 2350.0) (float-vector -7.5 -795.0 0.0) (float-vector 7.5 -795.0 0.0) (float-vector 7.5 -795.0 2350.0)))
         (instance face :init :vertices (list (float-vector -7.5 15.0 2350.0) (float-vector -7.5 15.0 0.0) (float-vector -7.5 -795.0 0.0) (float-vector -7.5 -795.0 2350.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.3)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset118609528 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector -15.0 390.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; init-ending 
     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:door (&rest args) (forward-message-to joint0 args))
  (:handle () (list ))
  (:attention () (list ))
  (:button () (list ))
  )

(defun room73b2-door-left (&rest args) (instance* room73b2-door-left-object :init args))
;; (format *error-output* "(instance room73b2-door-left-object :init) for generating model~%")
