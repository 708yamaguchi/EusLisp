;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r473M 630 46425) for Linux64 created on k-okada-t410s(Sat Apr 23 16:48:15 JST 2011)
;;
;;
(defclass akiba-door-window-object
  :super cascaded-link
  :slots (sensors))
(defmethod akiba-door-window-object
  (:init
   (&rest args &key (name "akiba-door-window") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
         joint0 joint1
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset282122120
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -10.0 -290.0 2400.0) (float-vector -20.0 -290.0 2400.0) (float-vector -20.0 -300.0 2400.0) (float-vector -10.0 -300.0 2400.0)))
         (instance face :init :vertices (list (float-vector -20.0 -290.0 0.0) (float-vector -10.0 -290.0 0.0) (float-vector -10.0 -300.0 0.0) (float-vector -20.0 -300.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 -290.0 2400.0) (float-vector -10.0 -290.0 0.0) (float-vector -20.0 -290.0 0.0) (float-vector -20.0 -290.0 2400.0)))
         (instance face :init :vertices (list (float-vector -10.0 -300.0 2400.0) (float-vector -10.0 -300.0 0.0) (float-vector -10.0 -290.0 0.0) (float-vector -10.0 -290.0 2400.0)))
         (instance face :init :vertices (list (float-vector -20.0 -300.0 2400.0) (float-vector -20.0 -300.0 0.0) (float-vector -10.0 -300.0 0.0) (float-vector -10.0 -300.0 2400.0)))
         (instance face :init :vertices (list (float-vector -20.0 -290.0 2400.0) (float-vector -20.0 -290.0 0.0) (float-vector -20.0 -300.0 0.0) (float-vector -20.0 -300.0 2400.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset282122120 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset282419040
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -15.0 605.0 0.0) (float-vector -15.0 -15.0 0.0) (float-vector -15.0 -15.0 2400.0) (float-vector -15.0 605.0 2400.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -15.0 515.0 110.0) (float-vector -15.0 515.0 2290.0) (float-vector -15.0 95.0 2290.0) (float-vector -15.0 95.0 110.0)))
))
         (instance face :init :vertices (list (float-vector 15.0 -15.0 0.0) (float-vector 15.0 -15.0 2400.0) (float-vector -15.0 -15.0 2400.0) (float-vector -15.0 -15.0 0.0)))
         (instance face :init :vertices (list (float-vector 15.0 605.0 0.0) (float-vector 15.0 605.0 2400.0) (float-vector 15.0 -15.0 2400.0) (float-vector 15.0 -15.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 15.0 95.0 110.0) (float-vector 15.0 95.0 2290.0) (float-vector 15.0 515.0 2290.0) (float-vector 15.0 515.0 110.0)))
))
         (instance face :init :vertices (list (float-vector -15.0 605.0 2400.0) (float-vector -15.0 -15.0 2400.0) (float-vector 15.0 -15.0 2400.0) (float-vector 15.0 605.0 2400.0)))
         (instance face :init :vertices (list (float-vector 15.0 605.0 0.0) (float-vector 15.0 -15.0 0.0) (float-vector -15.0 -15.0 0.0) (float-vector -15.0 605.0 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 605.0 0.0) (float-vector -15.0 605.0 2400.0) (float-vector 15.0 605.0 2400.0) (float-vector 15.0 605.0 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 95.0 110.0) (float-vector -15.0 95.0 2290.0) (float-vector 15.0 95.0 2290.0) (float-vector 15.0 95.0 110.0)))
         (instance face :init :vertices (list (float-vector 15.0 515.0 2290.0) (float-vector 15.0 95.0 2290.0) (float-vector -15.0 95.0 2290.0) (float-vector -15.0 515.0 2290.0)))
         (instance face :init :vertices (list (float-vector 15.0 515.0 110.0) (float-vector 15.0 515.0 2290.0) (float-vector -15.0 515.0 2290.0) (float-vector -15.0 515.0 110.0)))
         (instance face :init :vertices (list (float-vector -15.0 515.0 110.0) (float-vector -15.0 95.0 110.0) (float-vector 15.0 95.0 110.0) (float-vector 15.0 515.0 110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 604.0 2399.0) (float-vector -5.0 604.0 2399.0) (float-vector -5.0 -14.0 2399.0) (float-vector 5.0 -14.0 2399.0)))
         (instance face :init :vertices (list (float-vector -5.0 604.0 1.0) (float-vector 5.0 604.0 1.0) (float-vector 5.0 -14.0 1.0) (float-vector -5.0 -14.0 1.0)))
         (instance face :init :vertices (list (float-vector 5.0 604.0 2399.0) (float-vector 5.0 604.0 1.0) (float-vector -5.0 604.0 1.0) (float-vector -5.0 604.0 2399.0)))
         (instance face :init :vertices (list (float-vector 5.0 -14.0 2399.0) (float-vector 5.0 -14.0 1.0) (float-vector 5.0 604.0 1.0) (float-vector 5.0 604.0 2399.0)))
         (instance face :init :vertices (list (float-vector -5.0 -14.0 2399.0) (float-vector -5.0 -14.0 1.0) (float-vector 5.0 -14.0 1.0) (float-vector 5.0 -14.0 2399.0)))
         (instance face :init :vertices (list (float-vector -5.0 604.0 2399.0) (float-vector -5.0 604.0 1.0) (float-vector -5.0 -14.0 1.0) (float-vector -5.0 -14.0 2399.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.3)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset282419040 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector -15.0 -295.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :-z
			     :min    0.0 :max   90.0))


     ;; init-ending 
     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:handle () (list ))
  (:attention () (list ))
  (:button () (list ))
  )

(defun akiba-door-window (&rest args) (instance* akiba-door-window-object :init args))
;; (format *error-output* "(instance akiba-door-window-object :init) for generating model~%")
