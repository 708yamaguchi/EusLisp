;;
;;
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-hrp2-parts-drawer-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 joint2 joint3 joint4 ))
(defmethod room73b2-hrp2-parts-drawer-object
  (:init
   (&rest args &key (name "room73b2-hrp2-parts-drawer") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 400.0 1160.0) (float-vector -200.0 400.0 1160.0) (float-vector -200.0 -400.0 1160.0) (float-vector 150.0 -400.0 1160.0)))
         (instance face :init :vertices (list (float-vector -200.0 400.0 1150.0) (float-vector 150.0 400.0 1150.0) (float-vector 150.0 -400.0 1150.0) (float-vector -200.0 -400.0 1150.0)))
         (instance face :init :vertices (list (float-vector 150.0 400.0 1160.0) (float-vector 150.0 400.0 1150.0) (float-vector -200.0 400.0 1150.0) (float-vector -200.0 400.0 1160.0)))
         (instance face :init :vertices (list (float-vector 150.0 -400.0 1160.0) (float-vector 150.0 -400.0 1150.0) (float-vector 150.0 400.0 1150.0) (float-vector 150.0 400.0 1160.0)))
         (instance face :init :vertices (list (float-vector -200.0 -400.0 1160.0) (float-vector -200.0 -400.0 1150.0) (float-vector 150.0 -400.0 1150.0) (float-vector 150.0 -400.0 1160.0)))
         (instance face :init :vertices (list (float-vector -200.0 400.0 1160.0) (float-vector -200.0 400.0 1150.0) (float-vector -200.0 -400.0 1150.0) (float-vector -200.0 -400.0 1160.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 400.0 30.0) (float-vector -200.0 400.0 30.0) (float-vector -200.0 -400.0 30.0) (float-vector 150.0 -400.0 30.0)))
         (instance face :init :vertices (list (float-vector -200.0 400.0 0.0) (float-vector 150.0 400.0 0.0) (float-vector 150.0 -400.0 0.0) (float-vector -200.0 -400.0 0.0)))
         (instance face :init :vertices (list (float-vector 150.0 400.0 30.0) (float-vector 150.0 400.0 0.0) (float-vector -200.0 400.0 0.0) (float-vector -200.0 400.0 30.0)))
         (instance face :init :vertices (list (float-vector 150.0 -400.0 30.0) (float-vector 150.0 -400.0 0.0) (float-vector 150.0 400.0 0.0) (float-vector 150.0 400.0 30.0)))
         (instance face :init :vertices (list (float-vector -200.0 -400.0 30.0) (float-vector -200.0 -400.0 0.0) (float-vector 150.0 -400.0 0.0) (float-vector 150.0 -400.0 30.0)))
         (instance face :init :vertices (list (float-vector -200.0 400.0 30.0) (float-vector -200.0 400.0 0.0) (float-vector -200.0 -400.0 0.0) (float-vector -200.0 -400.0 30.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 390.0 1150.0) (float-vector -200.0 390.0 1150.0) (float-vector -200.0 -390.0 1150.0) (float-vector -190.0 -390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 390.0 30.0) (float-vector -190.0 390.0 30.0) (float-vector -190.0 -390.0 30.0) (float-vector -200.0 -390.0 30.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 1150.0) (float-vector -190.0 390.0 30.0) (float-vector -200.0 390.0 30.0) (float-vector -200.0 390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -190.0 -390.0 1150.0) (float-vector -190.0 -390.0 30.0) (float-vector -190.0 390.0 30.0) (float-vector -190.0 390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 -390.0 1150.0) (float-vector -200.0 -390.0 30.0) (float-vector -190.0 -390.0 30.0) (float-vector -190.0 -390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 390.0 1150.0) (float-vector -200.0 390.0 30.0) (float-vector -200.0 -390.0 30.0) (float-vector -200.0 -390.0 1150.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 400.0 1150.0) (float-vector -200.0 400.0 1150.0) (float-vector -200.0 390.0 1150.0) (float-vector 150.0 390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 400.0 30.0) (float-vector 150.0 400.0 30.0) (float-vector 150.0 390.0 30.0) (float-vector -200.0 390.0 30.0)))
         (instance face :init :vertices (list (float-vector 150.0 400.0 1150.0) (float-vector 150.0 400.0 30.0) (float-vector -200.0 400.0 30.0) (float-vector -200.0 400.0 1150.0)))
         (instance face :init :vertices (list (float-vector 150.0 390.0 1150.0) (float-vector 150.0 390.0 30.0) (float-vector 150.0 400.0 30.0) (float-vector 150.0 400.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 390.0 1150.0) (float-vector -200.0 390.0 30.0) (float-vector 150.0 390.0 30.0) (float-vector 150.0 390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 400.0 1150.0) (float-vector -200.0 400.0 30.0) (float-vector -200.0 390.0 30.0) (float-vector -200.0 390.0 1150.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 -390.0 1150.0) (float-vector -200.0 -390.0 1150.0) (float-vector -200.0 -400.0 1150.0) (float-vector 150.0 -400.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 -390.0 30.0) (float-vector 150.0 -390.0 30.0) (float-vector 150.0 -400.0 30.0) (float-vector -200.0 -400.0 30.0)))
         (instance face :init :vertices (list (float-vector 150.0 -390.0 1150.0) (float-vector 150.0 -390.0 30.0) (float-vector -200.0 -390.0 30.0) (float-vector -200.0 -390.0 1150.0)))
         (instance face :init :vertices (list (float-vector 150.0 -400.0 1150.0) (float-vector 150.0 -400.0 30.0) (float-vector 150.0 -390.0 30.0) (float-vector 150.0 -390.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 -400.0 1150.0) (float-vector -200.0 -400.0 30.0) (float-vector 150.0 -400.0 30.0) (float-vector 150.0 -400.0 1150.0)))
         (instance face :init :vertices (list (float-vector -200.0 -390.0 1150.0) (float-vector -200.0 -390.0 30.0) (float-vector -200.0 -400.0 30.0) (float-vector -200.0 -400.0 1150.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 390.0 400.0) (float-vector -190.0 390.0 400.0) (float-vector -190.0 -390.0 400.0) (float-vector 150.0 -390.0 400.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 390.0) (float-vector 150.0 390.0 390.0) (float-vector 150.0 -390.0 390.0) (float-vector -190.0 -390.0 390.0)))
         (instance face :init :vertices (list (float-vector 150.0 390.0 400.0) (float-vector 150.0 390.0 390.0) (float-vector -190.0 390.0 390.0) (float-vector -190.0 390.0 400.0)))
         (instance face :init :vertices (list (float-vector 150.0 -390.0 400.0) (float-vector 150.0 -390.0 390.0) (float-vector 150.0 390.0 390.0) (float-vector 150.0 390.0 400.0)))
         (instance face :init :vertices (list (float-vector -190.0 -390.0 400.0) (float-vector -190.0 -390.0 390.0) (float-vector 150.0 -390.0 390.0) (float-vector 150.0 -390.0 400.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 400.0) (float-vector -190.0 390.0 390.0) (float-vector -190.0 -390.0 390.0) (float-vector -190.0 -390.0 400.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 390.0 590.0) (float-vector -190.0 390.0 590.0) (float-vector -190.0 -390.0 590.0) (float-vector 150.0 -390.0 590.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 580.0) (float-vector 150.0 390.0 580.0) (float-vector 150.0 -390.0 580.0) (float-vector -190.0 -390.0 580.0)))
         (instance face :init :vertices (list (float-vector 150.0 390.0 590.0) (float-vector 150.0 390.0 580.0) (float-vector -190.0 390.0 580.0) (float-vector -190.0 390.0 590.0)))
         (instance face :init :vertices (list (float-vector 150.0 -390.0 590.0) (float-vector 150.0 -390.0 580.0) (float-vector 150.0 390.0 580.0) (float-vector 150.0 390.0 590.0)))
         (instance face :init :vertices (list (float-vector -190.0 -390.0 590.0) (float-vector -190.0 -390.0 580.0) (float-vector 150.0 -390.0 580.0) (float-vector 150.0 -390.0 590.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 590.0) (float-vector -190.0 390.0 580.0) (float-vector -190.0 -390.0 580.0) (float-vector -190.0 -390.0 590.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 390.0 780.0) (float-vector -190.0 390.0 780.0) (float-vector -190.0 -390.0 780.0) (float-vector 150.0 -390.0 780.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 770.0) (float-vector 150.0 390.0 770.0) (float-vector 150.0 -390.0 770.0) (float-vector -190.0 -390.0 770.0)))
         (instance face :init :vertices (list (float-vector 150.0 390.0 780.0) (float-vector 150.0 390.0 770.0) (float-vector -190.0 390.0 770.0) (float-vector -190.0 390.0 780.0)))
         (instance face :init :vertices (list (float-vector 150.0 -390.0 780.0) (float-vector 150.0 -390.0 770.0) (float-vector 150.0 390.0 770.0) (float-vector 150.0 390.0 780.0)))
         (instance face :init :vertices (list (float-vector -190.0 -390.0 780.0) (float-vector -190.0 -390.0 770.0) (float-vector 150.0 -390.0 770.0) (float-vector 150.0 -390.0 780.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 780.0) (float-vector -190.0 390.0 770.0) (float-vector -190.0 -390.0 770.0) (float-vector -190.0 -390.0 780.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 390.0 970.0) (float-vector -190.0 390.0 970.0) (float-vector -190.0 -390.0 970.0) (float-vector 150.0 -390.0 970.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 960.0) (float-vector 150.0 390.0 960.0) (float-vector 150.0 -390.0 960.0) (float-vector -190.0 -390.0 960.0)))
         (instance face :init :vertices (list (float-vector 150.0 390.0 970.0) (float-vector 150.0 390.0 960.0) (float-vector -190.0 390.0 960.0) (float-vector -190.0 390.0 970.0)))
         (instance face :init :vertices (list (float-vector 150.0 -390.0 970.0) (float-vector 150.0 -390.0 960.0) (float-vector 150.0 390.0 960.0) (float-vector 150.0 390.0 970.0)))
         (instance face :init :vertices (list (float-vector -190.0 -390.0 970.0) (float-vector -190.0 -390.0 960.0) (float-vector 150.0 -390.0 960.0) (float-vector 150.0 -390.0 970.0)))
         (instance face :init :vertices (list (float-vector -190.0 390.0 970.0) (float-vector -190.0 390.0 960.0) (float-vector -190.0 -390.0 960.0) (float-vector -190.0 -390.0 970.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :burlywood1)
     (send (elt bc 1) :set-color :burlywood1)
     (send (elt bc 2) :set-color :burlywood1)
     (send (elt bc 3) :set-color :burlywood1)
     (send (elt bc 4) :set-color :burlywood1)
     (send (elt bc 5) :set-color :burlywood1)
     (send (elt bc 6) :set-color :burlywood1)
     (send (elt bc 7) :set-color :burlywood1)
     (send (elt bc 8) :set-color :burlywood1)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hrp2-parts-drawer-bodyset167
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 -377.5 -85.0) (float-vector 190.0 -377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 -377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 377.5 85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 -367.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -367.5 -75.0)))
         (instance face :init :vertices (list (float-vector 190.0 367.5 -75.0) (float-vector 190.0 367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 -75.0) (float-vector -180.0 -367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 367.5 -75.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 190.0 387.5 95.0) (float-vector 190.0 -387.5 95.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 190.0 -387.5 -85.0)))
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 200.0 387.5 -85.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 200.0 -387.5 95.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 -387.5 95.0) (float-vector 190.0 -387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 95.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 -387.5 -85.0) (float-vector 190.0 -387.5 95.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :burlywood1)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hrp2-parts-drawer-bodyset167 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hrp2-parts-drawer-bodyset213
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 -377.5 -85.0) (float-vector 190.0 -377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 -377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 377.5 85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 -367.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -367.5 -75.0)))
         (instance face :init :vertices (list (float-vector 190.0 367.5 -75.0) (float-vector 190.0 367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 -75.0) (float-vector -180.0 -367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 367.5 -75.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 190.0 387.5 95.0) (float-vector 190.0 -387.5 95.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 190.0 -387.5 -85.0)))
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 200.0 387.5 -85.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 200.0 -387.5 95.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 -387.5 95.0) (float-vector 190.0 -387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 95.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 -387.5 -85.0) (float-vector 190.0 -387.5 95.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :burlywood1)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hrp2-parts-drawer-bodyset213 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hrp2-parts-drawer-bodyset259
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 -377.5 -85.0) (float-vector 190.0 -377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 -377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 377.5 85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 -367.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -367.5 -75.0)))
         (instance face :init :vertices (list (float-vector 190.0 367.5 -75.0) (float-vector 190.0 367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 -75.0) (float-vector -180.0 -367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 367.5 -75.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 190.0 387.5 95.0) (float-vector 190.0 -387.5 95.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 190.0 -387.5 -85.0)))
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 200.0 387.5 -85.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 200.0 -387.5 95.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 -387.5 95.0) (float-vector 190.0 -387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 95.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 -387.5 -85.0) (float-vector 190.0 -387.5 95.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :burlywood1)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hrp2-parts-drawer-bodyset259 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hrp2-parts-drawer-bodyset305
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 -377.5 -85.0) (float-vector 190.0 -377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector -190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 85.0) (float-vector -190.0 -377.5 85.0) (float-vector 190.0 -377.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector 190.0 367.5 85.0) (float-vector 190.0 377.5 85.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -85.0) (float-vector 190.0 -377.5 -85.0) (float-vector -190.0 -377.5 -85.0) (float-vector -190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 -85.0) (float-vector -190.0 377.5 85.0) (float-vector 190.0 377.5 85.0) (float-vector 190.0 377.5 -85.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 85.0) (float-vector -180.0 -367.5 85.0) (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 -367.5 -75.0) (float-vector -180.0 -367.5 85.0) (float-vector 190.0 -367.5 85.0) (float-vector 190.0 -367.5 -75.0)))
         (instance face :init :vertices (list (float-vector 190.0 367.5 -75.0) (float-vector 190.0 367.5 85.0) (float-vector -180.0 367.5 85.0) (float-vector -180.0 367.5 -75.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 -75.0) (float-vector -180.0 -367.5 -75.0) (float-vector 190.0 -367.5 -75.0) (float-vector 190.0 367.5 -75.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 190.0 387.5 95.0) (float-vector 190.0 -387.5 95.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 190.0 -387.5 -85.0)))
         (instance face :init :vertices (list (float-vector 200.0 387.5 95.0) (float-vector 200.0 387.5 -85.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 200.0 -387.5 95.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 387.5 -85.0) (float-vector 200.0 387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 -387.5 95.0) (float-vector 190.0 -387.5 -85.0) (float-vector 200.0 -387.5 -85.0) (float-vector 200.0 -387.5 95.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 95.0) (float-vector 190.0 387.5 -85.0) (float-vector 190.0 -387.5 -85.0) (float-vector 190.0 -387.5 95.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :burlywood1)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hrp2-parts-drawer-bodyset305 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hrp2-parts-drawer-bodyset351
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 377.5 -180.0) (float-vector -190.0 -377.5 -180.0) (float-vector -190.0 -377.5 180.0) (float-vector -190.0 377.5 180.0)))
         (instance face :init :vertices (list (float-vector 190.0 -377.5 -180.0) (float-vector 190.0 -377.5 180.0) (float-vector -190.0 -377.5 180.0) (float-vector -190.0 -377.5 -180.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -180.0) (float-vector 190.0 377.5 180.0) (float-vector 190.0 367.5 180.0) (float-vector 190.0 367.5 -170.0) (float-vector 190.0 -367.5 -170.0) (float-vector 190.0 -367.5 180.0) (float-vector 190.0 -377.5 180.0) (float-vector 190.0 -377.5 -180.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 180.0) (float-vector -190.0 -377.5 180.0) (float-vector 190.0 -377.5 180.0) (float-vector 190.0 -367.5 180.0) (float-vector -180.0 -367.5 180.0) (float-vector -180.0 367.5 180.0) (float-vector 190.0 367.5 180.0) (float-vector 190.0 377.5 180.0)))
         (instance face :init :vertices (list (float-vector 190.0 377.5 -180.0) (float-vector 190.0 -377.5 -180.0) (float-vector -190.0 -377.5 -180.0) (float-vector -190.0 377.5 -180.0)))
         (instance face :init :vertices (list (float-vector -190.0 377.5 -180.0) (float-vector -190.0 377.5 180.0) (float-vector 190.0 377.5 180.0) (float-vector 190.0 377.5 -180.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 180.0) (float-vector -180.0 -367.5 180.0) (float-vector -180.0 -367.5 -170.0) (float-vector -180.0 367.5 -170.0)))
         (instance face :init :vertices (list (float-vector -180.0 -367.5 -170.0) (float-vector -180.0 -367.5 180.0) (float-vector 190.0 -367.5 180.0) (float-vector 190.0 -367.5 -170.0)))
         (instance face :init :vertices (list (float-vector 190.0 367.5 -170.0) (float-vector 190.0 367.5 180.0) (float-vector -180.0 367.5 180.0) (float-vector -180.0 367.5 -170.0)))
         (instance face :init :vertices (list (float-vector -180.0 367.5 -170.0) (float-vector -180.0 -367.5 -170.0) (float-vector 190.0 -367.5 -170.0) (float-vector 190.0 367.5 -170.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 387.5 190.0) (float-vector 190.0 387.5 190.0) (float-vector 190.0 -387.5 190.0) (float-vector 200.0 -387.5 190.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 -180.0) (float-vector 200.0 387.5 -180.0) (float-vector 200.0 -387.5 -180.0) (float-vector 190.0 -387.5 -180.0)))
         (instance face :init :vertices (list (float-vector 200.0 387.5 190.0) (float-vector 200.0 387.5 -180.0) (float-vector 190.0 387.5 -180.0) (float-vector 190.0 387.5 190.0)))
         (instance face :init :vertices (list (float-vector 200.0 -387.5 190.0) (float-vector 200.0 -387.5 -180.0) (float-vector 200.0 387.5 -180.0) (float-vector 200.0 387.5 190.0)))
         (instance face :init :vertices (list (float-vector 190.0 -387.5 190.0) (float-vector 190.0 -387.5 -180.0) (float-vector 200.0 -387.5 -180.0) (float-vector 200.0 -387.5 190.0)))
         (instance face :init :vertices (list (float-vector 190.0 387.5 190.0) (float-vector 190.0 387.5 -180.0) (float-vector 190.0 -387.5 -180.0) (float-vector 190.0 -387.5 190.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :burlywood1)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hrp2-parts-drawer-bodyset351 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 0.0 200.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 0.0 485.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 0.0 0.0 675.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 0.0 0.0 865.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector 0.0 0.0 1055.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :drawer0
     (setq joint0 (instance linear-joint :init
			     :parent-link blink0 :child-link blink1 :name :drawer0   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer01
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :drawer01  :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer02
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :drawer02  :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer03
     (setq joint3 (instance linear-joint :init
			     :parent-link blink0 :child-link blink4 :name :drawer03  :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer04
     (setq joint4 (instance linear-joint :init
			     :parent-link blink0 :child-link blink5 :name :drawer04  :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 6300.0 2000.0 0.0) :rot #2f((-1.0 -1.224606e-16 0.0) (1.224606e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send self :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:drawer0 (&rest args) (forward-message-to joint0 args))
  (:drawer01 (&rest args) (forward-message-to joint1 args))
  (:drawer02 (&rest args) (forward-message-to joint2 args))
  (:drawer03 (&rest args) (forward-message-to joint3 args))
  (:drawer04 (&rest args) (forward-message-to joint4 args))
  (:handle () (list  handle0))
  (:handle-handle0 () handle0)
  (:attention () (list ))
  (:button () (list ))
  )

(defun room73b2-hrp2-parts-drawer (&rest args) (instance* room73b2-hrp2-parts-drawer-object :init args))
;; (format *error-output* "(instance room73b2-hrp2-parts-drawer-object :init) for generating model~%")
