;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass petbottle-object
  :super cascaded-link
  :slots (sensors))
(defmethod petbottle-object
  (:init
   (&rest args &key (name "petbottle") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
         joint0
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of petbottle
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -20.0 -30.0 89.5) (float-vector 20.0 -30.0 89.5) (float-vector 30.0 -20.0 89.5) (float-vector 30.0 20.0 89.5) (float-vector 20.0 30.0 89.5) (float-vector -20.0 30.0 89.5) (float-vector -30.0 20.0 89.5) (float-vector -30.0 -20.0 89.5)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 12.0) (float-vector -20.0 -30.0 12.0) (float-vector -30.0 -20.0 12.0) (float-vector -30.0 20.0 12.0) (float-vector -20.0 30.0 12.0) (float-vector 20.0 30.0 12.0) (float-vector 30.0 20.0 12.0) (float-vector 30.0 -20.0 12.0)))
         (instance face :init :vertices (list (float-vector -20.0 -30.0 89.5) (float-vector -20.0 -30.0 12.0) (float-vector 20.0 -30.0 12.0) (float-vector 20.0 -30.0 89.5)))
         (instance face :init :vertices (list (float-vector -30.0 -20.0 89.5) (float-vector -30.0 -20.0 12.0) (float-vector -20.0 -30.0 12.0) (float-vector -20.0 -30.0 89.5)))
         (instance face :init :vertices (list (float-vector -30.0 20.0 89.5) (float-vector -30.0 20.0 12.0) (float-vector -30.0 -20.0 12.0) (float-vector -30.0 -20.0 89.5)))
         (instance face :init :vertices (list (float-vector -20.0 30.0 89.5) (float-vector -20.0 30.0 12.0) (float-vector -30.0 20.0 12.0) (float-vector -30.0 20.0 89.5)))
         (instance face :init :vertices (list (float-vector 20.0 30.0 89.5) (float-vector 20.0 30.0 12.0) (float-vector -20.0 30.0 12.0) (float-vector -20.0 30.0 89.5)))
         (instance face :init :vertices (list (float-vector 30.0 20.0 89.5) (float-vector 30.0 20.0 12.0) (float-vector 20.0 30.0 12.0) (float-vector 20.0 30.0 89.5)))
         (instance face :init :vertices (list (float-vector 30.0 -20.0 89.5) (float-vector 30.0 -20.0 12.0) (float-vector 30.0 20.0 12.0) (float-vector 30.0 20.0 89.5)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 89.5) (float-vector 20.0 -30.0 12.0) (float-vector 30.0 -20.0 12.0) (float-vector 30.0 -20.0 89.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -20.0 -30.0 162.0) (float-vector 20.0 -30.0 162.0) (float-vector 30.0 -20.0 162.0) (float-vector 30.0 20.0 162.0) (float-vector 20.0 30.0 162.0) (float-vector -20.0 30.0 162.0) (float-vector -30.0 20.0 162.0) (float-vector -30.0 -20.0 162.0)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 89.5) (float-vector -20.0 -30.0 89.5) (float-vector -30.0 -20.0 89.5) (float-vector -30.0 20.0 89.5) (float-vector -20.0 30.0 89.5) (float-vector 20.0 30.0 89.5) (float-vector 30.0 20.0 89.5) (float-vector 30.0 -20.0 89.5)))
         (instance face :init :vertices (list (float-vector -20.0 -30.0 162.0) (float-vector -20.0 -30.0 89.5) (float-vector 20.0 -30.0 89.5) (float-vector 20.0 -30.0 162.0)))
         (instance face :init :vertices (list (float-vector -30.0 -20.0 162.0) (float-vector -30.0 -20.0 89.5) (float-vector -20.0 -30.0 89.5) (float-vector -20.0 -30.0 162.0)))
         (instance face :init :vertices (list (float-vector -30.0 20.0 162.0) (float-vector -30.0 20.0 89.5) (float-vector -30.0 -20.0 89.5) (float-vector -30.0 -20.0 162.0)))
         (instance face :init :vertices (list (float-vector -20.0 30.0 162.0) (float-vector -20.0 30.0 89.5) (float-vector -30.0 20.0 89.5) (float-vector -30.0 20.0 162.0)))
         (instance face :init :vertices (list (float-vector 20.0 30.0 162.0) (float-vector 20.0 30.0 89.5) (float-vector -20.0 30.0 89.5) (float-vector -20.0 30.0 162.0)))
         (instance face :init :vertices (list (float-vector 30.0 20.0 162.0) (float-vector 30.0 20.0 89.5) (float-vector 20.0 30.0 89.5) (float-vector 20.0 30.0 162.0)))
         (instance face :init :vertices (list (float-vector 30.0 -20.0 162.0) (float-vector 30.0 -20.0 89.5) (float-vector 30.0 20.0 89.5) (float-vector 30.0 20.0 162.0)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 162.0) (float-vector 20.0 -30.0 89.5) (float-vector 30.0 -20.0 89.5) (float-vector 30.0 -20.0 162.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -20.0 30.0 12.0) (float-vector -12.6667 19.0 0.999998) (float-vector -19.0 12.6667 1.0) (float-vector -30.0 20.0 12.0)))
         (instance face :init :vertices (list (float-vector -30.0 20.0 12.0) (float-vector -19.0 12.6667 1.0) (float-vector -19.0 -12.6667 0.999997) (float-vector -30.0 -20.0 12.0)))
         (instance face :init :vertices (list (float-vector -30.0 -20.0 12.0) (float-vector -19.0 -12.6667 0.999997) (float-vector -12.6667 -19.0 1.0) (float-vector -20.0 -30.0 12.0)))
         (instance face :init :vertices (list (float-vector -20.0 -30.0 12.0) (float-vector -12.6667 -19.0 1.0) (float-vector 12.6667 -19.0 1.0) (float-vector 20.0 -30.0 12.0)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 12.0) (float-vector 12.6667 -19.0 1.0) (float-vector 19.0 -12.6667 0.999997) (float-vector 30.0 -20.0 12.0)))
         (instance face :init :vertices (list (float-vector 30.0 -20.0 12.0) (float-vector 19.0 -12.6667 0.999997) (float-vector 19.0 12.6667 1.0) (float-vector 30.0 20.0 12.0)))
         (instance face :init :vertices (list (float-vector 30.0 20.0 12.0) (float-vector 19.0 12.6667 1.0) (float-vector 12.6667 19.0 0.999998) (float-vector 20.0 30.0 12.0)))
         (instance face :init :vertices (list (float-vector -20.0 30.0 12.0) (float-vector -30.0 20.0 12.0) (float-vector -30.0 -20.0 12.0) (float-vector -20.0 -30.0 12.0) (float-vector 20.0 -30.0 12.0) (float-vector 30.0 -20.0 12.0) (float-vector 30.0 20.0 12.0) (float-vector 20.0 30.0 12.0)))
         (instance face :init :vertices (list (float-vector 20.0 30.0 12.0) (float-vector 12.6667 19.0 0.999998) (float-vector -12.6667 19.0 0.999998) (float-vector -20.0 30.0 12.0)))
         (instance face :init :vertices (list (float-vector 12.6667 19.0 0.999998) (float-vector 19.0 12.6667 1.0) (float-vector 19.0 -12.6667 0.999997) (float-vector 12.6667 -19.0 1.0) (float-vector -12.6667 -19.0 1.0) (float-vector -19.0 -12.6667 0.999997) (float-vector -19.0 12.6667 1.0) (float-vector -12.6667 19.0 0.999998)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -20.0 -30.0 156.0) (float-vector -6.66667 -10.0 196.0) (float-vector -10.0 -6.66666 196.0) (float-vector -30.0 -20.0 156.0)))
         (instance face :init :vertices (list (float-vector -30.0 -20.0 156.0) (float-vector -10.0 -6.66666 196.0) (float-vector -10.0 6.66666 196.0) (float-vector -30.0 20.0 156.0)))
         (instance face :init :vertices (list (float-vector -30.0 20.0 156.0) (float-vector -10.0 6.66666 196.0) (float-vector -6.66666 10.0 196.0) (float-vector -20.0 30.0 156.0)))
         (instance face :init :vertices (list (float-vector -20.0 30.0 156.0) (float-vector -6.66666 10.0 196.0) (float-vector 6.66666 10.0 196.0) (float-vector 20.0 30.0 156.0)))
         (instance face :init :vertices (list (float-vector 20.0 30.0 156.0) (float-vector 6.66666 10.0 196.0) (float-vector 10.0 6.66666 196.0) (float-vector 30.0 20.0 156.0)))
         (instance face :init :vertices (list (float-vector 30.0 20.0 156.0) (float-vector 10.0 6.66666 196.0) (float-vector 10.0 -6.66666 196.0) (float-vector 30.0 -20.0 156.0)))
         (instance face :init :vertices (list (float-vector 30.0 -20.0 156.0) (float-vector 10.0 -6.66666 196.0) (float-vector 6.66666 -10.0 196.0) (float-vector 20.0 -30.0 156.0)))
         (instance face :init :vertices (list (float-vector -20.0 -30.0 156.0) (float-vector -30.0 -20.0 156.0) (float-vector -30.0 20.0 156.0) (float-vector -20.0 30.0 156.0) (float-vector 20.0 30.0 156.0) (float-vector 30.0 20.0 156.0) (float-vector 30.0 -20.0 156.0) (float-vector 20.0 -30.0 156.0)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 156.0) (float-vector 6.66666 -10.0 196.0) (float-vector -6.66667 -10.0 196.0) (float-vector -20.0 -30.0 156.0)))
         (instance face :init :vertices (list (float-vector 6.66666 -10.0 196.0) (float-vector 10.0 -6.66666 196.0) (float-vector 10.0 6.66666 196.0) (float-vector 6.66666 10.0 196.0) (float-vector -6.66666 10.0 196.0) (float-vector -10.0 6.66666 196.0) (float-vector -10.0 -6.66666 196.0) (float-vector -6.66667 -10.0 196.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -20.0 -30.0 160.0) (float-vector -12.6667 -19.0 171.0) (float-vector -19.0 -12.6667 171.0) (float-vector -30.0 -20.0 160.0)))
         (instance face :init :vertices (list (float-vector -30.0 -20.0 160.0) (float-vector -19.0 -12.6667 171.0) (float-vector -19.0 12.6667 171.0) (float-vector -30.0 20.0 160.0)))
         (instance face :init :vertices (list (float-vector -30.0 20.0 160.0) (float-vector -19.0 12.6667 171.0) (float-vector -12.6667 19.0 171.0) (float-vector -20.0 30.0 160.0)))
         (instance face :init :vertices (list (float-vector -20.0 30.0 160.0) (float-vector -12.6667 19.0 171.0) (float-vector 12.6667 19.0 171.0) (float-vector 20.0 30.0 160.0)))
         (instance face :init :vertices (list (float-vector 20.0 30.0 160.0) (float-vector 12.6667 19.0 171.0) (float-vector 19.0 12.6667 171.0) (float-vector 30.0 20.0 160.0)))
         (instance face :init :vertices (list (float-vector 30.0 20.0 160.0) (float-vector 19.0 12.6667 171.0) (float-vector 19.0 -12.6667 171.0) (float-vector 30.0 -20.0 160.0)))
         (instance face :init :vertices (list (float-vector 30.0 -20.0 160.0) (float-vector 19.0 -12.6667 171.0) (float-vector 12.6667 -19.0 171.0) (float-vector 20.0 -30.0 160.0)))
         (instance face :init :vertices (list (float-vector -20.0 -30.0 160.0) (float-vector -30.0 -20.0 160.0) (float-vector -30.0 20.0 160.0) (float-vector -20.0 30.0 160.0) (float-vector 20.0 30.0 160.0) (float-vector 30.0 20.0 160.0) (float-vector 30.0 -20.0 160.0) (float-vector 20.0 -30.0 160.0)))
         (instance face :init :vertices (list (float-vector 20.0 -30.0 160.0) (float-vector 12.6667 -19.0 171.0) (float-vector -12.6667 -19.0 171.0) (float-vector -20.0 -30.0 160.0)))
         (instance face :init :vertices (list (float-vector 12.6667 -19.0 171.0) (float-vector 19.0 -12.6667 171.0) (float-vector 19.0 12.6667 171.0) (float-vector 12.6667 19.0 171.0) (float-vector -12.6667 19.0 171.0) (float-vector -19.0 12.6667 171.0) (float-vector -19.0 -12.6667 171.0) (float-vector -12.6667 -19.0 171.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 10.8253 -6.25001 216.0) (float-vector 12.5 0.0 216.0) (float-vector 10.8253 6.25 216.0) (float-vector 6.25 10.8253 216.0) (float-vector 3.931833e-06 12.5 216.0) (float-vector -6.24999 10.8253 216.0) (float-vector -10.8253 6.25001 216.0) (float-vector -12.5 7.776180e-06 216.0) (float-vector -10.8253 -6.24999 216.0) (float-vector -6.25001 -10.8253 216.0) (float-vector -1.162053e-05 -12.5 216.0) (float-vector 6.24999 -10.8253 216.0)))
         (instance face :init :vertices (list (float-vector 12.5 0.0 194.0) (float-vector 10.8253 -6.25001 194.0) (float-vector 6.24999 -10.8253 194.0) (float-vector -1.162053e-05 -12.5 194.0) (float-vector -6.25001 -10.8253 194.0) (float-vector -10.8253 -6.24999 194.0) (float-vector -12.5 7.776180e-06 194.0) (float-vector -10.8253 6.25001 194.0) (float-vector -6.24999 10.8253 194.0) (float-vector 3.931833e-06 12.5 194.0) (float-vector 6.25 10.8253 194.0) (float-vector 10.8253 6.25 194.0)))
         (instance face :init :vertices (list (float-vector 10.8253 -6.25001 216.0) (float-vector 10.8253 -6.25001 194.0) (float-vector 12.5 0.0 194.0) (float-vector 12.5 0.0 216.0)))
         (instance face :init :vertices (list (float-vector 6.24999 -10.8253 216.0) (float-vector 6.24999 -10.8253 194.0) (float-vector 10.8253 -6.25001 194.0) (float-vector 10.8253 -6.25001 216.0)))
         (instance face :init :vertices (list (float-vector -1.162053e-05 -12.5 216.0) (float-vector -1.162053e-05 -12.5 194.0) (float-vector 6.24999 -10.8253 194.0) (float-vector 6.24999 -10.8253 216.0)))
         (instance face :init :vertices (list (float-vector -6.25001 -10.8253 216.0) (float-vector -6.25001 -10.8253 194.0) (float-vector -1.162053e-05 -12.5 194.0) (float-vector -1.162053e-05 -12.5 216.0)))
         (instance face :init :vertices (list (float-vector -10.8253 -6.24999 216.0) (float-vector -10.8253 -6.24999 194.0) (float-vector -6.25001 -10.8253 194.0) (float-vector -6.25001 -10.8253 216.0)))
         (instance face :init :vertices (list (float-vector -12.5 7.776180e-06 216.0) (float-vector -12.5 7.776180e-06 194.0) (float-vector -10.8253 -6.24999 194.0) (float-vector -10.8253 -6.24999 216.0)))
         (instance face :init :vertices (list (float-vector -10.8253 6.25001 216.0) (float-vector -10.8253 6.25001 194.0) (float-vector -12.5 7.776180e-06 194.0) (float-vector -12.5 7.776180e-06 216.0)))
         (instance face :init :vertices (list (float-vector -6.24999 10.8253 216.0) (float-vector -6.24999 10.8253 194.0) (float-vector -10.8253 6.25001 194.0) (float-vector -10.8253 6.25001 216.0)))
         (instance face :init :vertices (list (float-vector 3.931833e-06 12.5 216.0) (float-vector 3.931833e-06 12.5 194.0) (float-vector -6.24999 10.8253 194.0) (float-vector -6.24999 10.8253 216.0)))
         (instance face :init :vertices (list (float-vector 6.25 10.8253 216.0) (float-vector 6.25 10.8253 194.0) (float-vector 3.931833e-06 12.5 194.0) (float-vector 3.931833e-06 12.5 216.0)))
         (instance face :init :vertices (list (float-vector 10.8253 6.25 216.0) (float-vector 10.8253 6.25 194.0) (float-vector 6.25 10.8253 194.0) (float-vector 6.25 10.8253 216.0)))
         (instance face :init :vertices (list (float-vector 12.5 0.0 216.0) (float-vector 12.5 0.0 194.0) (float-vector 10.8253 6.25 194.0) (float-vector 10.8253 6.25 216.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :lightskyblue)
     (send (elt bc 1) :set-color :lightskyblue)
     (send (elt bc 2) :set-color :lightskyblue)
     (send (elt bc 3) :set-color :lightskyblue)
     (send (elt bc 4) :set-color :lightskyblue)
     (send (elt bc 5) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name 'petbottle :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun petbottle (&rest args) (instance* petbottle-object :init args))
;; (format *error-output* "(instance petbottle-object :init) for generating model~%")
