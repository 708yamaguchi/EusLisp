;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r478M 647M 47109:47930) for Linux64 created on k-okada-t410s(Fri May 27 16:12:08 JST 2011)
;;
;;
(defclass room73b2-irt-mamoru-object
  :super cascaded-link
  :slots (sensors
         joint0 joint1 joint2 ))
(defmethod room73b2-irt-mamoru-object
  (:init
   (&rest args &key (name "room73b2-irt-mamoru") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3
                 handle0
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 350.0 210.0 700.0) (float-vector -350.0 210.0 700.0) (float-vector -350.0 -210.0 700.0) (float-vector 350.0 -210.0 700.0)))
         (instance face :init :vertices (list (float-vector -350.0 210.0 680.0) (float-vector 350.0 210.0 680.0) (float-vector 350.0 -210.0 680.0) (float-vector -350.0 -210.0 680.0)))
         (instance face :init :vertices (list (float-vector 350.0 210.0 700.0) (float-vector 350.0 210.0 680.0) (float-vector -350.0 210.0 680.0) (float-vector -350.0 210.0 700.0)))
         (instance face :init :vertices (list (float-vector 350.0 -210.0 700.0) (float-vector 350.0 -210.0 680.0) (float-vector 350.0 210.0 680.0) (float-vector 350.0 210.0 700.0)))
         (instance face :init :vertices (list (float-vector -350.0 -210.0 700.0) (float-vector -350.0 -210.0 680.0) (float-vector 350.0 -210.0 680.0) (float-vector 350.0 -210.0 700.0)))
         (instance face :init :vertices (list (float-vector -350.0 210.0 700.0) (float-vector -350.0 210.0 680.0) (float-vector -350.0 -210.0 680.0) (float-vector -350.0 -210.0 700.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 330.0 210.0 20.0) (float-vector -350.0 210.0 20.0) (float-vector -350.0 -210.0 20.0) (float-vector 330.0 -210.0 20.0)))
         (instance face :init :vertices (list (float-vector -350.0 210.0 0.0) (float-vector 330.0 210.0 0.0) (float-vector 330.0 -210.0 0.0) (float-vector -350.0 -210.0 0.0)))
         (instance face :init :vertices (list (float-vector 330.0 210.0 20.0) (float-vector 330.0 210.0 0.0) (float-vector -350.0 210.0 0.0) (float-vector -350.0 210.0 20.0)))
         (instance face :init :vertices (list (float-vector 330.0 -210.0 20.0) (float-vector 330.0 -210.0 0.0) (float-vector 330.0 210.0 0.0) (float-vector 330.0 210.0 20.0)))
         (instance face :init :vertices (list (float-vector -350.0 -210.0 20.0) (float-vector -350.0 -210.0 0.0) (float-vector 330.0 -210.0 0.0) (float-vector 330.0 -210.0 20.0)))
         (instance face :init :vertices (list (float-vector -350.0 210.0 20.0) (float-vector -350.0 210.0 0.0) (float-vector -350.0 -210.0 0.0) (float-vector -350.0 -210.0 20.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -330.0 190.0 680.0) (float-vector -350.0 190.0 680.0) (float-vector -350.0 -190.0 680.0) (float-vector -330.0 -190.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 190.0 20.0) (float-vector -330.0 190.0 20.0) (float-vector -330.0 -190.0 20.0) (float-vector -350.0 -190.0 20.0)))
         (instance face :init :vertices (list (float-vector -330.0 190.0 680.0) (float-vector -330.0 190.0 20.0) (float-vector -350.0 190.0 20.0) (float-vector -350.0 190.0 680.0)))
         (instance face :init :vertices (list (float-vector -330.0 -190.0 680.0) (float-vector -330.0 -190.0 20.0) (float-vector -330.0 190.0 20.0) (float-vector -330.0 190.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 -190.0 680.0) (float-vector -350.0 -190.0 20.0) (float-vector -330.0 -190.0 20.0) (float-vector -330.0 -190.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 190.0 680.0) (float-vector -350.0 190.0 20.0) (float-vector -350.0 -190.0 20.0) (float-vector -350.0 -190.0 680.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 330.0 210.0 680.0) (float-vector -350.0 210.0 680.0) (float-vector -350.0 190.0 680.0) (float-vector 330.0 190.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 210.0 20.0) (float-vector 330.0 210.0 20.0) (float-vector 330.0 190.0 20.0) (float-vector -350.0 190.0 20.0)))
         (instance face :init :vertices (list (float-vector 330.0 210.0 680.0) (float-vector 330.0 210.0 20.0) (float-vector -350.0 210.0 20.0) (float-vector -350.0 210.0 680.0)))
         (instance face :init :vertices (list (float-vector 330.0 190.0 680.0) (float-vector 330.0 190.0 20.0) (float-vector 330.0 210.0 20.0) (float-vector 330.0 210.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 190.0 680.0) (float-vector -350.0 190.0 20.0) (float-vector 330.0 190.0 20.0) (float-vector 330.0 190.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 210.0 680.0) (float-vector -350.0 210.0 20.0) (float-vector -350.0 190.0 20.0) (float-vector -350.0 190.0 680.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 330.0 -190.0 680.0) (float-vector -350.0 -190.0 680.0) (float-vector -350.0 -210.0 680.0) (float-vector 330.0 -210.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 -190.0 20.0) (float-vector 330.0 -190.0 20.0) (float-vector 330.0 -210.0 20.0) (float-vector -350.0 -210.0 20.0)))
         (instance face :init :vertices (list (float-vector 330.0 -190.0 680.0) (float-vector 330.0 -190.0 20.0) (float-vector -350.0 -190.0 20.0) (float-vector -350.0 -190.0 680.0)))
         (instance face :init :vertices (list (float-vector 330.0 -210.0 680.0) (float-vector 330.0 -210.0 20.0) (float-vector 330.0 -190.0 20.0) (float-vector 330.0 -190.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 -210.0 680.0) (float-vector -350.0 -210.0 20.0) (float-vector 330.0 -210.0 20.0) (float-vector 330.0 -210.0 680.0)))
         (instance face :init :vertices (list (float-vector -350.0 -190.0 680.0) (float-vector -350.0 -190.0 20.0) (float-vector -350.0 -210.0 20.0) (float-vector -350.0 -210.0 680.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :floralwhite)
     (send (elt bc 1) :set-color :floralwhite)
     (send (elt bc 2) :set-color :floralwhite)
     (send (elt bc 3) :set-color :floralwhite)
     (send (elt bc 4) :set-color :floralwhite)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset141683664
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -180.0 190.0 -25.0) (float-vector -180.0 -190.0 -25.0) (float-vector -180.0 -190.0 25.0) (float-vector -180.0 190.0 25.0)))
         (instance face :init :vertices (list (float-vector 180.0 -190.0 -25.0) (float-vector 180.0 -190.0 25.0) (float-vector -180.0 -190.0 25.0) (float-vector -180.0 -190.0 -25.0)))
         (instance face :init :vertices (list (float-vector 180.0 190.0 -25.0) (float-vector 180.0 190.0 25.0) (float-vector 180.0 170.0 25.0) (float-vector 180.0 170.0 -5.0) (float-vector 180.0 -170.0 -5.0) (float-vector 180.0 -170.0 25.0) (float-vector 180.0 -190.0 25.0) (float-vector 180.0 -190.0 -25.0)))
         (instance face :init :vertices (list (float-vector -180.0 190.0 25.0) (float-vector -180.0 -190.0 25.0) (float-vector 180.0 -190.0 25.0) (float-vector 180.0 -170.0 25.0) (float-vector -160.0 -170.0 25.0) (float-vector -160.0 170.0 25.0) (float-vector 180.0 170.0 25.0) (float-vector 180.0 190.0 25.0)))
         (instance face :init :vertices (list (float-vector 180.0 190.0 -25.0) (float-vector 180.0 -190.0 -25.0) (float-vector -180.0 -190.0 -25.0) (float-vector -180.0 190.0 -25.0)))
         (instance face :init :vertices (list (float-vector -180.0 190.0 -25.0) (float-vector -180.0 190.0 25.0) (float-vector 180.0 190.0 25.0) (float-vector 180.0 190.0 -25.0)))
         (instance face :init :vertices (list (float-vector -160.0 170.0 25.0) (float-vector -160.0 -170.0 25.0) (float-vector -160.0 -170.0 -5.0) (float-vector -160.0 170.0 -5.0)))
         (instance face :init :vertices (list (float-vector -160.0 -170.0 -5.0) (float-vector -160.0 -170.0 25.0) (float-vector 180.0 -170.0 25.0) (float-vector 180.0 -170.0 -5.0)))
         (instance face :init :vertices (list (float-vector 180.0 170.0 -5.0) (float-vector 180.0 170.0 25.0) (float-vector -160.0 170.0 25.0) (float-vector -160.0 170.0 -5.0)))
         (instance face :init :vertices (list (float-vector -160.0 170.0 -5.0) (float-vector -160.0 -170.0 -5.0) (float-vector 180.0 -170.0 -5.0) (float-vector 180.0 170.0 -5.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 210.0 45.0) (float-vector 180.0 210.0 45.0) (float-vector 180.0 -210.0 45.0) (float-vector 200.0 -210.0 45.0)))
         (instance face :init :vertices (list (float-vector 180.0 210.0 -25.0) (float-vector 200.0 210.0 -25.0) (float-vector 200.0 -210.0 -25.0) (float-vector 180.0 -210.0 -25.0)))
         (instance face :init :vertices (list (float-vector 200.0 210.0 45.0) (float-vector 200.0 210.0 -25.0) (float-vector 180.0 210.0 -25.0) (float-vector 180.0 210.0 45.0)))
         (instance face :init :vertices (list (float-vector 200.0 -210.0 45.0) (float-vector 200.0 -210.0 -25.0) (float-vector 200.0 210.0 -25.0) (float-vector 200.0 210.0 45.0)))
         (instance face :init :vertices (list (float-vector 180.0 -210.0 45.0) (float-vector 180.0 -210.0 -25.0) (float-vector 200.0 -210.0 -25.0) (float-vector 200.0 -210.0 45.0)))
         (instance face :init :vertices (list (float-vector 180.0 210.0 45.0) (float-vector 180.0 210.0 -25.0) (float-vector 180.0 -210.0 -25.0) (float-vector 180.0 -210.0 45.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :floralwhite)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset141683664 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset141685296
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -180.0 190.0 -130.0) (float-vector -180.0 -190.0 -130.0) (float-vector -180.0 -190.0 130.0) (float-vector -180.0 190.0 130.0)))
         (instance face :init :vertices (list (float-vector 180.0 -190.0 -130.0) (float-vector 180.0 -190.0 130.0) (float-vector -180.0 -190.0 130.0) (float-vector -180.0 -190.0 -130.0)))
         (instance face :init :vertices (list (float-vector 180.0 190.0 -130.0) (float-vector 180.0 190.0 130.0) (float-vector 180.0 170.0 130.0) (float-vector 180.0 170.0 -110.0) (float-vector 180.0 -170.0 -110.0) (float-vector 180.0 -170.0 130.0) (float-vector 180.0 -190.0 130.0) (float-vector 180.0 -190.0 -130.0)))
         (instance face :init :vertices (list (float-vector -180.0 190.0 130.0) (float-vector -180.0 -190.0 130.0) (float-vector 180.0 -190.0 130.0) (float-vector 180.0 -170.0 130.0) (float-vector -160.0 -170.0 130.0) (float-vector -160.0 170.0 130.0) (float-vector 180.0 170.0 130.0) (float-vector 180.0 190.0 130.0)))
         (instance face :init :vertices (list (float-vector 180.0 190.0 -130.0) (float-vector 180.0 -190.0 -130.0) (float-vector -180.0 -190.0 -130.0) (float-vector -180.0 190.0 -130.0)))
         (instance face :init :vertices (list (float-vector -180.0 190.0 -130.0) (float-vector -180.0 190.0 130.0) (float-vector 180.0 190.0 130.0) (float-vector 180.0 190.0 -130.0)))
         (instance face :init :vertices (list (float-vector -160.0 170.0 130.0) (float-vector -160.0 -170.0 130.0) (float-vector -160.0 -170.0 -110.0) (float-vector -160.0 170.0 -110.0)))
         (instance face :init :vertices (list (float-vector -160.0 -170.0 -110.0) (float-vector -160.0 -170.0 130.0) (float-vector 180.0 -170.0 130.0) (float-vector 180.0 -170.0 -110.0)))
         (instance face :init :vertices (list (float-vector 180.0 170.0 -110.0) (float-vector 180.0 170.0 130.0) (float-vector -160.0 170.0 130.0) (float-vector -160.0 170.0 -110.0)))
         (instance face :init :vertices (list (float-vector -160.0 170.0 -110.0) (float-vector -160.0 -170.0 -110.0) (float-vector 180.0 -170.0 -110.0) (float-vector 180.0 170.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 210.0 150.0) (float-vector 180.0 210.0 150.0) (float-vector 180.0 -210.0 150.0) (float-vector 200.0 -210.0 150.0)))
         (instance face :init :vertices (list (float-vector 180.0 210.0 -130.0) (float-vector 200.0 210.0 -130.0) (float-vector 200.0 -210.0 -130.0) (float-vector 180.0 -210.0 -130.0)))
         (instance face :init :vertices (list (float-vector 200.0 210.0 150.0) (float-vector 200.0 210.0 -130.0) (float-vector 180.0 210.0 -130.0) (float-vector 180.0 210.0 150.0)))
         (instance face :init :vertices (list (float-vector 200.0 -210.0 150.0) (float-vector 200.0 -210.0 -130.0) (float-vector 200.0 210.0 -130.0) (float-vector 200.0 210.0 150.0)))
         (instance face :init :vertices (list (float-vector 180.0 -210.0 150.0) (float-vector 180.0 -210.0 -130.0) (float-vector 200.0 -210.0 -130.0) (float-vector 200.0 -210.0 150.0)))
         (instance face :init :vertices (list (float-vector 180.0 210.0 150.0) (float-vector 180.0 210.0 -130.0) (float-vector 180.0 -210.0 -130.0) (float-vector 180.0 -210.0 150.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :floralwhite)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset141685296 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset141689256
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -180.0 190.0 -155.0) (float-vector -180.0 -190.0 -155.0) (float-vector -180.0 -190.0 155.0) (float-vector -180.0 190.0 155.0)))
         (instance face :init :vertices (list (float-vector 180.0 -190.0 -155.0) (float-vector 180.0 -190.0 155.0) (float-vector -180.0 -190.0 155.0) (float-vector -180.0 -190.0 -155.0)))
         (instance face :init :vertices (list (float-vector 180.0 190.0 -155.0) (float-vector 180.0 190.0 155.0) (float-vector 180.0 170.0 155.0) (float-vector 180.0 170.0 -135.0) (float-vector 180.0 -170.0 -135.0) (float-vector 180.0 -170.0 155.0) (float-vector 180.0 -190.0 155.0) (float-vector 180.0 -190.0 -155.0)))
         (instance face :init :vertices (list (float-vector -180.0 190.0 155.0) (float-vector -180.0 -190.0 155.0) (float-vector 180.0 -190.0 155.0) (float-vector 180.0 -170.0 155.0) (float-vector -160.0 -170.0 155.0) (float-vector -160.0 170.0 155.0) (float-vector 180.0 170.0 155.0) (float-vector 180.0 190.0 155.0)))
         (instance face :init :vertices (list (float-vector 180.0 190.0 -155.0) (float-vector 180.0 -190.0 -155.0) (float-vector -180.0 -190.0 -155.0) (float-vector -180.0 190.0 -155.0)))
         (instance face :init :vertices (list (float-vector -180.0 190.0 -155.0) (float-vector -180.0 190.0 155.0) (float-vector 180.0 190.0 155.0) (float-vector 180.0 190.0 -155.0)))
         (instance face :init :vertices (list (float-vector -160.0 170.0 155.0) (float-vector -160.0 -170.0 155.0) (float-vector -160.0 -170.0 -135.0) (float-vector -160.0 170.0 -135.0)))
         (instance face :init :vertices (list (float-vector -160.0 -170.0 -135.0) (float-vector -160.0 -170.0 155.0) (float-vector 180.0 -170.0 155.0) (float-vector 180.0 -170.0 -135.0)))
         (instance face :init :vertices (list (float-vector 180.0 170.0 -135.0) (float-vector 180.0 170.0 155.0) (float-vector -160.0 170.0 155.0) (float-vector -160.0 170.0 -135.0)))
         (instance face :init :vertices (list (float-vector -160.0 170.0 -135.0) (float-vector -160.0 -170.0 -135.0) (float-vector 180.0 -170.0 -135.0) (float-vector 180.0 170.0 -135.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 210.0 175.0) (float-vector 180.0 210.0 175.0) (float-vector 180.0 -210.0 175.0) (float-vector 200.0 -210.0 175.0)))
         (instance face :init :vertices (list (float-vector 180.0 210.0 -155.0) (float-vector 200.0 210.0 -155.0) (float-vector 200.0 -210.0 -155.0) (float-vector 180.0 -210.0 -155.0)))
         (instance face :init :vertices (list (float-vector 200.0 210.0 175.0) (float-vector 200.0 210.0 -155.0) (float-vector 180.0 210.0 -155.0) (float-vector 180.0 210.0 175.0)))
         (instance face :init :vertices (list (float-vector 200.0 -210.0 175.0) (float-vector 200.0 -210.0 -155.0) (float-vector 200.0 210.0 -155.0) (float-vector 200.0 210.0 175.0)))
         (instance face :init :vertices (list (float-vector 180.0 -210.0 175.0) (float-vector 180.0 -210.0 -155.0) (float-vector 200.0 -210.0 -155.0) (float-vector 200.0 -210.0 175.0)))
         (instance face :init :vertices (list (float-vector 180.0 210.0 175.0) (float-vector 180.0 210.0 -155.0) (float-vector 180.0 -210.0 -155.0) (float-vector 180.0 -210.0 175.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :floralwhite)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset141689256 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 150.0 0.0 155.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 150.0 0.0 460.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 150.0 0.0 635.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :bottom-drawer
     (setq joint0 (instance linear-joint :init
			     :parent-link blink0 :child-link blink1 :name :bottom-drawer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0))

     ;; definition of :middle-drawer
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :middle-drawer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0))

     ;; definition of :top-drawer
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :top-drawer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  400.0))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 4909.0 2579.0 0.0) :rot #2f((2.220446e-16 1.0 0.0) (-1.0 2.220446e-16 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send self :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3))
     (setq joint-list (list joint0 joint1 joint2))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:bottom-drawer (&rest args) (forward-message-to joint0 args))
  (:middle-drawer (&rest args) (forward-message-to joint1 args))
  (:top-drawer (&rest args) (forward-message-to joint2 args))
  (:handle () (list  handle0))
  (:handle-handle0 () handle0)
  (:attention () (list ))
  (:button () (list ))
  )

(defun room73b2-irt-mamoru (&rest args) (instance* room73b2-irt-mamoru-object :init args))
;; (format *error-output* "(instance room73b2-irt-mamoru-object :init) for generating model~%")
