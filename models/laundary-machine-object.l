;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass laundary-machine-object
  :super cascaded-link
  :slots (sensors))
(defmethod laundary-machine-object
  (:init
   (&rest args &key (name "laundary-machine") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
         joint0 joint1
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset175251572
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 619.486 527.5 916.25) (float-vector 621.16 540.0 913.349) (float-vector 619.486 552.5 916.25) (float-vector 614.91 561.651 924.175) (float-vector 608.66 565.0 935.0) (float-vector 602.41 561.651 945.825) (float-vector 597.835 552.5 953.75) (float-vector 596.16 540.0 956.651) (float-vector 597.835 527.5 953.75) (float-vector 602.41 518.349 945.825) (float-vector 608.66 515.0 935.0) (float-vector 614.91 518.349 924.175)))
         (instance face :init :vertices (list (float-vector 612.5 540.0 908.349) (float-vector 610.825 527.5 911.25) (float-vector 606.25 518.349 919.175) (float-vector 600.0 515.0 930.0) (float-vector 593.75 518.349 940.825) (float-vector 589.175 527.5 948.75) (float-vector 587.5 540.0 951.651) (float-vector 589.175 552.5 948.75) (float-vector 593.75 561.651 940.825) (float-vector 600.0 565.0 930.0) (float-vector 606.25 561.651 919.175) (float-vector 610.825 552.5 911.25)))
         (instance face :init :vertices (list (float-vector 619.486 527.5 916.25) (float-vector 610.825 527.5 911.25) (float-vector 612.5 540.0 908.349) (float-vector 621.16 540.0 913.349)))
         (instance face :init :vertices (list (float-vector 614.91 518.349 924.175) (float-vector 606.25 518.349 919.175) (float-vector 610.825 527.5 911.25) (float-vector 619.486 527.5 916.25)))
         (instance face :init :vertices (list (float-vector 608.66 515.0 935.0) (float-vector 600.0 515.0 930.0) (float-vector 606.25 518.349 919.175) (float-vector 614.91 518.349 924.175)))
         (instance face :init :vertices (list (float-vector 602.41 518.349 945.825) (float-vector 593.75 518.349 940.825) (float-vector 600.0 515.0 930.0) (float-vector 608.66 515.0 935.0)))
         (instance face :init :vertices (list (float-vector 597.835 527.5 953.75) (float-vector 589.175 527.5 948.75) (float-vector 593.75 518.349 940.825) (float-vector 602.41 518.349 945.825)))
         (instance face :init :vertices (list (float-vector 596.16 540.0 956.651) (float-vector 587.5 540.0 951.651) (float-vector 589.175 527.5 948.75) (float-vector 597.835 527.5 953.75)))
         (instance face :init :vertices (list (float-vector 597.835 552.5 953.75) (float-vector 589.175 552.5 948.75) (float-vector 587.5 540.0 951.651) (float-vector 596.16 540.0 956.651)))
         (instance face :init :vertices (list (float-vector 602.41 561.651 945.825) (float-vector 593.75 561.651 940.825) (float-vector 589.175 552.5 948.75) (float-vector 597.835 552.5 953.75)))
         (instance face :init :vertices (list (float-vector 608.66 565.0 935.0) (float-vector 600.0 565.0 930.0) (float-vector 593.75 561.651 940.825) (float-vector 602.41 561.651 945.825)))
         (instance face :init :vertices (list (float-vector 614.91 561.651 924.175) (float-vector 606.25 561.651 919.175) (float-vector 600.0 565.0 930.0) (float-vector 608.66 565.0 935.0)))
         (instance face :init :vertices (list (float-vector 619.486 552.5 916.25) (float-vector 610.825 552.5 911.25) (float-vector 606.25 561.651 919.175) (float-vector 614.91 561.651 924.175)))
         (instance face :init :vertices (list (float-vector 621.16 540.0 913.349) (float-vector 612.5 540.0 908.349) (float-vector 610.825 552.5 911.25) (float-vector 619.486 552.5 916.25)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 517.568 0.0 1094.55) (float-vector 547.064 0.0 1047.42) (float-vector 547.064 600.0 1047.42) (float-vector 517.568 600.0 1094.55)))
         (instance face :init :vertices (list (float-vector 574.402 0.0 997.785) (float-vector 574.402 600.0 997.785) (float-vector 547.064 600.0 1047.42) (float-vector 547.064 0.0 1047.42)))
         (instance face :init :vertices (list (float-vector 599.473 0.0 945.826) (float-vector 599.473 204.28 945.826) (float-vector 598.07 207.5 948.734) (float-vector 587.269 300.0 971.118) (float-vector 598.07 392.5 948.734) (float-vector 599.473 395.72 945.826) (float-vector 599.473 600.0 945.826) (float-vector 574.402 600.0 997.785) (float-vector 574.402 0.0 997.785)))
         (instance face :init :vertices (list (float-vector 622.178 600.0 891.753) (float-vector 599.473 600.0 945.826) (float-vector 599.473 395.72 945.826) (float-vector 622.178 453.901 891.753)))
         (instance face :init :vertices (list (float-vector 622.178 0.0 891.753) (float-vector 622.178 146.099 891.753) (float-vector 599.473 204.28 945.826) (float-vector 599.473 0.0 945.826)))
         (instance face :init :vertices (list (float-vector 642.427 600.0 835.779) (float-vector 622.178 600.0 891.753) (float-vector 622.178 453.901 891.753) (float-vector 624.359 460.215 885.722) (float-vector 642.427 474.224 835.779)))
         (instance face :init :vertices (list (float-vector 642.427 0.0 835.779) (float-vector 642.427 125.775 835.779) (float-vector 624.359 139.785 885.722) (float-vector 622.178 146.099 891.753) (float-vector 622.178 0.0 891.753)))
         (instance face :init :vertices (list (float-vector 660.141 600.0 778.124) (float-vector 642.427 600.0 835.779) (float-vector 642.427 474.224 835.779) (float-vector 654.544 485.0 796.34) (float-vector 660.141 480.023 778.124)))
         (instance face :init :vertices (list (float-vector 660.141 0.0 778.124) (float-vector 660.141 119.977 778.124) (float-vector 654.544 115.0 796.34) (float-vector 642.427 125.775 835.779) (float-vector 642.427 0.0 835.779)))
         (instance face :init :vertices (list (float-vector 675.25 600.0 719.017) (float-vector 660.141 600.0 778.124) (float-vector 660.141 480.023 778.124) (float-vector 675.25 464.283 719.017)))
         (instance face :init :vertices (list (float-vector 675.25 0.0 719.017) (float-vector 675.25 135.717 719.017) (float-vector 660.141 119.977 778.124) (float-vector 660.141 0.0 778.124)))
         (instance face :init :vertices (list (float-vector 687.694 600.0 658.69) (float-vector 675.25 600.0 719.017) (float-vector 675.25 464.283 719.017) (float-vector 678.482 460.215 703.35) (float-vector 687.694 416.932 658.69)))
         (instance face :init :vertices (list (float-vector 687.694 0.0 658.69) (float-vector 687.694 183.068 658.69) (float-vector 678.481 139.785 703.35) (float-vector 675.25 135.717 719.017) (float-vector 675.25 0.0 719.017)))
         (instance face :init :vertices (list (float-vector 697.424 0.0 597.381) (float-vector 697.424 600.0 597.381) (float-vector 687.694 600.0 658.69) (float-vector 687.694 416.932 658.69) (float-vector 691.795 392.5 632.846) (float-vector 695.956 300.0 606.629) (float-vector 691.795 207.5 632.846) (float-vector 687.694 183.068 658.69) (float-vector 687.694 0.0 658.69)))
         (instance face :init :vertices (list (float-vector 704.401 0.0 535.333) (float-vector 704.401 600.0 535.333) (float-vector 697.424 600.0 597.381) (float-vector 697.424 0.0 597.381)))
         (instance face :init :vertices (list (float-vector 708.599 0.0 472.79) (float-vector 708.599 600.0 472.79) (float-vector 704.401 600.0 535.333) (float-vector 704.401 0.0 535.333)))
         (instance face :init :vertices (list (float-vector 710.0 0.0 410.0) (float-vector 710.0 600.0 410.0) (float-vector 708.599 600.0 472.79) (float-vector 708.599 0.0 472.79)))
         (instance face :init :vertices (list (float-vector 710.0 0.0 0.0) (float-vector 710.0 600.0 0.0) (float-vector 710.0 600.0 410.0) (float-vector 710.0 0.0 410.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 0.0) (float-vector 0.0 600.0 0.0) (float-vector 710.0 600.0 0.0) (float-vector 710.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 1110.0) (float-vector 0.0 600.0 1110.0) (float-vector 0.0 600.0 0.0) (float-vector 0.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 517.568 600.0 1094.55) (float-vector 547.064 600.0 1047.42) (float-vector 574.402 600.0 997.785) (float-vector 599.473 600.0 945.826) (float-vector 622.178 600.0 891.753) (float-vector 642.427 600.0 835.779) (float-vector 660.141 600.0 778.124) (float-vector 675.25 600.0 719.017) (float-vector 687.694 600.0 658.69) (float-vector 697.424 600.0 597.381) (float-vector 704.401 600.0 535.333) (float-vector 708.599 600.0 472.79) (float-vector 710.0 600.0 410.0) (float-vector 710.0 600.0 0.0) (float-vector 0.0 600.0 0.0) (float-vector 0.0 600.0 1110.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 1110.0) (float-vector 0.0 0.0 0.0) (float-vector 710.0 0.0 0.0) (float-vector 710.0 0.0 410.0) (float-vector 708.599 0.0 472.79) (float-vector 704.401 0.0 535.333) (float-vector 697.424 0.0 597.381) (float-vector 687.694 0.0 658.69) (float-vector 675.25 0.0 719.017) (float-vector 660.141 0.0 778.124) (float-vector 642.427 0.0 835.779) (float-vector 622.178 0.0 891.753) (float-vector 599.473 0.0 945.826) (float-vector 574.402 0.0 997.785) (float-vector 547.064 0.0 1047.42) (float-vector 517.568 0.0 1094.55)))
         (instance face :init :vertices (list (float-vector 517.568 0.0 1094.55) (float-vector 517.568 600.0 1094.55) (float-vector 0.0 600.0 1110.0) (float-vector 0.0 0.0 1110.0)))
         (instance face :init :vertices (list (float-vector 695.956 300.0 606.629) (float-vector 691.795 392.5 632.846) (float-vector 585.107 392.5 571.25) (float-vector 597.5 300.0 549.785)))
         (instance face :init :vertices (list (float-vector 585.107 392.5 571.25) (float-vector 691.795 392.5 632.846) (float-vector 687.694 416.932 658.69) (float-vector 678.482 460.215 703.35) (float-vector 551.25 460.215 629.893)))
         (instance face :init :vertices (list (float-vector 551.25 460.215 629.893) (float-vector 678.482 460.215 703.35) (float-vector 675.25 464.283 719.017) (float-vector 660.141 480.023 778.124) (float-vector 654.544 485.0 796.34) (float-vector 505.0 485.0 710.0)))
         (instance face :init :vertices (list (float-vector 505.0 485.0 710.0) (float-vector 654.544 485.0 796.34) (float-vector 642.427 474.224 835.779) (float-vector 624.359 460.215 885.722) (float-vector 458.75 460.215 790.107)))
         (instance face :init :vertices (list (float-vector 458.75 460.215 790.107) (float-vector 624.359 460.215 885.722) (float-vector 622.178 453.901 891.753) (float-vector 599.473 395.72 945.826) (float-vector 598.07 392.5 948.734) (float-vector 424.893 392.5 848.75)))
         (instance face :init :vertices (list (float-vector 424.893 392.5 848.75) (float-vector 598.07 392.5 948.734) (float-vector 587.269 300.0 971.118) (float-vector 412.5 300.0 870.215)))
         (instance face :init :vertices (list (float-vector 412.5 300.0 870.215) (float-vector 587.269 300.0 971.118) (float-vector 598.07 207.5 948.734) (float-vector 424.892 207.5 848.75)))
         (instance face :init :vertices (list (float-vector 424.892 207.5 848.75) (float-vector 598.07 207.5 948.734) (float-vector 599.473 204.28 945.826) (float-vector 622.178 146.099 891.753) (float-vector 624.359 139.785 885.722) (float-vector 458.75 139.785 790.107)))
         (instance face :init :vertices (list (float-vector 458.75 139.785 790.107) (float-vector 624.359 139.785 885.722) (float-vector 642.427 125.775 835.779) (float-vector 654.544 115.0 796.34) (float-vector 505.0 115.0 710.0)))
         (instance face :init :vertices (list (float-vector 505.0 115.0 710.0) (float-vector 654.544 115.0 796.34) (float-vector 660.141 119.977 778.124) (float-vector 675.25 135.717 719.017) (float-vector 678.481 139.785 703.35) (float-vector 551.25 139.785 629.893)))
         (instance face :init :vertices (list (float-vector 551.25 139.785 629.893) (float-vector 678.481 139.785 703.35) (float-vector 687.694 183.068 658.69) (float-vector 691.795 207.5 632.846) (float-vector 585.107 207.5 571.25)))
         (instance face :init :vertices (list (float-vector 585.107 207.5 571.25) (float-vector 691.795 207.5 632.846) (float-vector 695.956 300.0 606.629) (float-vector 597.5 300.0 549.785)))
         (instance face :init :vertices (list (float-vector 597.5 300.0 549.785) (float-vector 585.107 392.5 571.25) (float-vector 551.25 460.215 629.893) (float-vector 505.0 485.0 710.0) (float-vector 458.75 460.215 790.107) (float-vector 424.893 392.5 848.75) (float-vector 412.5 300.0 870.215) (float-vector 424.892 207.5 848.75) (float-vector 458.75 139.785 790.107) (float-vector 505.0 115.0 710.0) (float-vector 551.25 139.785 629.893) (float-vector 585.107 207.5 571.25)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset175251572 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset175242368
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 151.554 122.5 30.0) (float-vector 175.0 210.0 30.0) (float-vector 151.554 297.5 30.0001) (float-vector 87.5001 361.554 30.0) (float-vector 6.103516e-05 385.0 30.0) (float-vector -87.4999 361.554 30.0001) (float-vector -151.554 297.5 30.0001) (float-vector -175.0 210.0 30.0001) (float-vector -151.555 122.5 30.0) (float-vector -87.5001 58.4456 30.0) (float-vector -0.000183 35.0 30.0001) (float-vector 87.4998 58.4454 30.0)))
         (instance face :init :vertices (list (float-vector 175.0 210.0 6.103516e-05) (float-vector 151.554 122.5 0.0) (float-vector 87.4999 58.4454 6.103516e-05) (float-vector -0.000183 35.0 6.103516e-05) (float-vector -87.5001 58.4456 6.103516e-05) (float-vector -151.555 122.5 6.103516e-05) (float-vector -175.0 210.0 0.0) (float-vector -151.554 297.5 0.0) (float-vector -87.4999 361.554 0.0) (float-vector 6.103516e-05 385.0 0.0) (float-vector 87.5001 361.554 6.103516e-05) (float-vector 151.555 297.5 0.0)))
         (instance face :init :vertices (list (float-vector 151.554 122.5 30.0) (float-vector 151.554 122.5 0.0) (float-vector 175.0 210.0 6.103516e-05) (float-vector 175.0 210.0 30.0)))
         (instance face :init :vertices (list (float-vector 87.4998 58.4454 30.0) (float-vector 87.4999 58.4454 6.103516e-05) (float-vector 151.554 122.5 0.0) (float-vector 151.554 122.5 30.0)))
         (instance face :init :vertices (list (float-vector -0.000183 35.0 30.0001) (float-vector -0.000183 35.0 6.103516e-05) (float-vector 87.4999 58.4454 6.103516e-05) (float-vector 87.4998 58.4454 30.0)))
         (instance face :init :vertices (list (float-vector -87.5001 58.4456 30.0) (float-vector -87.5001 58.4456 6.103516e-05) (float-vector -0.000183 35.0 6.103516e-05) (float-vector -0.000183 35.0 30.0001)))
         (instance face :init :vertices (list (float-vector -151.555 122.5 30.0) (float-vector -151.555 122.5 6.103516e-05) (float-vector -87.5001 58.4456 6.103516e-05) (float-vector -87.5001 58.4456 30.0)))
         (instance face :init :vertices (list (float-vector -175.0 210.0 30.0001) (float-vector -175.0 210.0 0.0) (float-vector -151.555 122.5 6.103516e-05) (float-vector -151.555 122.5 30.0)))
         (instance face :init :vertices (list (float-vector -151.554 297.5 30.0001) (float-vector -151.554 297.5 0.0) (float-vector -175.0 210.0 0.0) (float-vector -175.0 210.0 30.0001)))
         (instance face :init :vertices (list (float-vector -87.4999 361.554 30.0001) (float-vector -87.4999 361.554 0.0) (float-vector -151.554 297.5 0.0) (float-vector -151.554 297.5 30.0001)))
         (instance face :init :vertices (list (float-vector 6.103516e-05 385.0 30.0) (float-vector 6.103516e-05 385.0 0.0) (float-vector -87.4999 361.554 0.0) (float-vector -87.4999 361.554 30.0001)))
         (instance face :init :vertices (list (float-vector 87.5001 361.554 30.0) (float-vector 87.5001 361.554 6.103516e-05) (float-vector 6.103516e-05 385.0 0.0) (float-vector 6.103516e-05 385.0 30.0)))
         (instance face :init :vertices (list (float-vector 151.554 297.5 30.0001) (float-vector 151.555 297.5 0.0) (float-vector 87.5001 361.554 6.103516e-05) (float-vector 87.5001 361.554 30.0)))
         (instance face :init :vertices (list (float-vector 175.0 210.0 30.0) (float-vector 175.0 210.0 6.103516e-05) (float-vector 151.555 297.5 0.0) (float-vector 151.554 297.5 30.0001)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 215.0 210.0 0.0) (float-vector 186.195 317.5 6.103516e-05) (float-vector 186.195 317.5 30.0) (float-vector 215.0 210.0 30.0)))
         (instance face :init :vertices (list (float-vector 107.5 396.195 6.103516e-05) (float-vector 107.5 396.195 30.0001) (float-vector 186.195 317.5 30.0) (float-vector 186.195 317.5 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 6.103516e-05 425.0 0.0) (float-vector 6.103516e-05 425.0 30.0) (float-vector 107.5 396.195 30.0001) (float-vector 107.5 396.195 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -107.5 396.195 6.103516e-05) (float-vector -107.5 396.195 30.0) (float-vector 6.103516e-05 425.0 30.0) (float-vector 6.103516e-05 425.0 0.0)))
         (instance face :init :vertices (list (float-vector -186.195 317.5 6.103516e-05) (float-vector -186.195 317.5 30.0001) (float-vector -107.5 396.195 30.0) (float-vector -107.5 396.195 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -215.0 210.0 6.103516e-05) (float-vector -215.0 210.0 30.0) (float-vector -186.195 317.5 30.0001) (float-vector -186.195 317.5 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -186.196 102.5 0.0) (float-vector -186.196 102.5 30.0001) (float-vector -215.0 210.0 30.0) (float-vector -215.0 210.0 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -107.5 23.8046 0.0) (float-vector -107.5 23.8046 30.0) (float-vector -186.196 102.5 30.0001) (float-vector -186.196 102.5 0.0)))
         (instance face :init :vertices (list (float-vector -0.000183 -4.99998 6.103516e-05) (float-vector -0.000214 -4.99998 30.0) (float-vector -107.5 23.8046 30.0) (float-vector -107.5 23.8046 0.0)))
         (instance face :init :vertices (list (float-vector 107.5 23.8044 0.0) (float-vector 107.5 23.8044 30.0001) (float-vector -0.000214 -4.99998 30.0) (float-vector -0.000183 -4.99998 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 186.195 102.5 6.103516e-05) (float-vector 186.195 102.5 30.0) (float-vector 107.5 23.8044 30.0001) (float-vector 107.5 23.8044 0.0)))
         (instance face :init :vertices (list (float-vector 215.0 210.0 30.0) (float-vector 186.195 317.5 30.0) (float-vector 107.5 396.195 30.0001) (float-vector 6.103516e-05 425.0 30.0) (float-vector -107.5 396.195 30.0) (float-vector -186.195 317.5 30.0001) (float-vector -215.0 210.0 30.0) (float-vector -186.196 102.5 30.0001) (float-vector -107.5 23.8046 30.0) (float-vector -0.000214 -4.99998 30.0) (float-vector 107.5 23.8044 30.0001) (float-vector 186.195 102.5 30.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 151.554 122.5 30.0) (float-vector 87.4998 58.4454 30.0) (float-vector -0.000183 35.0 30.0001) (float-vector -87.5001 58.4456 30.0) (float-vector -151.555 122.5 30.0) (float-vector -175.0 210.0 30.0001) (float-vector -151.554 297.5 30.0001) (float-vector -87.4999 361.554 30.0001) (float-vector 6.103516e-05 385.0 30.0) (float-vector 87.5001 361.554 30.0) (float-vector 151.554 297.5 30.0001) (float-vector 175.0 210.0 30.0)))
))
         (instance face :init :vertices (list (float-vector 186.195 102.5 6.103516e-05) (float-vector 107.5 23.8044 0.0) (float-vector -0.000183 -4.99998 6.103516e-05) (float-vector -107.5 23.8046 0.0) (float-vector -186.196 102.5 0.0) (float-vector -215.0 210.0 6.103516e-05) (float-vector -186.195 317.5 6.103516e-05) (float-vector -107.5 396.195 6.103516e-05) (float-vector 6.103516e-05 425.0 0.0) (float-vector 107.5 396.195 6.103516e-05) (float-vector 186.195 317.5 6.103516e-05) (float-vector 215.0 210.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 175.0 210.0 6.103516e-05) (float-vector 151.555 297.5 0.0) (float-vector 87.5001 361.554 6.103516e-05) (float-vector 6.103516e-05 385.0 0.0) (float-vector -87.4999 361.554 0.0) (float-vector -151.554 297.5 0.0) (float-vector -175.0 210.0 0.0) (float-vector -151.555 122.5 6.103516e-05) (float-vector -87.5001 58.4456 6.103516e-05) (float-vector -0.000183 35.0 6.103516e-05) (float-vector 87.4999 58.4454 6.103516e-05) (float-vector 151.554 122.5 0.0)))
))
         (instance face :init :vertices (list (float-vector 215.0 210.0 0.0) (float-vector 215.0 210.0 30.0) (float-vector 186.195 102.5 30.0) (float-vector 186.195 102.5 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 175.0 210.0 30.0) (float-vector 151.554 297.5 30.0001) (float-vector 151.555 297.5 0.0) (float-vector 175.0 210.0 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 151.555 297.5 0.0) (float-vector 151.554 297.5 30.0001) (float-vector 87.5001 361.554 30.0) (float-vector 87.5001 361.554 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 87.5001 361.554 6.103516e-05) (float-vector 87.5001 361.554 30.0) (float-vector 6.103516e-05 385.0 30.0) (float-vector 6.103516e-05 385.0 0.0)))
         (instance face :init :vertices (list (float-vector 6.103516e-05 385.0 0.0) (float-vector 6.103516e-05 385.0 30.0) (float-vector -87.4999 361.554 30.0001) (float-vector -87.4999 361.554 0.0)))
         (instance face :init :vertices (list (float-vector -87.4999 361.554 0.0) (float-vector -87.4999 361.554 30.0001) (float-vector -151.554 297.5 30.0001) (float-vector -151.554 297.5 0.0)))
         (instance face :init :vertices (list (float-vector -151.554 297.5 0.0) (float-vector -151.554 297.5 30.0001) (float-vector -175.0 210.0 30.0001) (float-vector -175.0 210.0 0.0)))
         (instance face :init :vertices (list (float-vector -175.0 210.0 0.0) (float-vector -175.0 210.0 30.0001) (float-vector -151.555 122.5 30.0) (float-vector -151.555 122.5 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -151.555 122.5 6.103516e-05) (float-vector -151.555 122.5 30.0) (float-vector -87.5001 58.4456 30.0) (float-vector -87.5001 58.4456 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -87.5001 58.4456 6.103516e-05) (float-vector -87.5001 58.4456 30.0) (float-vector -0.000183 35.0 30.0001) (float-vector -0.000183 35.0 6.103516e-05)))
         (instance face :init :vertices (list (float-vector -0.000183 35.0 6.103516e-05) (float-vector -0.000183 35.0 30.0001) (float-vector 87.4998 58.4454 30.0) (float-vector 87.4999 58.4454 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 87.4999 58.4454 6.103516e-05) (float-vector 87.4998 58.4454 30.0) (float-vector 151.554 122.5 30.0) (float-vector 151.554 122.5 0.0)))
         (instance face :init :vertices (list (float-vector 151.554 122.5 0.0) (float-vector 151.554 122.5 30.0) (float-vector 175.0 210.0 30.0) (float-vector 175.0 210.0 6.103516e-05)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray80)
     (gl::transparent (elt bc 0) 0.5)
     (send (elt bc 1) :set-color :gray60)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset175242368 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 640.0 90.0 770.0) :rot #2f((0.34202 0.0 0.939693) (0.0 1.0 0.0) (-0.939693 0.0 0.34202))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :joint204418280
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :joint204418280 :axis :x 
			     :min    0.0 :max  180.0))

     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun laundary-machine (&rest args) (instance* laundary-machine-object :init args))
;; (format *error-output* "(instance laundary-machine-object :init) for generating model~%")
