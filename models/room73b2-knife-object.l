;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass room73b2-knife-object
  :super cascaded-link
  :slots (sensors))
(defmethod room73b2-knife-object
  (:init
   (&rest args &key (name "room73b2-knife") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
         joint0
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset180305216
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 60.0 5.0 12.5) (float-vector -60.0 5.0 12.5) (float-vector -60.0 -5.0 12.5) (float-vector 60.0 -5.0 12.5)))
         (instance face :init :vertices (list (float-vector -60.0001 5.00006 -12.5) (float-vector 60.0 5.00006 -12.5) (float-vector 60.0 -4.99994 -12.5) (float-vector -60.0001 -4.99994 -12.5)))
         (instance face :init :vertices (list (float-vector 60.0 5.0 12.5) (float-vector 60.0 5.00006 -12.5) (float-vector -60.0001 5.00006 -12.5) (float-vector -60.0 5.0 12.5)))
         (instance face :init :vertices (list (float-vector 60.0 -5.0 12.5) (float-vector 60.0 -4.99994 -12.5) (float-vector 60.0 5.00006 -12.5) (float-vector 60.0 5.0 12.5)))
         (instance face :init :vertices (list (float-vector -60.0 -5.0 12.5) (float-vector -60.0001 -4.99994 -12.5) (float-vector 60.0 -4.99994 -12.5) (float-vector 60.0 -5.0 12.5)))
         (instance face :init :vertices (list (float-vector -60.0 5.0 12.5) (float-vector -60.0001 5.00006 -12.5) (float-vector -60.0001 -4.99994 -12.5) (float-vector -60.0 -5.0 12.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 60.0 1.0 12.5) (float-vector 60.0 1.00006 -32.5) (float-vector 230.0 1.00006 -12.5) (float-vector 180.0 1.0 12.4998)))
         (instance face :init :vertices (list (float-vector 60.0 -0.999939 -32.5) (float-vector 60.0 -1.0 12.5) (float-vector 180.0 -1.0 12.4998) (float-vector 230.0 -0.999939 -12.5)))
         (instance face :init :vertices (list (float-vector 60.0 1.0 12.5) (float-vector 60.0 -1.0 12.5) (float-vector 60.0 -0.999939 -32.5) (float-vector 60.0 1.00006 -32.5)))
         (instance face :init :vertices (list (float-vector 180.0 1.0 12.4998) (float-vector 180.0 -1.0 12.4998) (float-vector 60.0 -1.0 12.5) (float-vector 60.0 1.0 12.5)))
         (instance face :init :vertices (list (float-vector 230.0 1.00006 -12.5) (float-vector 230.0 -0.999939 -12.5) (float-vector 180.0 -1.0 12.4998) (float-vector 180.0 1.0 12.4998)))
         (instance face :init :vertices (list (float-vector 60.0 1.00006 -32.5) (float-vector 60.0 -0.999939 -32.5) (float-vector 230.0 -0.999939 -12.5) (float-vector 230.0 1.00006 -12.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :blue)
     (send (elt bc 1) :set-color :yellow)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset180305216 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun room73b2-knife (&rest args) (instance* room73b2-knife-object :init args))
;; (format *error-output* "(instance room73b2-knife-object :init) for generating model~%")
