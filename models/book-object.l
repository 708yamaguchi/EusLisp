;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r478M 647M 47109:47930) for Linux64 created on k-okada-t410s(Fri May 27 16:12:08 JST 2011)
;;
;;
(defclass book-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod book-object
  (:init
   (&rest args &key (name "book") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 handle0 handle1 handle2 handle3
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset127363952
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 0.0 210.0) (float-vector 0.0 -9.0 210.0) (float-vector 2.0 -10.0 210.0) (float-vector 150.0 -10.0 210.0) (float-vector 150.0 -9.0 210.0) (float-vector 2.0 -9.0 210.0) (float-vector 2.0 9.0 210.0) (float-vector 150.0 9.0 210.0) (float-vector 150.0 10.0 210.0) (float-vector 5.0 10.0 210.0) (float-vector 0.0 9.0 210.0)))
         (instance face :init :vertices (list (float-vector 0.0 -9.0 0.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 9.0 0.0) (float-vector 5.0 10.0 0.0) (float-vector 150.0 10.0 0.0) (float-vector 150.0 9.0 0.0) (float-vector 2.0 9.0 0.0) (float-vector 2.0 -9.0 0.0) (float-vector 150.0 -9.0 0.0) (float-vector 150.0 -10.0 0.0) (float-vector 2.0 -10.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 210.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 -9.0 0.0) (float-vector 0.0 -9.0 210.0)))
         (instance face :init :vertices (list (float-vector 0.0 9.0 210.0) (float-vector 0.0 9.0 0.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 0.0 210.0)))
         (instance face :init :vertices (list (float-vector 5.0 10.0 210.0) (float-vector 5.0 10.0 0.0) (float-vector 0.0 9.0 0.0) (float-vector 0.0 9.0 210.0)))
         (instance face :init :vertices (list (float-vector 150.0 10.0 210.0) (float-vector 150.0 10.0 0.0) (float-vector 5.0 10.0 0.0) (float-vector 5.0 10.0 210.0)))
         (instance face :init :vertices (list (float-vector 150.0 9.0 210.0) (float-vector 150.0 9.0 0.0) (float-vector 150.0 10.0 0.0) (float-vector 150.0 10.0 210.0)))
         (instance face :init :vertices (list (float-vector 2.0 9.0 210.0) (float-vector 2.0 9.0 0.0) (float-vector 150.0 9.0 0.0) (float-vector 150.0 9.0 210.0)))
         (instance face :init :vertices (list (float-vector 2.0 -9.0 210.0) (float-vector 2.0 -9.0 0.0) (float-vector 2.0 9.0 0.0) (float-vector 2.0 9.0 210.0)))
         (instance face :init :vertices (list (float-vector 150.0 -9.0 210.0) (float-vector 150.0 -9.0 0.0) (float-vector 2.0 -9.0 0.0) (float-vector 2.0 -9.0 210.0)))
         (instance face :init :vertices (list (float-vector 150.0 -10.0 210.0) (float-vector 150.0 -10.0 0.0) (float-vector 150.0 -9.0 0.0) (float-vector 150.0 -9.0 210.0)))
         (instance face :init :vertices (list (float-vector 2.0 -10.0 210.0) (float-vector 2.0 -10.0 0.0) (float-vector 150.0 -10.0 0.0) (float-vector 150.0 -10.0 210.0)))
         (instance face :init :vertices (list (float-vector 0.0 -9.0 210.0) (float-vector 0.0 -9.0 0.0) (float-vector 2.0 -10.0 0.0) (float-vector 2.0 -10.0 210.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 148.0 8.0 208.0) (float-vector 2.0 8.0 208.0) (float-vector 2.0 -8.0 208.0) (float-vector 148.0 -8.0 208.0)))
         (instance face :init :vertices (list (float-vector 2.0 8.0 2.0) (float-vector 148.0 8.0 2.0) (float-vector 148.0 -8.0 2.0) (float-vector 2.0 -8.0 2.0)))
         (instance face :init :vertices (list (float-vector 148.0 8.0 208.0) (float-vector 148.0 8.0 2.0) (float-vector 2.0 8.0 2.0) (float-vector 2.0 8.0 208.0)))
         (instance face :init :vertices (list (float-vector 148.0 -8.0 208.0) (float-vector 148.0 -8.0 2.0) (float-vector 148.0 8.0 2.0) (float-vector 148.0 8.0 208.0)))
         (instance face :init :vertices (list (float-vector 2.0 -8.0 208.0) (float-vector 2.0 -8.0 2.0) (float-vector 148.0 -8.0 2.0) (float-vector 148.0 -8.0 208.0)))
         (instance face :init :vertices (list (float-vector 2.0 8.0 208.0) (float-vector 2.0 8.0 2.0) (float-vector 2.0 -8.0 2.0) (float-vector 2.0 -8.0 208.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :blue)
     (send (elt bc 1) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset127363952 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 75.0 0.0 210.0) :rot #2f((2.220446e-16 0.0 1.0) (0.0 1.0 0.0) (-1.0 0.0 2.220446e-16)) :name "handle0"))
     (send self :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 75.0 0.0 0.0) :rot #2f((2.220446e-16 0.0 -1.0) (0.0 1.0 0.0) (1.0 0.0 2.220446e-16)) :name "handle1"))
     (send self :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 150.0 0.0 105.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle2"))
     (send self :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 0.0 0.0 105.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle3"))
     (send self :assoc handle3)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:handle () (list  handle0 handle1 handle2 handle3))
  (:handle-handle0 () handle0)
  (:handle-handle1 () handle1)
  (:handle-handle2 () handle2)
  (:handle-handle3 () handle3)
  (:attention () (list ))
  (:button () (list ))
  )

(defun book (&rest args) (instance* book-object :init args))
;; (format *error-output* "(instance book-object :init) for generating model~%")
