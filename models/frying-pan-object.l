;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass frying-pan-object
  :super cascaded-link
  :slots (sensors))
(defmethod frying-pan-object
  (:init
   (&rest args &key (name "frying-pan") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
         joint0
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset158591208
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 105.0 0.0 -25.0) (float-vector 101.422 27.176 -25.0) (float-vector 101.422 27.176 25.0) (float-vector 105.0 0.0 25.0)))
         (instance face :init :vertices (list (float-vector 90.9326 52.5 -25.0) (float-vector 90.9326 52.5 25.0) (float-vector 101.422 27.176 25.0) (float-vector 101.422 27.176 -25.0)))
         (instance face :init :vertices (list (float-vector 74.2462 74.2462 -25.0) (float-vector 74.2462 74.2462 25.0) (float-vector 90.9326 52.5 25.0) (float-vector 90.9326 52.5 -25.0)))
         (instance face :init :vertices (list (float-vector 52.5 90.9326 -25.0) (float-vector 52.5 90.9326 25.0) (float-vector 74.2462 74.2462 25.0) (float-vector 74.2462 74.2462 -25.0)))
         (instance face :init :vertices (list (float-vector 27.176 101.422 -25.0) (float-vector 27.176 101.422 25.0) (float-vector 52.5 90.9326 25.0) (float-vector 52.5 90.9326 -25.0)))
         (instance face :init :vertices (list (float-vector 3.436737e-05 105.0 -25.0) (float-vector 3.436737e-05 105.0 25.0) (float-vector 27.176 101.422 25.0) (float-vector 27.176 101.422 -25.0)))
         (instance face :init :vertices (list (float-vector -27.176 101.422 -25.0) (float-vector -27.176 101.422 25.0) (float-vector 3.436737e-05 105.0 25.0) (float-vector 3.436737e-05 105.0 -25.0)))
         (instance face :init :vertices (list (float-vector -52.5 90.9327 -25.0) (float-vector -52.5 90.9327 25.0) (float-vector -27.176 101.422 25.0) (float-vector -27.176 101.422 -25.0)))
         (instance face :init :vertices (list (float-vector -74.2462 74.2462 -25.0) (float-vector -74.2462 74.2462 25.0) (float-vector -52.5 90.9327 25.0) (float-vector -52.5 90.9327 -25.0)))
         (instance face :init :vertices (list (float-vector -90.9326 52.5 -25.0) (float-vector -90.9326 52.5 25.0) (float-vector -74.2462 74.2462 25.0) (float-vector -74.2462 74.2462 -25.0)))
         (instance face :init :vertices (list (float-vector -101.422 27.1761 -25.0) (float-vector -101.422 27.1761 25.0) (float-vector -90.9326 52.5 25.0) (float-vector -90.9326 52.5 -25.0)))
         (instance face :init :vertices (list (float-vector -105.0 7.147907e-05 -25.0) (float-vector -105.0 7.147907e-05 25.0) (float-vector -101.422 27.1761 25.0) (float-vector -101.422 27.1761 -25.0)))
         (instance face :init :vertices (list (float-vector -101.422 -27.1759 -25.0) (float-vector -101.422 -27.1759 25.0) (float-vector -105.0 7.147907e-05 25.0) (float-vector -105.0 7.147907e-05 -25.0)))
         (instance face :init :vertices (list (float-vector -90.9327 -52.4999 -25.0) (float-vector -90.9327 -52.4999 25.0) (float-vector -101.422 -27.1759 25.0) (float-vector -101.422 -27.1759 -25.0)))
         (instance face :init :vertices (list (float-vector -74.2462 -74.2461 -25.0) (float-vector -74.2462 -74.2461 25.0) (float-vector -90.9327 -52.4999 25.0) (float-vector -90.9327 -52.4999 -25.0)))
         (instance face :init :vertices (list (float-vector -52.5001 -90.9326 -25.0) (float-vector -52.5001 -90.9326 25.0) (float-vector -74.2462 -74.2461 25.0) (float-vector -74.2462 -74.2461 -25.0)))
         (instance face :init :vertices (list (float-vector -27.1761 -101.422 -25.0) (float-vector -27.1761 -101.422 25.0) (float-vector -52.5001 -90.9326 25.0) (float-vector -52.5001 -90.9326 -25.0)))
         (instance face :init :vertices (list (float-vector -0.000103 -105.0 -25.0) (float-vector -0.000103 -105.0 25.0) (float-vector -27.1761 -101.422 25.0) (float-vector -27.1761 -101.422 -25.0)))
         (instance face :init :vertices (list (float-vector 27.1759 -101.422 -25.0) (float-vector 27.1759 -101.422 25.0) (float-vector -0.000103 -105.0 25.0) (float-vector -0.000103 -105.0 -25.0)))
         (instance face :init :vertices (list (float-vector 52.4999 -90.9327 -25.0) (float-vector 52.4999 -90.9327 25.0) (float-vector 27.1759 -101.422 25.0) (float-vector 27.1759 -101.422 -25.0)))
         (instance face :init :vertices (list (float-vector 74.2461 -74.2463 -25.0) (float-vector 74.2461 -74.2463 25.0) (float-vector 52.4999 -90.9327 25.0) (float-vector 52.4999 -90.9327 -25.0)))
         (instance face :init :vertices (list (float-vector 90.9326 -52.5001 -25.0) (float-vector 90.9326 -52.5001 25.0) (float-vector 74.2461 -74.2463 25.0) (float-vector 74.2461 -74.2463 -25.0)))
         (instance face :init :vertices (list (float-vector 101.422 -27.1761 -25.0) (float-vector 101.422 -27.1761 25.0) (float-vector 90.9326 -52.5001 25.0) (float-vector 90.9326 -52.5001 -25.0)))
         (instance face :init :vertices (list (float-vector 105.0 0.0 25.0) (float-vector 101.422 27.176 25.0) (float-vector 90.9326 52.5 25.0) (float-vector 74.2462 74.2462 25.0) (float-vector 52.5 90.9326 25.0) (float-vector 27.176 101.422 25.0) (float-vector 3.436737e-05 105.0 25.0) (float-vector -27.176 101.422 25.0) (float-vector -52.5 90.9327 25.0) (float-vector -74.2462 74.2462 25.0) (float-vector -90.9326 52.5 25.0) (float-vector -101.422 27.1761 25.0) (float-vector -105.0 7.147907e-05 25.0) (float-vector -101.422 -27.1759 25.0) (float-vector -90.9327 -52.4999 25.0) (float-vector -74.2462 -74.2461 25.0) (float-vector -52.5001 -90.9326 25.0) (float-vector -27.1761 -101.422 25.0) (float-vector -0.000103 -105.0 25.0) (float-vector 27.1759 -101.422 25.0) (float-vector 52.4999 -90.9327 25.0) (float-vector 74.2461 -74.2463 25.0) (float-vector 90.9326 -52.5001 25.0) (float-vector 101.422 -27.1761 25.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 85.7365 -49.5001 25.0) (float-vector 49.4999 -85.7365 25.0) (float-vector -9.077007e-05 -99.0 25.0) (float-vector -49.5001 -85.7365 25.0) (float-vector -85.7365 -49.4999 25.0) (float-vector -99.0 6.001530e-05 25.0) (float-vector -85.7365 49.5 25.0) (float-vector -49.5 85.7365 25.0) (float-vector 2.926053e-05 99.0 25.0) (float-vector 49.5 85.7365 25.0) (float-vector 85.7365 49.5 25.0) (float-vector 99.0 0.0 25.0)))
))
         (instance face :init :vertices (list (float-vector 101.422 -27.1761 -25.0) (float-vector 90.9326 -52.5001 -25.0) (float-vector 74.2461 -74.2463 -25.0) (float-vector 52.4999 -90.9327 -25.0) (float-vector 27.1759 -101.422 -25.0) (float-vector -0.000103 -105.0 -25.0) (float-vector -27.1761 -101.422 -25.0) (float-vector -52.5001 -90.9326 -25.0) (float-vector -74.2462 -74.2461 -25.0) (float-vector -90.9327 -52.4999 -25.0) (float-vector -101.422 -27.1759 -25.0) (float-vector -105.0 7.147907e-05 -25.0) (float-vector -101.422 27.1761 -25.0) (float-vector -90.9326 52.5 -25.0) (float-vector -74.2462 74.2462 -25.0) (float-vector -52.5 90.9327 -25.0) (float-vector -27.176 101.422 -25.0) (float-vector 3.436737e-05 105.0 -25.0) (float-vector 27.176 101.422 -25.0) (float-vector 52.5 90.9326 -25.0) (float-vector 74.2462 74.2462 -25.0) (float-vector 90.9326 52.5 -25.0) (float-vector 101.422 27.176 -25.0) (float-vector 105.0 0.0 -25.0)))
         (instance face :init :vertices (list (float-vector 105.0 0.0 -25.0) (float-vector 105.0 0.0 25.0) (float-vector 101.422 -27.1761 25.0) (float-vector 101.422 -27.1761 -25.0)))
         (instance face :init :vertices (list (float-vector 99.0 0.0 25.0) (float-vector 85.7365 49.5 25.0) (float-vector 85.7365 49.5 -19.0) (float-vector 99.0 0.0 -19.0)))
         (instance face :init :vertices (list (float-vector 85.7365 49.5 -19.0) (float-vector 85.7365 49.5 25.0) (float-vector 49.5 85.7365 25.0) (float-vector 49.5 85.7365 -19.0)))
         (instance face :init :vertices (list (float-vector 49.5 85.7365 -19.0) (float-vector 49.5 85.7365 25.0) (float-vector 2.926053e-05 99.0 25.0) (float-vector 2.926053e-05 99.0 -19.0)))
         (instance face :init :vertices (list (float-vector 2.926053e-05 99.0 -19.0) (float-vector 2.926053e-05 99.0 25.0) (float-vector -49.5 85.7365 25.0) (float-vector -49.5 85.7365 -19.0)))
         (instance face :init :vertices (list (float-vector -49.5 85.7365 -19.0) (float-vector -49.5 85.7365 25.0) (float-vector -85.7365 49.5 25.0) (float-vector -85.7365 49.5 -19.0)))
         (instance face :init :vertices (list (float-vector -85.7365 49.5 -19.0) (float-vector -85.7365 49.5 25.0) (float-vector -99.0 6.001530e-05 25.0) (float-vector -99.0 6.001530e-05 -19.0)))
         (instance face :init :vertices (list (float-vector -99.0 6.001530e-05 -19.0) (float-vector -99.0 6.001530e-05 25.0) (float-vector -85.7365 -49.4999 25.0) (float-vector -85.7365 -49.4999 -19.0)))
         (instance face :init :vertices (list (float-vector -85.7365 -49.4999 -19.0) (float-vector -85.7365 -49.4999 25.0) (float-vector -49.5001 -85.7365 25.0) (float-vector -49.5001 -85.7365 -19.0)))
         (instance face :init :vertices (list (float-vector -49.5001 -85.7365 -19.0) (float-vector -49.5001 -85.7365 25.0) (float-vector -9.077007e-05 -99.0 25.0) (float-vector -9.077007e-05 -99.0 -19.0)))
         (instance face :init :vertices (list (float-vector -9.077007e-05 -99.0 -19.0) (float-vector -9.077007e-05 -99.0 25.0) (float-vector 49.4999 -85.7365 25.0) (float-vector 49.4999 -85.7365 -19.0)))
         (instance face :init :vertices (list (float-vector 49.4999 -85.7365 -19.0) (float-vector 49.4999 -85.7365 25.0) (float-vector 85.7365 -49.5001 25.0) (float-vector 85.7365 -49.5001 -19.0)))
         (instance face :init :vertices (list (float-vector 85.7365 -49.5001 -19.0) (float-vector 85.7365 -49.5001 25.0) (float-vector 99.0 0.0 25.0) (float-vector 99.0 0.0 -19.0)))
         (instance face :init :vertices (list (float-vector 99.0 0.0 -19.0) (float-vector 85.7365 49.5 -19.0) (float-vector 49.5 85.7365 -19.0) (float-vector 2.926053e-05 99.0 -19.0) (float-vector -49.5 85.7365 -19.0) (float-vector -85.7365 49.5 -19.0) (float-vector -99.0 6.001530e-05 -19.0) (float-vector -85.7365 -49.4999 -19.0) (float-vector -49.5001 -85.7365 -19.0) (float-vector -9.077007e-05 -99.0 -19.0) (float-vector 49.4999 -85.7365 -19.0) (float-vector 85.7365 -49.5001 -19.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -104.073 15.0 31.2273) (float-vector -303.312 15.0 48.6585) (float-vector -303.312 -15.0 48.6585) (float-vector -104.073 -15.0 31.2273)))
         (instance face :init :vertices (list (float-vector -305.927 15.0 18.7726) (float-vector -106.688 15.0 1.34151) (float-vector -106.688 -15.0 1.34151) (float-vector -305.927 -15.0 18.7726)))
         (instance face :init :vertices (list (float-vector -104.073 15.0 31.2273) (float-vector -106.688 15.0 1.34151) (float-vector -305.927 15.0 18.7726) (float-vector -303.312 15.0 48.6585)))
         (instance face :init :vertices (list (float-vector -104.073 -15.0 31.2273) (float-vector -106.688 -15.0 1.34151) (float-vector -106.688 15.0 1.34151) (float-vector -104.073 15.0 31.2273)))
         (instance face :init :vertices (list (float-vector -303.312 -15.0 48.6585) (float-vector -305.927 -15.0 18.7726) (float-vector -106.688 -15.0 1.34151) (float-vector -104.073 -15.0 31.2273)))
         (instance face :init :vertices (list (float-vector -303.312 15.0 48.6585) (float-vector -305.927 15.0 18.7726) (float-vector -305.927 -15.0 18.7726) (float-vector -303.312 -15.0 48.6585)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray40)
     (send (elt bc 1) :set-color :black)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset158591208 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun frying-pan (&rest args) (instance* frying-pan-object :init args))
;; (format *error-output* "(instance frying-pan-object :init) for generating model~%")
