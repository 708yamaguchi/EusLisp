;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room602-laundary-machine-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2
         button0
         joint0 joint1 ))
(defmethod room602-laundary-machine-object
  (:init
   (&rest args &key (name "room602-laundary-machine") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of 'b0
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 517.568 4.547474e-13 1094.55) (float-vector 547.064 4.547474e-13 1047.42) (float-vector 547.064 600.0 1047.42) (float-vector 517.568 600.0 1094.55)))
         (instance face :init :vertices (list (float-vector 574.402 0.0 997.785) (float-vector 574.402 600.0 997.785) (float-vector 547.064 600.0 1047.42) (float-vector 547.064 4.547474e-13 1047.42)))
         (instance face :init :vertices (list (float-vector 599.473 0.0 945.827) (float-vector 599.473 204.281 945.827) (float-vector 598.07 207.5 948.734) (float-vector 587.269 300.0 971.118) (float-vector 598.07 392.5 948.734) (float-vector 599.473 395.719 945.827) (float-vector 599.473 600.0 945.827) (float-vector 574.402 600.0 997.785) (float-vector 574.402 0.0 997.785)))
         (instance face :init :vertices (list (float-vector 622.178 600.0 891.754) (float-vector 599.473 600.0 945.827) (float-vector 599.473 395.719 945.827) (float-vector 622.178 453.9 891.754)))
         (instance face :init :vertices (list (float-vector 622.178 4.547474e-13 891.754) (float-vector 622.178 146.1 891.754) (float-vector 599.473 204.281 945.827) (float-vector 599.473 0.0 945.827)))
         (instance face :init :vertices (list (float-vector 642.427 600.0 835.779) (float-vector 622.178 600.0 891.754) (float-vector 622.178 453.9 891.754) (float-vector 624.36 460.215 885.722) (float-vector 642.427 474.225 835.779)))
         (instance face :init :vertices (list (float-vector 642.427 0.0 835.779) (float-vector 642.427 125.775 835.779) (float-vector 624.36 139.785 885.722) (float-vector 622.178 146.1 891.754) (float-vector 622.178 4.547474e-13 891.754)))
         (instance face :init :vertices (list (float-vector 660.141 600.0 778.125) (float-vector 642.427 600.0 835.779) (float-vector 642.427 474.225 835.779) (float-vector 654.545 485.0 796.34) (float-vector 660.141 480.023 778.125)))
         (instance face :init :vertices (list (float-vector 660.141 0.0 778.125) (float-vector 660.141 119.977 778.125) (float-vector 654.545 115.0 796.34) (float-vector 642.427 125.775 835.779) (float-vector 642.427 0.0 835.779)))
         (instance face :init :vertices (list (float-vector 675.25 600.0 719.017) (float-vector 660.141 600.0 778.125) (float-vector 660.141 480.023 778.125) (float-vector 675.25 464.283 719.017)))
         (instance face :init :vertices (list (float-vector 675.25 0.0 719.017) (float-vector 675.25 135.717 719.017) (float-vector 660.141 119.977 778.125) (float-vector 660.141 0.0 778.125)))
         (instance face :init :vertices (list (float-vector 687.694 600.0 658.69) (float-vector 675.25 600.0 719.017) (float-vector 675.25 464.283 719.017) (float-vector 678.482 460.215 703.35) (float-vector 687.694 416.932 658.69)))
         (instance face :init :vertices (list (float-vector 687.694 4.547474e-13 658.69) (float-vector 687.694 183.068 658.69) (float-vector 678.482 139.785 703.35) (float-vector 675.25 135.717 719.017) (float-vector 675.25 0.0 719.017)))
         (instance face :init :vertices (list (float-vector 697.424 0.0 597.381) (float-vector 697.424 600.0 597.381) (float-vector 687.694 600.0 658.69) (float-vector 687.694 416.932 658.69) (float-vector 691.795 392.5 632.846) (float-vector 695.956 300.0 606.629) (float-vector 691.795 207.5 632.846) (float-vector 687.694 183.068 658.69) (float-vector 687.694 4.547474e-13 658.69)))
         (instance face :init :vertices (list (float-vector 704.401 0.0 535.333) (float-vector 704.401 600.0 535.333) (float-vector 697.424 600.0 597.381) (float-vector 697.424 0.0 597.381)))
         (instance face :init :vertices (list (float-vector 708.599 0.0 472.791) (float-vector 708.599 600.0 472.791) (float-vector 704.401 600.0 535.333) (float-vector 704.401 0.0 535.333)))
         (instance face :init :vertices (list (float-vector 710.0 0.0 410.0) (float-vector 710.0 600.0 410.0) (float-vector 708.599 600.0 472.791) (float-vector 708.599 0.0 472.791)))
         (instance face :init :vertices (list (float-vector 710.0 0.0 0.0) (float-vector 710.0 600.0 0.0) (float-vector 710.0 600.0 410.0) (float-vector 710.0 0.0 410.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 0.0) (float-vector 1.136868e-13 600.0 0.0) (float-vector 710.0 600.0 0.0) (float-vector 710.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 1110.0) (float-vector 1.136868e-13 600.0 1110.0) (float-vector 1.136868e-13 600.0 0.0) (float-vector 0.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 517.568 600.0 1094.55) (float-vector 547.064 600.0 1047.42) (float-vector 574.402 600.0 997.785) (float-vector 599.473 600.0 945.827) (float-vector 622.178 600.0 891.754) (float-vector 642.427 600.0 835.779) (float-vector 660.141 600.0 778.125) (float-vector 675.25 600.0 719.017) (float-vector 687.694 600.0 658.69) (float-vector 697.424 600.0 597.381) (float-vector 704.401 600.0 535.333) (float-vector 708.599 600.0 472.791) (float-vector 710.0 600.0 410.0) (float-vector 710.0 600.0 0.0) (float-vector 1.136868e-13 600.0 0.0) (float-vector 1.136868e-13 600.0 1110.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 1110.0) (float-vector 0.0 0.0 0.0) (float-vector 710.0 0.0 0.0) (float-vector 710.0 0.0 410.0) (float-vector 708.599 0.0 472.791) (float-vector 704.401 0.0 535.333) (float-vector 697.424 0.0 597.381) (float-vector 687.694 4.547474e-13 658.69) (float-vector 675.25 0.0 719.017) (float-vector 660.141 0.0 778.125) (float-vector 642.427 0.0 835.779) (float-vector 622.178 4.547474e-13 891.754) (float-vector 599.473 0.0 945.827) (float-vector 574.402 0.0 997.785) (float-vector 547.064 4.547474e-13 1047.42) (float-vector 517.568 4.547474e-13 1094.55)))
         (instance face :init :vertices (list (float-vector 517.568 4.547474e-13 1094.55) (float-vector 517.568 600.0 1094.55) (float-vector 1.136868e-13 600.0 1110.0) (float-vector 0.0 0.0 1110.0)))
         (instance face :init :vertices (list (float-vector 695.956 300.0 606.629) (float-vector 691.795 392.5 632.846) (float-vector 585.107 392.5 571.25) (float-vector 597.5 300.0 549.785)))
         (instance face :init :vertices (list (float-vector 585.107 392.5 571.25) (float-vector 691.795 392.5 632.846) (float-vector 687.694 416.932 658.69) (float-vector 678.482 460.215 703.35) (float-vector 551.25 460.215 629.893)))
         (instance face :init :vertices (list (float-vector 551.25 460.215 629.893) (float-vector 678.482 460.215 703.35) (float-vector 675.25 464.283 719.017) (float-vector 660.141 480.023 778.125) (float-vector 654.545 485.0 796.34) (float-vector 505.0 485.0 710.0)))
         (instance face :init :vertices (list (float-vector 505.0 485.0 710.0) (float-vector 654.545 485.0 796.34) (float-vector 642.427 474.225 835.779) (float-vector 624.36 460.215 885.722) (float-vector 458.75 460.215 790.107)))
         (instance face :init :vertices (list (float-vector 458.75 460.215 790.107) (float-vector 624.36 460.215 885.722) (float-vector 622.178 453.9 891.754) (float-vector 599.473 395.719 945.827) (float-vector 598.07 392.5 948.734) (float-vector 424.893 392.5 848.75)))
         (instance face :init :vertices (list (float-vector 424.893 392.5 848.75) (float-vector 598.07 392.5 948.734) (float-vector 587.269 300.0 971.118) (float-vector 412.5 300.0 870.215)))
         (instance face :init :vertices (list (float-vector 412.5 300.0 870.215) (float-vector 587.269 300.0 971.118) (float-vector 598.07 207.5 948.734) (float-vector 424.893 207.5 848.75)))
         (instance face :init :vertices (list (float-vector 424.893 207.5 848.75) (float-vector 598.07 207.5 948.734) (float-vector 599.473 204.281 945.827) (float-vector 622.178 146.1 891.754) (float-vector 624.36 139.785 885.722) (float-vector 458.75 139.785 790.107)))
         (instance face :init :vertices (list (float-vector 458.75 139.785 790.107) (float-vector 624.36 139.785 885.722) (float-vector 642.427 125.775 835.779) (float-vector 654.545 115.0 796.34) (float-vector 505.0 115.0 710.0)))
         (instance face :init :vertices (list (float-vector 505.0 115.0 710.0) (float-vector 654.545 115.0 796.34) (float-vector 660.141 119.977 778.125) (float-vector 675.25 135.717 719.017) (float-vector 678.482 139.785 703.35) (float-vector 551.25 139.785 629.893)))
         (instance face :init :vertices (list (float-vector 551.25 139.785 629.893) (float-vector 678.482 139.785 703.35) (float-vector 687.694 183.068 658.69) (float-vector 691.795 207.5 632.846) (float-vector 585.107 207.5 571.25)))
         (instance face :init :vertices (list (float-vector 585.107 207.5 571.25) (float-vector 691.795 207.5 632.846) (float-vector 695.956 300.0 606.629) (float-vector 597.5 300.0 549.785)))
         (instance face :init :vertices (list (float-vector 597.5 300.0 549.785) (float-vector 585.107 392.5 571.25) (float-vector 551.25 460.215 629.893) (float-vector 505.0 485.0 710.0) (float-vector 458.75 460.215 790.107) (float-vector 424.893 392.5 848.75) (float-vector 412.5 300.0 870.215) (float-vector 424.893 207.5 848.75) (float-vector 458.75 139.785 790.107) (float-vector 505.0 115.0 710.0) (float-vector 551.25 139.785 629.893) (float-vector 585.107 207.5 571.25)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name 'b0 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of 'button
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 21.6506 -12.5 10.0) (float-vector 25.0 -9.094947e-13 10.0) (float-vector 21.6506 12.5 10.0) (float-vector 12.5 21.6506 10.0) (float-vector 1.136868e-13 25.0 10.0) (float-vector -12.5 21.6506 10.0) (float-vector -21.6506 12.5 10.0) (float-vector -25.0 0.0 10.0) (float-vector -21.6506 -12.5 10.0) (float-vector -12.5 -21.6506 10.0) (float-vector 0.0 -25.0 10.0) (float-vector 12.5 -21.6506 10.0)))
         (instance face :init :vertices (list (float-vector 25.0 0.0 2.273737e-13) (float-vector 21.6506 -12.5 2.273737e-13) (float-vector 12.5 -21.6506 1.136868e-13) (float-vector 1.136868e-13 -25.0 2.273737e-13) (float-vector -12.5 -21.6506 2.273737e-13) (float-vector -21.6506 -12.5 2.273737e-13) (float-vector -25.0 0.0 1.136868e-13) (float-vector -21.6506 12.5 0.0) (float-vector -12.5 21.6506 1.136868e-13) (float-vector 0.0 25.0 0.0) (float-vector 12.5 21.6506 0.0) (float-vector 21.6506 12.5 0.0)))
         (instance face :init :vertices (list (float-vector 21.6506 -12.5 10.0) (float-vector 21.6506 -12.5 2.273737e-13) (float-vector 25.0 0.0 2.273737e-13) (float-vector 25.0 -9.094947e-13 10.0)))
         (instance face :init :vertices (list (float-vector 12.5 -21.6506 10.0) (float-vector 12.5 -21.6506 1.136868e-13) (float-vector 21.6506 -12.5 2.273737e-13) (float-vector 21.6506 -12.5 10.0)))
         (instance face :init :vertices (list (float-vector 0.0 -25.0 10.0) (float-vector 1.136868e-13 -25.0 2.273737e-13) (float-vector 12.5 -21.6506 1.136868e-13) (float-vector 12.5 -21.6506 10.0)))
         (instance face :init :vertices (list (float-vector -12.5 -21.6506 10.0) (float-vector -12.5 -21.6506 2.273737e-13) (float-vector 1.136868e-13 -25.0 2.273737e-13) (float-vector 0.0 -25.0 10.0)))
         (instance face :init :vertices (list (float-vector -21.6506 -12.5 10.0) (float-vector -21.6506 -12.5 2.273737e-13) (float-vector -12.5 -21.6506 2.273737e-13) (float-vector -12.5 -21.6506 10.0)))
         (instance face :init :vertices (list (float-vector -25.0 0.0 10.0) (float-vector -25.0 0.0 1.136868e-13) (float-vector -21.6506 -12.5 2.273737e-13) (float-vector -21.6506 -12.5 10.0)))
         (instance face :init :vertices (list (float-vector -21.6506 12.5 10.0) (float-vector -21.6506 12.5 0.0) (float-vector -25.0 0.0 1.136868e-13) (float-vector -25.0 0.0 10.0)))
         (instance face :init :vertices (list (float-vector -12.5 21.6506 10.0) (float-vector -12.5 21.6506 1.136868e-13) (float-vector -21.6506 12.5 0.0) (float-vector -21.6506 12.5 10.0)))
         (instance face :init :vertices (list (float-vector 1.136868e-13 25.0 10.0) (float-vector 0.0 25.0 0.0) (float-vector -12.5 21.6506 1.136868e-13) (float-vector -12.5 21.6506 10.0)))
         (instance face :init :vertices (list (float-vector 12.5 21.6506 10.0) (float-vector 12.5 21.6506 0.0) (float-vector 0.0 25.0 0.0) (float-vector 1.136868e-13 25.0 10.0)))
         (instance face :init :vertices (list (float-vector 21.6506 12.5 10.0) (float-vector 21.6506 12.5 0.0) (float-vector 12.5 21.6506 0.0) (float-vector 12.5 21.6506 10.0)))
         (instance face :init :vertices (list (float-vector 25.0 -9.094947e-13 10.0) (float-vector 25.0 0.0 2.273737e-13) (float-vector 21.6506 12.5 0.0) (float-vector 21.6506 12.5 10.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name 'button :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of 'cap
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 151.554 122.5 30.0) (float-vector 175.0 210.0 30.0) (float-vector 151.554 297.5 30.0) (float-vector 87.5 361.554 30.0) (float-vector 0.0 385.0 30.0) (float-vector -87.5 361.554 30.0) (float-vector -151.554 297.5 30.0) (float-vector -175.0 210.0 30.0) (float-vector -151.554 122.5 30.0) (float-vector -87.5 58.4456 30.0) (float-vector -3.410605e-13 35.0 30.0) (float-vector 87.5 58.4456 30.0)))
         (instance face :init :vertices (list (float-vector 175.0 210.0 0.0) (float-vector 151.554 122.5 2.273737e-13) (float-vector 87.5 58.4456 -1.136868e-13) (float-vector -3.410605e-13 35.0 0.0) (float-vector -87.5 58.4456 0.0) (float-vector -151.554 122.5 0.0) (float-vector -175.0 210.0 1.136868e-13) (float-vector -151.554 297.5 0.0) (float-vector -87.5 361.554 0.0) (float-vector 0.0 385.0 1.136868e-13) (float-vector 87.5 361.554 1.136868e-13) (float-vector 151.554 297.5 2.273737e-13)))
         (instance face :init :vertices (list (float-vector 151.554 122.5 30.0) (float-vector 151.554 122.5 2.273737e-13) (float-vector 175.0 210.0 0.0) (float-vector 175.0 210.0 30.0)))
         (instance face :init :vertices (list (float-vector 87.5 58.4456 30.0) (float-vector 87.5 58.4456 -1.136868e-13) (float-vector 151.554 122.5 2.273737e-13) (float-vector 151.554 122.5 30.0)))
         (instance face :init :vertices (list (float-vector -3.410605e-13 35.0 30.0) (float-vector -3.410605e-13 35.0 0.0) (float-vector 87.5 58.4456 -1.136868e-13) (float-vector 87.5 58.4456 30.0)))
         (instance face :init :vertices (list (float-vector -87.5 58.4456 30.0) (float-vector -87.5 58.4456 0.0) (float-vector -3.410605e-13 35.0 0.0) (float-vector -3.410605e-13 35.0 30.0)))
         (instance face :init :vertices (list (float-vector -151.554 122.5 30.0) (float-vector -151.554 122.5 0.0) (float-vector -87.5 58.4456 0.0) (float-vector -87.5 58.4456 30.0)))
         (instance face :init :vertices (list (float-vector -175.0 210.0 30.0) (float-vector -175.0 210.0 1.136868e-13) (float-vector -151.554 122.5 0.0) (float-vector -151.554 122.5 30.0)))
         (instance face :init :vertices (list (float-vector -151.554 297.5 30.0) (float-vector -151.554 297.5 0.0) (float-vector -175.0 210.0 1.136868e-13) (float-vector -175.0 210.0 30.0)))
         (instance face :init :vertices (list (float-vector -87.5 361.554 30.0) (float-vector -87.5 361.554 0.0) (float-vector -151.554 297.5 0.0) (float-vector -151.554 297.5 30.0)))
         (instance face :init :vertices (list (float-vector 0.0 385.0 30.0) (float-vector 0.0 385.0 1.136868e-13) (float-vector -87.5 361.554 0.0) (float-vector -87.5 361.554 30.0)))
         (instance face :init :vertices (list (float-vector 87.5 361.554 30.0) (float-vector 87.5 361.554 1.136868e-13) (float-vector 0.0 385.0 1.136868e-13) (float-vector 0.0 385.0 30.0)))
         (instance face :init :vertices (list (float-vector 151.554 297.5 30.0) (float-vector 151.554 297.5 2.273737e-13) (float-vector 87.5 361.554 1.136868e-13) (float-vector 87.5 361.554 30.0)))
         (instance face :init :vertices (list (float-vector 175.0 210.0 30.0) (float-vector 175.0 210.0 0.0) (float-vector 151.554 297.5 2.273737e-13) (float-vector 151.554 297.5 30.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 215.0 210.0 2.273737e-13) (float-vector 186.195 317.5 -1.136868e-13) (float-vector 186.195 317.5 30.0) (float-vector 215.0 210.0 30.0)))
         (instance face :init :vertices (list (float-vector 107.5 396.195 -2.273737e-13) (float-vector 107.5 396.195 30.0) (float-vector 186.195 317.5 30.0) (float-vector 186.195 317.5 -1.136868e-13)))
         (instance face :init :vertices (list (float-vector 0.0 425.0 -1.136868e-13) (float-vector 1.136868e-13 425.0 30.0) (float-vector 107.5 396.195 30.0) (float-vector 107.5 396.195 -2.273737e-13)))
         (instance face :init :vertices (list (float-vector -107.5 396.195 0.0) (float-vector -107.5 396.195 30.0) (float-vector 1.136868e-13 425.0 30.0) (float-vector 0.0 425.0 -1.136868e-13)))
         (instance face :init :vertices (list (float-vector -186.195 317.5 -1.136868e-13) (float-vector -186.195 317.5 30.0) (float-vector -107.5 396.195 30.0) (float-vector -107.5 396.195 0.0)))
         (instance face :init :vertices (list (float-vector -215.0 210.0 0.0) (float-vector -215.0 210.0 30.0) (float-vector -186.195 317.5 30.0) (float-vector -186.195 317.5 -1.136868e-13)))
         (instance face :init :vertices (list (float-vector -186.195 102.5 0.0) (float-vector -186.195 102.5 30.0) (float-vector -215.0 210.0 30.0) (float-vector -215.0 210.0 0.0)))
         (instance face :init :vertices (list (float-vector -107.5 23.8045 2.273737e-13) (float-vector -107.5 23.8045 30.0) (float-vector -186.195 102.5 30.0) (float-vector -186.195 102.5 0.0)))
         (instance face :init :vertices (list (float-vector -4.547474e-13 -5.0 0.0) (float-vector -4.547474e-13 -5.0 30.0) (float-vector -107.5 23.8045 30.0) (float-vector -107.5 23.8045 2.273737e-13)))
         (instance face :init :vertices (list (float-vector 107.5 23.8045 1.136868e-13) (float-vector 107.5 23.8045 30.0) (float-vector -4.547474e-13 -5.0 30.0) (float-vector -4.547474e-13 -5.0 0.0)))
         (instance face :init :vertices (list (float-vector 186.195 102.5 0.0) (float-vector 186.195 102.5 30.0) (float-vector 107.5 23.8045 30.0) (float-vector 107.5 23.8045 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 215.0 210.0 30.0) (float-vector 186.195 317.5 30.0) (float-vector 107.5 396.195 30.0) (float-vector 1.136868e-13 425.0 30.0) (float-vector -107.5 396.195 30.0) (float-vector -186.195 317.5 30.0) (float-vector -215.0 210.0 30.0) (float-vector -186.195 102.5 30.0) (float-vector -107.5 23.8045 30.0) (float-vector -4.547474e-13 -5.0 30.0) (float-vector 107.5 23.8045 30.0) (float-vector 186.195 102.5 30.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 151.554 122.5 30.0) (float-vector 87.5 58.4456 30.0) (float-vector -3.410605e-13 35.0 30.0) (float-vector -87.5 58.4456 30.0) (float-vector -151.554 122.5 30.0) (float-vector -175.0 210.0 30.0) (float-vector -151.554 297.5 30.0) (float-vector -87.5 361.554 30.0) (float-vector 0.0 385.0 30.0) (float-vector 87.5 361.554 30.0) (float-vector 151.554 297.5 30.0) (float-vector 175.0 210.0 30.0)))
))
         (instance face :init :vertices (list (float-vector 186.195 102.5 0.0) (float-vector 107.5 23.8045 1.136868e-13) (float-vector -4.547474e-13 -5.0 0.0) (float-vector -107.5 23.8045 2.273737e-13) (float-vector -186.195 102.5 0.0) (float-vector -215.0 210.0 0.0) (float-vector -186.195 317.5 -1.136868e-13) (float-vector -107.5 396.195 0.0) (float-vector 0.0 425.0 -1.136868e-13) (float-vector 107.5 396.195 -2.273737e-13) (float-vector 186.195 317.5 -1.136868e-13) (float-vector 215.0 210.0 2.273737e-13))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 175.0 210.0 0.0) (float-vector 151.554 297.5 2.273737e-13) (float-vector 87.5 361.554 1.136868e-13) (float-vector 0.0 385.0 1.136868e-13) (float-vector -87.5 361.554 0.0) (float-vector -151.554 297.5 0.0) (float-vector -175.0 210.0 1.136868e-13) (float-vector -151.554 122.5 0.0) (float-vector -87.5 58.4456 0.0) (float-vector -3.410605e-13 35.0 0.0) (float-vector 87.5 58.4456 -1.136868e-13) (float-vector 151.554 122.5 2.273737e-13)))
))
         (instance face :init :vertices (list (float-vector 215.0 210.0 2.273737e-13) (float-vector 215.0 210.0 30.0) (float-vector 186.195 102.5 30.0) (float-vector 186.195 102.5 0.0)))
         (instance face :init :vertices (list (float-vector 175.0 210.0 30.0) (float-vector 151.554 297.5 30.0) (float-vector 151.554 297.5 2.273737e-13) (float-vector 175.0 210.0 0.0)))
         (instance face :init :vertices (list (float-vector 151.554 297.5 2.273737e-13) (float-vector 151.554 297.5 30.0) (float-vector 87.5 361.554 30.0) (float-vector 87.5 361.554 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 87.5 361.554 1.136868e-13) (float-vector 87.5 361.554 30.0) (float-vector 0.0 385.0 30.0) (float-vector 0.0 385.0 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 0.0 385.0 1.136868e-13) (float-vector 0.0 385.0 30.0) (float-vector -87.5 361.554 30.0) (float-vector -87.5 361.554 0.0)))
         (instance face :init :vertices (list (float-vector -87.5 361.554 0.0) (float-vector -87.5 361.554 30.0) (float-vector -151.554 297.5 30.0) (float-vector -151.554 297.5 0.0)))
         (instance face :init :vertices (list (float-vector -151.554 297.5 0.0) (float-vector -151.554 297.5 30.0) (float-vector -175.0 210.0 30.0) (float-vector -175.0 210.0 1.136868e-13)))
         (instance face :init :vertices (list (float-vector -175.0 210.0 1.136868e-13) (float-vector -175.0 210.0 30.0) (float-vector -151.554 122.5 30.0) (float-vector -151.554 122.5 0.0)))
         (instance face :init :vertices (list (float-vector -151.554 122.5 0.0) (float-vector -151.554 122.5 30.0) (float-vector -87.5 58.4456 30.0) (float-vector -87.5 58.4456 0.0)))
         (instance face :init :vertices (list (float-vector -87.5 58.4456 0.0) (float-vector -87.5 58.4456 30.0) (float-vector -3.410605e-13 35.0 30.0) (float-vector -3.410605e-13 35.0 0.0)))
         (instance face :init :vertices (list (float-vector -3.410605e-13 35.0 0.0) (float-vector -3.410605e-13 35.0 30.0) (float-vector 87.5 58.4456 30.0) (float-vector 87.5 58.4456 -1.136868e-13)))
         (instance face :init :vertices (list (float-vector 87.5 58.4456 -1.136868e-13) (float-vector 87.5 58.4456 30.0) (float-vector 151.554 122.5 30.0) (float-vector 151.554 122.5 2.273737e-13)))
         (instance face :init :vertices (list (float-vector 151.554 122.5 2.273737e-13) (float-vector 151.554 122.5 30.0) (float-vector 175.0 210.0 30.0) (float-vector 175.0 210.0 0.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray80)
     (gl::transparent (elt bc 0) 0.5)
     (send (elt bc 1) :set-color :gray60)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name 'cap :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 640.0 90.0 770.0) :rot #2f((0.34202 -1.477606e-17 0.939693) (3.069601e-17 1.0 4.551926e-18) (-0.939693 2.728796e-17 0.34202))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 600.0 540.0 930.0) :rot #2f((0.5 1.709814e-17 0.866025) (-3.097593e-17 1.0 -1.859271e-18) (-0.866025 -2.589630e-17 0.5))))
     (send blink0 :assoc blink2)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :joint0
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :joint0    :axis :x 
			     :min    0.0 :max  180.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :joint1
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :joint1    :axis (float-vector 0.0 0.0 1.0)
			     :min  -90.0 :max   90.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 505.0 0.0 580.0) :rot #2f((0.5 1.709814e-17 0.866025) (-3.097593e-17 1.0 -1.859271e-18) (-0.866025 -2.589630e-17 0.5)) :name "contents"))
     (send self :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 640.0 190.0 770.0) :rot #2f((-3.053113e-16 -0.34202 -0.939693) (-1.0 6.938894e-16 1.110223e-16) (6.106227e-16 0.939693 -0.34202)) :name "handle-cap"))
     (send self :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 600.0 240.0 930.0) :rot #2f((0.5 1.709814e-17 0.866025) (-3.097593e-17 1.0 -1.859271e-18) (-0.866025 -2.589630e-17 0.5)) :name "open-button"))
     (send self :assoc handle2)

     ;; definition of :button
     (setq button0 (make-cascoords :pos (float-vector 600.0 240.0 930.0) :rot #2f((0.5 1.709814e-17 0.866025) (-3.097593e-17 1.0 -1.859271e-18) (-0.866025 -2.589630e-17 0.5)) :name "open"))
     (send self :assoc button0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:joint0 (&rest args) (forward-message-to joint0 args))
  (:joint1 (&rest args) (forward-message-to joint1 args))
  (:handle () (list  handle0 handle1 handle2))
  (:handle-contents () handle0)
  (:handle-handle-cap () handle1)
  (:handle-open-button () handle2)
  (:attention () (list ))
  (:button () (list  button0))
  (:button-open () button0)
  )

(defun room602-laundary-machine (&rest args) (instance* room602-laundary-machine-object :init args))
;; (format *error-output* "(instance room602-laundary-machine-object :init) for generating model~%")
