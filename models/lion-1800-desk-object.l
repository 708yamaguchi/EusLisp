;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r472M 630 46425) for Linux64 created on k-okada-t410s(Tue Mar 8 13:24:11 JST 2011)
;;
;;
(defclass lion-1800-desk-object
  :super cascaded-link
  :slots (sensors))
(defmethod lion-1800-desk-object
  (:init
   (&rest args &key (name "lion-1800-desk") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
         joint0
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset120642224
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 400.0 900.0 680.0) (float-vector -400.0 900.0 680.0) (float-vector -400.0 -900.0 680.0) (float-vector 400.0 -900.0 680.0)))
         (instance face :init :vertices (list (float-vector -400.0 900.0 650.0) (float-vector 400.0 900.0 650.0) (float-vector 400.0 -900.0 650.0) (float-vector -400.0 -900.0 650.0)))
         (instance face :init :vertices (list (float-vector 400.0 900.0 680.0) (float-vector 400.0 900.0 650.0) (float-vector -400.0 900.0 650.0) (float-vector -400.0 900.0 680.0)))
         (instance face :init :vertices (list (float-vector 400.0 -900.0 680.0) (float-vector 400.0 -900.0 650.0) (float-vector 400.0 900.0 650.0) (float-vector 400.0 900.0 680.0)))
         (instance face :init :vertices (list (float-vector -400.0 -900.0 680.0) (float-vector -400.0 -900.0 650.0) (float-vector 400.0 -900.0 650.0) (float-vector 400.0 -900.0 680.0)))
         (instance face :init :vertices (list (float-vector -400.0 900.0 680.0) (float-vector -400.0 900.0 650.0) (float-vector -400.0 -900.0 650.0) (float-vector -400.0 -900.0 680.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 900.0 1215.0) (float-vector -400.0 900.0 1215.0) (float-vector -400.0 -900.0 1215.0) (float-vector 0.0 -900.0 1215.0)))
         (instance face :init :vertices (list (float-vector -400.0 900.0 1185.0) (float-vector 0.0 900.0 1185.0) (float-vector 0.0 -900.0 1185.0) (float-vector -400.0 -900.0 1185.0)))
         (instance face :init :vertices (list (float-vector 0.0 900.0 1215.0) (float-vector 0.0 900.0 1185.0) (float-vector -400.0 900.0 1185.0) (float-vector -400.0 900.0 1215.0)))
         (instance face :init :vertices (list (float-vector 0.0 -900.0 1215.0) (float-vector 0.0 -900.0 1185.0) (float-vector 0.0 900.0 1185.0) (float-vector 0.0 900.0 1215.0)))
         (instance face :init :vertices (list (float-vector -400.0 -900.0 1215.0) (float-vector -400.0 -900.0 1185.0) (float-vector 0.0 -900.0 1185.0) (float-vector 0.0 -900.0 1215.0)))
         (instance face :init :vertices (list (float-vector -400.0 900.0 1215.0) (float-vector -400.0 900.0 1185.0) (float-vector -400.0 -900.0 1185.0) (float-vector -400.0 -900.0 1215.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -120.0 880.0 1200.0) (float-vector -340.0 880.0 1200.0) (float-vector -340.0 860.0 1200.0) (float-vector -120.0 860.0 1200.0)))
         (instance face :init :vertices (list (float-vector -340.0 880.0 650.0) (float-vector -120.0 880.0 650.0) (float-vector -120.0 860.0 650.0) (float-vector -340.0 860.0 650.0)))
         (instance face :init :vertices (list (float-vector -120.0 880.0 1200.0) (float-vector -120.0 880.0 650.0) (float-vector -340.0 880.0 650.0) (float-vector -340.0 880.0 1200.0)))
         (instance face :init :vertices (list (float-vector -120.0 860.0 1200.0) (float-vector -120.0 860.0 650.0) (float-vector -120.0 880.0 650.0) (float-vector -120.0 880.0 1200.0)))
         (instance face :init :vertices (list (float-vector -340.0 860.0 1200.0) (float-vector -340.0 860.0 650.0) (float-vector -120.0 860.0 650.0) (float-vector -120.0 860.0 1200.0)))
         (instance face :init :vertices (list (float-vector -340.0 880.0 1200.0) (float-vector -340.0 880.0 650.0) (float-vector -340.0 860.0 650.0) (float-vector -340.0 860.0 1200.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -120.0 -860.0 1200.0) (float-vector -340.0 -860.0 1200.0) (float-vector -340.0 -880.0 1200.0) (float-vector -120.0 -880.0 1200.0)))
         (instance face :init :vertices (list (float-vector -340.0 -860.0 650.0) (float-vector -120.0 -860.0 650.0) (float-vector -120.0 -880.0 650.0) (float-vector -340.0 -880.0 650.0)))
         (instance face :init :vertices (list (float-vector -120.0 -860.0 1200.0) (float-vector -120.0 -860.0 650.0) (float-vector -340.0 -860.0 650.0) (float-vector -340.0 -860.0 1200.0)))
         (instance face :init :vertices (list (float-vector -120.0 -880.0 1200.0) (float-vector -120.0 -880.0 650.0) (float-vector -120.0 -860.0 650.0) (float-vector -120.0 -860.0 1200.0)))
         (instance face :init :vertices (list (float-vector -340.0 -880.0 1200.0) (float-vector -340.0 -880.0 650.0) (float-vector -120.0 -880.0 650.0) (float-vector -120.0 -880.0 1200.0)))
         (instance face :init :vertices (list (float-vector -340.0 -860.0 1200.0) (float-vector -340.0 -860.0 650.0) (float-vector -340.0 -880.0 650.0) (float-vector -340.0 -880.0 1200.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -210.0 10.0 1200.0) (float-vector -300.0 10.0 1200.0) (float-vector -300.0 -10.0 1200.0) (float-vector -210.0 -10.0 1200.0)))
         (instance face :init :vertices (list (float-vector -300.0 10.0 650.0) (float-vector -210.0 10.0 650.0) (float-vector -210.0 -10.0 650.0) (float-vector -300.0 -10.0 650.0)))
         (instance face :init :vertices (list (float-vector -210.0 10.0 1200.0) (float-vector -210.0 10.0 650.0) (float-vector -300.0 10.0 650.0) (float-vector -300.0 10.0 1200.0)))
         (instance face :init :vertices (list (float-vector -210.0 -10.0 1200.0) (float-vector -210.0 -10.0 650.0) (float-vector -210.0 10.0 650.0) (float-vector -210.0 10.0 1200.0)))
         (instance face :init :vertices (list (float-vector -300.0 -10.0 1200.0) (float-vector -300.0 -10.0 650.0) (float-vector -210.0 -10.0 650.0) (float-vector -210.0 -10.0 1200.0)))
         (instance face :init :vertices (list (float-vector -300.0 10.0 1200.0) (float-vector -300.0 10.0 650.0) (float-vector -300.0 -10.0 650.0) (float-vector -300.0 -10.0 1200.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -40.0 880.0 650.0) (float-vector -340.0 880.0 650.0) (float-vector -340.0 860.0 650.0) (float-vector -40.0 860.0 650.0)))
         (instance face :init :vertices (list (float-vector -340.0 880.0 0.0) (float-vector -40.0 880.0 0.0) (float-vector -40.0 860.0 0.0) (float-vector -340.0 860.0 0.0)))
         (instance face :init :vertices (list (float-vector -40.0 880.0 650.0) (float-vector -40.0 880.0 0.0) (float-vector -340.0 880.0 0.0) (float-vector -340.0 880.0 650.0)))
         (instance face :init :vertices (list (float-vector -40.0 860.0 650.0) (float-vector -40.0 860.0 0.0) (float-vector -40.0 880.0 0.0) (float-vector -40.0 880.0 650.0)))
         (instance face :init :vertices (list (float-vector -340.0 860.0 650.0) (float-vector -340.0 860.0 0.0) (float-vector -40.0 860.0 0.0) (float-vector -40.0 860.0 650.0)))
         (instance face :init :vertices (list (float-vector -340.0 880.0 650.0) (float-vector -340.0 880.0 0.0) (float-vector -340.0 860.0 0.0) (float-vector -340.0 860.0 650.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -40.0 -860.0 650.0) (float-vector -340.0 -860.0 650.0) (float-vector -340.0 -880.0 650.0) (float-vector -40.0 -880.0 650.0)))
         (instance face :init :vertices (list (float-vector -340.0 -860.0 0.0) (float-vector -40.0 -860.0 0.0) (float-vector -40.0 -880.0 0.0) (float-vector -340.0 -880.0 0.0)))
         (instance face :init :vertices (list (float-vector -40.0 -860.0 650.0) (float-vector -40.0 -860.0 0.0) (float-vector -340.0 -860.0 0.0) (float-vector -340.0 -860.0 650.0)))
         (instance face :init :vertices (list (float-vector -40.0 -880.0 650.0) (float-vector -40.0 -880.0 0.0) (float-vector -40.0 -860.0 0.0) (float-vector -40.0 -860.0 650.0)))
         (instance face :init :vertices (list (float-vector -340.0 -880.0 650.0) (float-vector -340.0 -880.0 0.0) (float-vector -40.0 -880.0 0.0) (float-vector -40.0 -880.0 650.0)))
         (instance face :init :vertices (list (float-vector -340.0 -860.0 650.0) (float-vector -340.0 -860.0 0.0) (float-vector -340.0 -880.0 0.0) (float-vector -340.0 -880.0 650.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 400.0 900.0 100.0) (float-vector -400.0 900.0 100.0) (float-vector -400.0 840.0 100.0) (float-vector 400.0 840.0 100.0)))
         (instance face :init :vertices (list (float-vector -400.0 900.0 0.0) (float-vector 400.0 900.0 0.0) (float-vector 400.0 840.0 0.0) (float-vector -400.0 840.0 0.0)))
         (instance face :init :vertices (list (float-vector 400.0 900.0 100.0) (float-vector 400.0 900.0 0.0) (float-vector -400.0 900.0 0.0) (float-vector -400.0 900.0 100.0)))
         (instance face :init :vertices (list (float-vector 400.0 840.0 100.0) (float-vector 400.0 840.0 0.0) (float-vector 400.0 900.0 0.0) (float-vector 400.0 900.0 100.0)))
         (instance face :init :vertices (list (float-vector -400.0 840.0 100.0) (float-vector -400.0 840.0 0.0) (float-vector 400.0 840.0 0.0) (float-vector 400.0 840.0 100.0)))
         (instance face :init :vertices (list (float-vector -400.0 900.0 100.0) (float-vector -400.0 900.0 0.0) (float-vector -400.0 840.0 0.0) (float-vector -400.0 840.0 100.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 400.0 -840.0 100.0) (float-vector -400.0 -840.0 100.0) (float-vector -400.0 -900.0 100.0) (float-vector 400.0 -900.0 100.0)))
         (instance face :init :vertices (list (float-vector -400.0 -840.0 0.0) (float-vector 400.0 -840.0 0.0) (float-vector 400.0 -900.0 0.0) (float-vector -400.0 -900.0 0.0)))
         (instance face :init :vertices (list (float-vector 400.0 -840.0 100.0) (float-vector 400.0 -840.0 0.0) (float-vector -400.0 -840.0 0.0) (float-vector -400.0 -840.0 100.0)))
         (instance face :init :vertices (list (float-vector 400.0 -900.0 100.0) (float-vector 400.0 -900.0 0.0) (float-vector 400.0 -840.0 0.0) (float-vector 400.0 -840.0 100.0)))
         (instance face :init :vertices (list (float-vector -400.0 -900.0 100.0) (float-vector -400.0 -900.0 0.0) (float-vector 400.0 -900.0 0.0) (float-vector 400.0 -900.0 100.0)))
         (instance face :init :vertices (list (float-vector -400.0 -840.0 100.0) (float-vector -400.0 -840.0 0.0) (float-vector -400.0 -900.0 0.0) (float-vector -400.0 -900.0 100.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -285.0 870.0 650.0) (float-vector -315.0 870.0 650.0) (float-vector -315.0 -870.0 650.0) (float-vector -285.0 -870.0 650.0)))
         (instance face :init :vertices (list (float-vector -315.0 870.0 300.0) (float-vector -285.0 870.0 300.0) (float-vector -285.0 -870.0 300.0) (float-vector -315.0 -870.0 300.0)))
         (instance face :init :vertices (list (float-vector -285.0 870.0 650.0) (float-vector -285.0 870.0 300.0) (float-vector -315.0 870.0 300.0) (float-vector -315.0 870.0 650.0)))
         (instance face :init :vertices (list (float-vector -285.0 -870.0 650.0) (float-vector -285.0 -870.0 300.0) (float-vector -285.0 870.0 300.0) (float-vector -285.0 870.0 650.0)))
         (instance face :init :vertices (list (float-vector -315.0 -870.0 650.0) (float-vector -315.0 -870.0 300.0) (float-vector -285.0 -870.0 300.0) (float-vector -285.0 -870.0 650.0)))
         (instance face :init :vertices (list (float-vector -315.0 870.0 650.0) (float-vector -315.0 870.0 300.0) (float-vector -315.0 -870.0 300.0) (float-vector -315.0 -870.0 650.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -80.0 870.0 310.0) (float-vector -300.0 870.0 310.0) (float-vector -300.0 -870.0 310.0) (float-vector -80.0 -870.0 310.0)))
         (instance face :init :vertices (list (float-vector -300.0 870.0 290.0) (float-vector -80.0 870.0 290.0) (float-vector -80.0 -870.0 290.0) (float-vector -300.0 -870.0 290.0)))
         (instance face :init :vertices (list (float-vector -80.0 870.0 310.0) (float-vector -80.0 870.0 290.0) (float-vector -300.0 870.0 290.0) (float-vector -300.0 870.0 310.0)))
         (instance face :init :vertices (list (float-vector -80.0 -870.0 310.0) (float-vector -80.0 -870.0 290.0) (float-vector -80.0 870.0 290.0) (float-vector -80.0 870.0 310.0)))
         (instance face :init :vertices (list (float-vector -300.0 -870.0 310.0) (float-vector -300.0 -870.0 290.0) (float-vector -80.0 -870.0 290.0) (float-vector -80.0 -870.0 310.0)))
         (instance face :init :vertices (list (float-vector -300.0 870.0 310.0) (float-vector -300.0 870.0 290.0) (float-vector -300.0 -870.0 290.0) (float-vector -300.0 -870.0 310.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :floralwhite)
     (send (elt bc 1) :set-color :floralwhite)
     (send (elt bc 2) :set-color :floralwhite)
     (send (elt bc 3) :set-color :floralwhite)
     (send (elt bc 4) :set-color :floralwhite)
     (send (elt bc 5) :set-color :floralwhite)
     (send (elt bc 6) :set-color :floralwhite)
     (send (elt bc 7) :set-color :floralwhite)
     (send (elt bc 8) :set-color :floralwhite)
     (send (elt bc 9) :set-color :floralwhite)
     (send (elt bc 10) :set-color :floralwhite)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset120642224 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:handle () (list ))
  (:attention () (list ))
  (:button () (list ))
  )

(defun lion-1800-desk (&rest args) (instance* lion-1800-desk-object :init args))
;; (format *error-output* "(instance lion-1800-desk-object :init) for generating model~%")
