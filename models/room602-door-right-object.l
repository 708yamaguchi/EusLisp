;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r482M 655:657 48161) for Linux64 created on k-okada-t410s(Tue Jun 21 11:43:49 JST 2011)
;;
;;
(defclass room602-door-right-object
  :super cascaded-link
  :slots (sensors
         joint0 joint1 joint2 ))
(defmethod room602-door-right-object
  (:init
   (&rest args &key (name "room602-door-right") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3
                 handle0 handle1 handle2 handle3
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset46730792
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -12.0 22.0 1900.0) (float-vector -22.0 22.0 1900.0) (float-vector -22.0 12.0 1900.0) (float-vector -12.0 12.0 1900.0)))
         (instance face :init :vertices (list (float-vector -22.0 22.0 0.0) (float-vector -12.0 22.0 0.0) (float-vector -12.0 12.0 0.0) (float-vector -22.0 12.0 0.0)))
         (instance face :init :vertices (list (float-vector -12.0 22.0 1900.0) (float-vector -12.0 22.0 0.0) (float-vector -22.0 22.0 0.0) (float-vector -22.0 22.0 1900.0)))
         (instance face :init :vertices (list (float-vector -12.0 12.0 1900.0) (float-vector -12.0 12.0 0.0) (float-vector -12.0 22.0 0.0) (float-vector -12.0 22.0 1900.0)))
         (instance face :init :vertices (list (float-vector -22.0 12.0 1900.0) (float-vector -22.0 12.0 0.0) (float-vector -12.0 12.0 0.0) (float-vector -12.0 12.0 1900.0)))
         (instance face :init :vertices (list (float-vector -22.0 22.0 1900.0) (float-vector -22.0 22.0 0.0) (float-vector -22.0 12.0 0.0) (float-vector -22.0 12.0 1900.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :darkseagreen2)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset46730792 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset107518392
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 17.5 783.0 1900.0) (float-vector -17.5 783.0 1900.0) (float-vector -17.5 -17.0 1900.0) (float-vector 17.5 -17.0 1900.0)))
         (instance face :init :vertices (list (float-vector -17.5 783.0 0.0) (float-vector 17.5 783.0 0.0) (float-vector 17.5 -17.0 0.0) (float-vector -17.5 -17.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.5 783.0 1900.0) (float-vector 17.5 783.0 0.0) (float-vector -17.5 783.0 0.0) (float-vector -17.5 783.0 1900.0)))
         (instance face :init :vertices (list (float-vector 17.5 -17.0 1900.0) (float-vector 17.5 -17.0 0.0) (float-vector 17.5 783.0 0.0) (float-vector 17.5 783.0 1900.0)))
         (instance face :init :vertices (list (float-vector -17.5 -17.0 1900.0) (float-vector -17.5 -17.0 0.0) (float-vector 17.5 -17.0 0.0) (float-vector 17.5 -17.0 1900.0)))
         (instance face :init :vertices (list (float-vector -17.5 783.0 1900.0) (float-vector -17.5 783.0 0.0) (float-vector -17.5 -17.0 0.0) (float-vector -17.5 -17.0 1900.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :darkseagreen2)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset107518392 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset107743320
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -5.0 -10.0 -17.3205) (float-vector -5.0 0.0 -20.0) (float-vector -5.0 10.0 -17.3205) (float-vector -5.0 17.3205 -10.0) (float-vector -5.0 20.0 0.0) (float-vector -5.0 17.3205 10.0) (float-vector -5.0 10.0 17.3205) (float-vector -5.0 2.842171e-14 20.0) (float-vector -5.0 -10.0 17.3205) (float-vector -5.0 -17.3205 10.0) (float-vector -5.0 -20.0 0.0) (float-vector -5.0 -17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -20.0 0.0 -20.0) (float-vector -20.0 -10.0 -17.3205) (float-vector -20.0 -17.3205 -10.0) (float-vector -20.0 -20.0 0.0) (float-vector -20.0 -17.3205 10.0) (float-vector -20.0 -10.0 17.3205) (float-vector -20.0 2.842171e-14 20.0) (float-vector -20.0 10.0 17.3205) (float-vector -20.0 17.3205 10.0) (float-vector -20.0 20.0 0.0) (float-vector -20.0 17.3205 -10.0) (float-vector -20.0 10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -5.0 -10.0 -17.3205) (float-vector -20.0 -10.0 -17.3205) (float-vector -20.0 0.0 -20.0) (float-vector -5.0 0.0 -20.0)))
         (instance face :init :vertices (list (float-vector -5.0 -17.3205 -10.0) (float-vector -20.0 -17.3205 -10.0) (float-vector -20.0 -10.0 -17.3205) (float-vector -5.0 -10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -5.0 -20.0 0.0) (float-vector -20.0 -20.0 0.0) (float-vector -20.0 -17.3205 -10.0) (float-vector -5.0 -17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -5.0 -17.3205 10.0) (float-vector -20.0 -17.3205 10.0) (float-vector -20.0 -20.0 0.0) (float-vector -5.0 -20.0 0.0)))
         (instance face :init :vertices (list (float-vector -5.0 -10.0 17.3205) (float-vector -20.0 -10.0 17.3205) (float-vector -20.0 -17.3205 10.0) (float-vector -5.0 -17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -5.0 2.842171e-14 20.0) (float-vector -20.0 2.842171e-14 20.0) (float-vector -20.0 -10.0 17.3205) (float-vector -5.0 -10.0 17.3205)))
         (instance face :init :vertices (list (float-vector -5.0 10.0 17.3205) (float-vector -20.0 10.0 17.3205) (float-vector -20.0 2.842171e-14 20.0) (float-vector -5.0 2.842171e-14 20.0)))
         (instance face :init :vertices (list (float-vector -5.0 17.3205 10.0) (float-vector -20.0 17.3205 10.0) (float-vector -20.0 10.0 17.3205) (float-vector -5.0 10.0 17.3205)))
         (instance face :init :vertices (list (float-vector -5.0 20.0 0.0) (float-vector -20.0 20.0 0.0) (float-vector -20.0 17.3205 10.0) (float-vector -5.0 17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -5.0 17.3205 -10.0) (float-vector -20.0 17.3205 -10.0) (float-vector -20.0 20.0 0.0) (float-vector -5.0 20.0 0.0)))
         (instance face :init :vertices (list (float-vector -5.0 10.0 -17.3205) (float-vector -20.0 10.0 -17.3205) (float-vector -20.0 17.3205 -10.0) (float-vector -5.0 17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -5.0 0.0 -20.0) (float-vector -20.0 0.0 -20.0) (float-vector -20.0 10.0 -17.3205) (float-vector -5.0 10.0 -17.3205)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 20.0 5.0 15.0) (float-vector -20.0 5.0 15.0) (float-vector -20.0 -5.0 15.0) (float-vector 20.0 -5.0 15.0)))
         (instance face :init :vertices (list (float-vector -20.0 5.0 -15.0) (float-vector 20.0 5.0 -15.0) (float-vector 20.0 -5.0 -15.0) (float-vector -20.0 -5.0 -15.0)))
         (instance face :init :vertices (list (float-vector 20.0 5.0 15.0) (float-vector 20.0 5.0 -15.0) (float-vector -20.0 5.0 -15.0) (float-vector -20.0 5.0 15.0)))
         (instance face :init :vertices (list (float-vector 20.0 -5.0 15.0) (float-vector 20.0 -5.0 -15.0) (float-vector 20.0 5.0 -15.0) (float-vector 20.0 5.0 15.0)))
         (instance face :init :vertices (list (float-vector -20.0 -5.0 15.0) (float-vector -20.0 -5.0 -15.0) (float-vector 20.0 -5.0 -15.0) (float-vector 20.0 -5.0 15.0)))
         (instance face :init :vertices (list (float-vector -20.0 5.0 15.0) (float-vector -20.0 5.0 -15.0) (float-vector -20.0 -5.0 -15.0) (float-vector -20.0 -5.0 15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -70.0 -10.0 17.3205) (float-vector -70.0 0.0 20.0) (float-vector -70.0 10.0 17.3205) (float-vector -70.0 17.3205 10.0) (float-vector -70.0 20.0 0.0) (float-vector -70.0 17.3205 -10.0) (float-vector -70.0 10.0 -17.3205) (float-vector -70.0 2.842171e-14 -20.0) (float-vector -70.0 -10.0 -17.3205) (float-vector -70.0 -17.3205 -10.0) (float-vector -70.0 -20.0 0.0) (float-vector -70.0 -17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -55.0 0.0 20.0) (float-vector -55.0 -10.0 17.3205) (float-vector -55.0 -17.3205 10.0) (float-vector -55.0 -20.0 0.0) (float-vector -55.0 -17.3205 -10.0) (float-vector -55.0 -10.0 -17.3205) (float-vector -55.0 2.842171e-14 -20.0) (float-vector -55.0 10.0 -17.3205) (float-vector -55.0 17.3205 -10.0) (float-vector -55.0 20.0 0.0) (float-vector -55.0 17.3205 10.0) (float-vector -55.0 10.0 17.3205)))
         (instance face :init :vertices (list (float-vector -70.0 -10.0 17.3205) (float-vector -55.0 -10.0 17.3205) (float-vector -55.0 0.0 20.0) (float-vector -70.0 0.0 20.0)))
         (instance face :init :vertices (list (float-vector -70.0 -17.3205 10.0) (float-vector -55.0 -17.3205 10.0) (float-vector -55.0 -10.0 17.3205) (float-vector -70.0 -10.0 17.3205)))
         (instance face :init :vertices (list (float-vector -70.0 -20.0 0.0) (float-vector -55.0 -20.0 0.0) (float-vector -55.0 -17.3205 10.0) (float-vector -70.0 -17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -70.0 -17.3205 -10.0) (float-vector -55.0 -17.3205 -10.0) (float-vector -55.0 -20.0 0.0) (float-vector -70.0 -20.0 0.0)))
         (instance face :init :vertices (list (float-vector -70.0 -10.0 -17.3205) (float-vector -55.0 -10.0 -17.3205) (float-vector -55.0 -17.3205 -10.0) (float-vector -70.0 -17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -70.0 2.842171e-14 -20.0) (float-vector -55.0 2.842171e-14 -20.0) (float-vector -55.0 -10.0 -17.3205) (float-vector -70.0 -10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -70.0 10.0 -17.3205) (float-vector -55.0 10.0 -17.3205) (float-vector -55.0 2.842171e-14 -20.0) (float-vector -70.0 2.842171e-14 -20.0)))
         (instance face :init :vertices (list (float-vector -70.0 17.3205 -10.0) (float-vector -55.0 17.3205 -10.0) (float-vector -55.0 10.0 -17.3205) (float-vector -70.0 10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -70.0 20.0 0.0) (float-vector -55.0 20.0 0.0) (float-vector -55.0 17.3205 -10.0) (float-vector -70.0 17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -70.0 17.3205 10.0) (float-vector -55.0 17.3205 10.0) (float-vector -55.0 20.0 0.0) (float-vector -70.0 20.0 0.0)))
         (instance face :init :vertices (list (float-vector -70.0 10.0 17.3205) (float-vector -55.0 10.0 17.3205) (float-vector -55.0 17.3205 10.0) (float-vector -70.0 17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -70.0 0.0 20.0) (float-vector -55.0 0.0 20.0) (float-vector -55.0 10.0 17.3205) (float-vector -70.0 10.0 17.3205)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :dimgray)
     (send (elt bc 1) :set-color :dimgray)
     (send (elt bc 2) :set-color :dimgray)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset107743320 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset107705768
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 175.0 -12.5 -21.6506) (float-vector 175.0 0.0 -25.0) (float-vector 175.0 12.5 -21.6506) (float-vector 175.0 21.6506 -12.5) (float-vector 175.0 25.0 0.0) (float-vector 175.0 21.6506 12.5) (float-vector 175.0 12.5 21.6506) (float-vector 175.0 2.842171e-14 25.0) (float-vector 175.0 -12.5 21.6506) (float-vector 175.0 -21.6506 12.5) (float-vector 175.0 -25.0 1.136868e-13) (float-vector 175.0 -21.6506 -12.5)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 -25.0) (float-vector 0.0 -12.5 -21.6506) (float-vector 0.0 -21.6506 -12.5) (float-vector 0.0 -25.0 0.0) (float-vector 0.0 -21.6506 12.5) (float-vector 0.0 -12.5 21.6506) (float-vector 0.0 2.842171e-14 25.0) (float-vector 0.0 12.5 21.6506) (float-vector 0.0 21.6506 12.5) (float-vector 0.0 25.0 0.0) (float-vector 0.0 21.6506 -12.5) (float-vector 0.0 12.5 -21.6506)))
         (instance face :init :vertices (list (float-vector 175.0 -12.5 -21.6506) (float-vector 0.0 -12.5 -21.6506) (float-vector 0.0 0.0 -25.0) (float-vector 175.0 0.0 -25.0)))
         (instance face :init :vertices (list (float-vector 175.0 -21.6506 -12.5) (float-vector 0.0 -21.6506 -12.5) (float-vector 0.0 -12.5 -21.6506) (float-vector 175.0 -12.5 -21.6506)))
         (instance face :init :vertices (list (float-vector 175.0 -25.0 1.136868e-13) (float-vector 0.0 -25.0 0.0) (float-vector 0.0 -21.6506 -12.5) (float-vector 175.0 -21.6506 -12.5)))
         (instance face :init :vertices (list (float-vector 175.0 -21.6506 12.5) (float-vector 0.0 -21.6506 12.5) (float-vector 0.0 -25.0 0.0) (float-vector 175.0 -25.0 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 175.0 -12.5 21.6506) (float-vector 0.0 -12.5 21.6506) (float-vector 0.0 -21.6506 12.5) (float-vector 175.0 -21.6506 12.5)))
         (instance face :init :vertices (list (float-vector 175.0 2.842171e-14 25.0) (float-vector 0.0 2.842171e-14 25.0) (float-vector 0.0 -12.5 21.6506) (float-vector 175.0 -12.5 21.6506)))
         (instance face :init :vertices (list (float-vector 175.0 12.5 21.6506) (float-vector 0.0 12.5 21.6506) (float-vector 0.0 2.842171e-14 25.0) (float-vector 175.0 2.842171e-14 25.0)))
         (instance face :init :vertices (list (float-vector 175.0 21.6506 12.5) (float-vector 0.0 21.6506 12.5) (float-vector 0.0 12.5 21.6506) (float-vector 175.0 12.5 21.6506)))
         (instance face :init :vertices (list (float-vector 175.0 25.0 0.0) (float-vector 0.0 25.0 0.0) (float-vector 0.0 21.6506 12.5) (float-vector 175.0 21.6506 12.5)))
         (instance face :init :vertices (list (float-vector 175.0 21.6506 -12.5) (float-vector 0.0 21.6506 -12.5) (float-vector 0.0 25.0 0.0) (float-vector 175.0 25.0 0.0)))
         (instance face :init :vertices (list (float-vector 175.0 12.5 -21.6506) (float-vector 0.0 12.5 -21.6506) (float-vector 0.0 21.6506 -12.5) (float-vector 175.0 21.6506 -12.5)))
         (instance face :init :vertices (list (float-vector 175.0 0.0 -25.0) (float-vector 0.0 0.0 -25.0) (float-vector 0.0 12.5 -21.6506) (float-vector 175.0 12.5 -21.6506)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :dimgray)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset107705768 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector -88.0 713.0 910.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 34.5 713.0 1010.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink3)
     (send blink1 :newcoords (make-coords :pos (float-vector -17.0 17.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :knob
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink1 :child-link blink2 :name :knob      :axis :x 
			     :min    0.0 :max   90.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :lock
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink2 :child-link blink3 :name :lock      :axis :x 
			     :min  -90.0 :max    0.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector -52.5 -20.0 1060.0) :rot #2f((2.220446e-16 1.0 0.0) (-1.0 2.220446e-16 0.0) (0.0 0.0 1.0)) :name "door-side"))
     (send self :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector -170.0 -70.0 910.0) :rot #2f((1.0 0.0 0.0) (0.0 0.866025 0.5) (0.0 -0.5 0.866025)) :name "rear-knob"))
     (send self :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 65.0 -70.0 910.0) :rot #2f((-1.0 -1.224606e-16 0.0) (1.060540e-16 -0.866025 0.5) (-6.123032e-17 0.5 0.866025)) :name "front-knob"))
     (send self :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 32.5 -40.0 1010.0) :rot #2f((-1.0 -1.224606e-16 0.0) (1.224606e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "lock"))
     (send self :assoc handle3)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3))
     (setq joint-list (list joint0 joint1 joint2))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:door (&rest args) (forward-message-to joint0 args))
  (:knob (&rest args) (forward-message-to joint1 args))
  (:lock (&rest args) (forward-message-to joint2 args))
  (:handle () (list  handle0 handle1 handle2 handle3))
  (:handle-door-side () handle0)
  (:handle-rear-knob () handle1)
  (:handle-front-knob () handle2)
  (:handle-lock () handle3)
  (:attention () (list ))
  (:button () (list ))
  )

(defun room602-door-right (&rest args) (instance* room602-door-right-object :init args))
;; (format *error-output* "(instance room602-door-right-object :init) for generating model~%")
