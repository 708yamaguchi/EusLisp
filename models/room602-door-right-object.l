;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass room602-door-right-object
  :super cascaded-link
  :slots (sensors))
(defmethod room602-door-right-object
  (:init
   (&rest args &key (name "room602-door-right") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3
         joint0 joint1 joint2 joint3
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset156038692
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -12.0 22.0 1900.0) (float-vector -22.0 22.0 1900.0) (float-vector -22.0 12.0 1900.0) (float-vector -12.0 12.0 1900.0)))
         (instance face :init :vertices (list (float-vector -22.0 22.0 0.0) (float-vector -12.0 22.0 0.0) (float-vector -12.0 12.0 0.0) (float-vector -22.0 12.0 0.0)))
         (instance face :init :vertices (list (float-vector -12.0 22.0 1900.0) (float-vector -12.0 22.0 0.0) (float-vector -22.0 22.0 0.0) (float-vector -22.0 22.0 1900.0)))
         (instance face :init :vertices (list (float-vector -12.0 12.0 1900.0) (float-vector -12.0 12.0 0.0) (float-vector -12.0 22.0 0.0) (float-vector -12.0 22.0 1900.0)))
         (instance face :init :vertices (list (float-vector -22.0 12.0 1900.0) (float-vector -22.0 12.0 0.0) (float-vector -12.0 12.0 0.0) (float-vector -12.0 12.0 1900.0)))
         (instance face :init :vertices (list (float-vector -22.0 22.0 1900.0) (float-vector -22.0 22.0 0.0) (float-vector -22.0 12.0 0.0) (float-vector -22.0 12.0 1900.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :darkseagreen2)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset156038692 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset156033256
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 17.5 783.0 1900.0) (float-vector -17.5 783.0 1900.0) (float-vector -17.5 -17.0 1900.0) (float-vector 17.5 -17.0 1900.0)))
         (instance face :init :vertices (list (float-vector -17.5 783.0 0.0) (float-vector 17.5 783.0 0.0) (float-vector 17.5 -17.0 0.0) (float-vector -17.5 -17.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.5 783.0 1900.0) (float-vector 17.5 783.0 0.0) (float-vector -17.5 783.0 0.0) (float-vector -17.5 783.0 1900.0)))
         (instance face :init :vertices (list (float-vector 17.5 -17.0 1900.0) (float-vector 17.5 -17.0 0.0) (float-vector 17.5 783.0 0.0) (float-vector 17.5 783.0 1900.0)))
         (instance face :init :vertices (list (float-vector -17.5 -17.0 1900.0) (float-vector -17.5 -17.0 0.0) (float-vector 17.5 -17.0 0.0) (float-vector 17.5 -17.0 1900.0)))
         (instance face :init :vertices (list (float-vector -17.5 783.0 1900.0) (float-vector -17.5 783.0 0.0) (float-vector -17.5 -17.0 0.0) (float-vector -17.5 -17.0 1900.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :darkseagreen2)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset156033256 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset156027664
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -4.99999 -10.0 -17.3205) (float-vector -4.99999 0.0 -20.0) (float-vector -4.99999 10.0 -17.3205) (float-vector -5.0 17.3205 -10.0) (float-vector -5.0 20.0 0.0) (float-vector -5.0 17.3205 10.0) (float-vector -5.00001 10.0 17.3206) (float-vector -5.00001 1.525879e-05 20.0) (float-vector -5.00001 -9.99998 17.3206) (float-vector -5.0 -17.3205 10.0) (float-vector -5.0 -20.0 0.0) (float-vector -5.0 -17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -20.0 0.0 -20.0) (float-vector -20.0 -10.0 -17.3205) (float-vector -20.0 -17.3205 -10.0) (float-vector -20.0 -20.0 0.0) (float-vector -20.0 -17.3205 10.0) (float-vector -20.0 -9.99998 17.3206) (float-vector -20.0 1.525879e-05 20.0) (float-vector -20.0 10.0 17.3206) (float-vector -20.0 17.3205 10.0) (float-vector -20.0 20.0 0.0) (float-vector -20.0 17.3205 -10.0) (float-vector -20.0 10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -4.99999 -10.0 -17.3205) (float-vector -20.0 -10.0 -17.3205) (float-vector -20.0 0.0 -20.0) (float-vector -4.99999 0.0 -20.0)))
         (instance face :init :vertices (list (float-vector -5.0 -17.3205 -10.0) (float-vector -20.0 -17.3205 -10.0) (float-vector -20.0 -10.0 -17.3205) (float-vector -4.99999 -10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -5.0 -20.0 0.0) (float-vector -20.0 -20.0 0.0) (float-vector -20.0 -17.3205 -10.0) (float-vector -5.0 -17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -5.0 -17.3205 10.0) (float-vector -20.0 -17.3205 10.0) (float-vector -20.0 -20.0 0.0) (float-vector -5.0 -20.0 0.0)))
         (instance face :init :vertices (list (float-vector -5.00001 -9.99998 17.3206) (float-vector -20.0 -9.99998 17.3206) (float-vector -20.0 -17.3205 10.0) (float-vector -5.0 -17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -5.00001 1.525879e-05 20.0) (float-vector -20.0 1.525879e-05 20.0) (float-vector -20.0 -9.99998 17.3206) (float-vector -5.00001 -9.99998 17.3206)))
         (instance face :init :vertices (list (float-vector -5.00001 10.0 17.3206) (float-vector -20.0 10.0 17.3206) (float-vector -20.0 1.525879e-05 20.0) (float-vector -5.00001 1.525879e-05 20.0)))
         (instance face :init :vertices (list (float-vector -5.0 17.3205 10.0) (float-vector -20.0 17.3205 10.0) (float-vector -20.0 10.0 17.3206) (float-vector -5.00001 10.0 17.3206)))
         (instance face :init :vertices (list (float-vector -5.0 20.0 0.0) (float-vector -20.0 20.0 0.0) (float-vector -20.0 17.3205 10.0) (float-vector -5.0 17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -5.0 17.3205 -10.0) (float-vector -20.0 17.3205 -10.0) (float-vector -20.0 20.0 0.0) (float-vector -5.0 20.0 0.0)))
         (instance face :init :vertices (list (float-vector -4.99999 10.0 -17.3205) (float-vector -20.0 10.0 -17.3205) (float-vector -20.0 17.3205 -10.0) (float-vector -5.0 17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -4.99999 0.0 -20.0) (float-vector -20.0 0.0 -20.0) (float-vector -20.0 10.0 -17.3205) (float-vector -4.99999 10.0 -17.3205)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 20.0 5.0 15.0) (float-vector -20.0 5.0 15.0) (float-vector -20.0 -5.0 15.0) (float-vector 20.0 -5.0 15.0)))
         (instance face :init :vertices (list (float-vector -20.0 5.0 -15.0) (float-vector 20.0 5.0 -15.0) (float-vector 20.0 -5.0 -15.0) (float-vector -20.0 -5.0 -15.0)))
         (instance face :init :vertices (list (float-vector 20.0 5.0 15.0) (float-vector 20.0 5.0 -15.0) (float-vector -20.0 5.0 -15.0) (float-vector -20.0 5.0 15.0)))
         (instance face :init :vertices (list (float-vector 20.0 -5.0 15.0) (float-vector 20.0 -5.0 -15.0) (float-vector 20.0 5.0 -15.0) (float-vector 20.0 5.0 15.0)))
         (instance face :init :vertices (list (float-vector -20.0 -5.0 15.0) (float-vector -20.0 -5.0 -15.0) (float-vector 20.0 -5.0 -15.0) (float-vector 20.0 -5.0 15.0)))
         (instance face :init :vertices (list (float-vector -20.0 5.0 15.0) (float-vector -20.0 5.0 -15.0) (float-vector -20.0 -5.0 -15.0) (float-vector -20.0 -5.0 15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -70.0 -10.0 17.3206) (float-vector -70.0 0.0 20.0) (float-vector -70.0 10.0 17.3206) (float-vector -70.0 17.3205 10.0) (float-vector -70.0 20.0 0.0) (float-vector -70.0 17.3205 -10.0) (float-vector -70.0 10.0 -17.3205) (float-vector -70.0 1.525879e-05 -20.0) (float-vector -70.0 -9.99998 -17.3205) (float-vector -70.0 -17.3205 -10.0) (float-vector -70.0 -20.0 0.0) (float-vector -70.0 -17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -55.0 0.0 20.0) (float-vector -55.0 -10.0 17.3206) (float-vector -55.0 -17.3205 10.0) (float-vector -55.0 -20.0 0.0) (float-vector -55.0 -17.3205 -10.0) (float-vector -55.0 -9.99998 -17.3205) (float-vector -55.0 1.525879e-05 -20.0) (float-vector -55.0 10.0 -17.3205) (float-vector -55.0 17.3205 -10.0) (float-vector -55.0 20.0 0.0) (float-vector -55.0 17.3205 10.0) (float-vector -55.0 10.0 17.3206)))
         (instance face :init :vertices (list (float-vector -70.0 -10.0 17.3206) (float-vector -55.0 -10.0 17.3206) (float-vector -55.0 0.0 20.0) (float-vector -70.0 0.0 20.0)))
         (instance face :init :vertices (list (float-vector -70.0 -17.3205 10.0) (float-vector -55.0 -17.3205 10.0) (float-vector -55.0 -10.0 17.3206) (float-vector -70.0 -10.0 17.3206)))
         (instance face :init :vertices (list (float-vector -70.0 -20.0 0.0) (float-vector -55.0 -20.0 0.0) (float-vector -55.0 -17.3205 10.0) (float-vector -70.0 -17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -70.0 -17.3205 -10.0) (float-vector -55.0 -17.3205 -10.0) (float-vector -55.0 -20.0 0.0) (float-vector -70.0 -20.0 0.0)))
         (instance face :init :vertices (list (float-vector -70.0 -9.99998 -17.3205) (float-vector -55.0 -9.99998 -17.3205) (float-vector -55.0 -17.3205 -10.0) (float-vector -70.0 -17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -70.0 1.525879e-05 -20.0) (float-vector -55.0 1.525879e-05 -20.0) (float-vector -55.0 -9.99998 -17.3205) (float-vector -70.0 -9.99998 -17.3205)))
         (instance face :init :vertices (list (float-vector -70.0 10.0 -17.3205) (float-vector -55.0 10.0 -17.3205) (float-vector -55.0 1.525879e-05 -20.0) (float-vector -70.0 1.525879e-05 -20.0)))
         (instance face :init :vertices (list (float-vector -70.0 17.3205 -10.0) (float-vector -55.0 17.3205 -10.0) (float-vector -55.0 10.0 -17.3205) (float-vector -70.0 10.0 -17.3205)))
         (instance face :init :vertices (list (float-vector -70.0 20.0 0.0) (float-vector -55.0 20.0 0.0) (float-vector -55.0 17.3205 -10.0) (float-vector -70.0 17.3205 -10.0)))
         (instance face :init :vertices (list (float-vector -70.0 17.3205 10.0) (float-vector -55.0 17.3205 10.0) (float-vector -55.0 20.0 0.0) (float-vector -70.0 20.0 0.0)))
         (instance face :init :vertices (list (float-vector -70.0 10.0 17.3206) (float-vector -55.0 10.0 17.3206) (float-vector -55.0 17.3205 10.0) (float-vector -70.0 17.3205 10.0)))
         (instance face :init :vertices (list (float-vector -70.0 0.0 20.0) (float-vector -55.0 0.0 20.0) (float-vector -55.0 10.0 17.3206) (float-vector -70.0 10.0 17.3206)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :dimgray)
     (send (elt bc 1) :set-color :dimgray)
     (send (elt bc 2) :set-color :dimgray)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset156027664 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset156029644
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 175.0 -12.5 -21.6506) (float-vector 175.0 0.0 -24.9999) (float-vector 175.0 12.5 -21.6506) (float-vector 175.0 21.6506 -12.4999) (float-vector 175.0 25.0 6.103516e-05) (float-vector 175.0 21.6506 12.5001) (float-vector 175.0 12.5 21.6507) (float-vector 175.0 1.525879e-05 25.0001) (float-vector 175.0 -12.5 21.6507) (float-vector 175.0 -21.6506 12.5001) (float-vector 175.0 -25.0 0.000122) (float-vector 175.0 -21.6507 -12.4999)))
         (instance face :init :vertices (list (float-vector 1.525879e-05 0.0 -25.0) (float-vector 1.525879e-05 -12.5 -21.6506) (float-vector 0.0 -21.6507 -12.5) (float-vector 0.0 -25.0 0.0) (float-vector 0.0 -21.6506 12.5) (float-vector -1.525879e-05 -12.5 21.6506) (float-vector -1.525879e-05 1.525879e-05 25.0) (float-vector -1.525879e-05 12.5 21.6506) (float-vector 0.0 21.6506 12.5) (float-vector 0.0 25.0 0.0) (float-vector 0.0 21.6506 -12.5) (float-vector 1.525879e-05 12.5 -21.6506)))
         (instance face :init :vertices (list (float-vector 175.0 -12.5 -21.6506) (float-vector 1.525879e-05 -12.5 -21.6506) (float-vector 1.525879e-05 0.0 -25.0) (float-vector 175.0 0.0 -24.9999)))
         (instance face :init :vertices (list (float-vector 175.0 -21.6507 -12.4999) (float-vector 0.0 -21.6507 -12.5) (float-vector 1.525879e-05 -12.5 -21.6506) (float-vector 175.0 -12.5 -21.6506)))
         (instance face :init :vertices (list (float-vector 175.0 -25.0 0.000122) (float-vector 0.0 -25.0 0.0) (float-vector 0.0 -21.6507 -12.5) (float-vector 175.0 -21.6507 -12.4999)))
         (instance face :init :vertices (list (float-vector 175.0 -21.6506 12.5001) (float-vector 0.0 -21.6506 12.5) (float-vector 0.0 -25.0 0.0) (float-vector 175.0 -25.0 0.000122)))
         (instance face :init :vertices (list (float-vector 175.0 -12.5 21.6507) (float-vector -1.525879e-05 -12.5 21.6506) (float-vector 0.0 -21.6506 12.5) (float-vector 175.0 -21.6506 12.5001)))
         (instance face :init :vertices (list (float-vector 175.0 1.525879e-05 25.0001) (float-vector -1.525879e-05 1.525879e-05 25.0) (float-vector -1.525879e-05 -12.5 21.6506) (float-vector 175.0 -12.5 21.6507)))
         (instance face :init :vertices (list (float-vector 175.0 12.5 21.6507) (float-vector -1.525879e-05 12.5 21.6506) (float-vector -1.525879e-05 1.525879e-05 25.0) (float-vector 175.0 1.525879e-05 25.0001)))
         (instance face :init :vertices (list (float-vector 175.0 21.6506 12.5001) (float-vector 0.0 21.6506 12.5) (float-vector -1.525879e-05 12.5 21.6506) (float-vector 175.0 12.5 21.6507)))
         (instance face :init :vertices (list (float-vector 175.0 25.0 6.103516e-05) (float-vector 0.0 25.0 0.0) (float-vector 0.0 21.6506 12.5) (float-vector 175.0 21.6506 12.5001)))
         (instance face :init :vertices (list (float-vector 175.0 21.6506 -12.4999) (float-vector 0.0 21.6506 -12.5) (float-vector 0.0 25.0 0.0) (float-vector 175.0 25.0 6.103516e-05)))
         (instance face :init :vertices (list (float-vector 175.0 12.5 -21.6506) (float-vector 1.525879e-05 12.5 -21.6506) (float-vector 0.0 21.6506 -12.5) (float-vector 175.0 21.6506 -12.4999)))
         (instance face :init :vertices (list (float-vector 175.0 0.0 -24.9999) (float-vector 1.525879e-05 0.0 -25.0) (float-vector 1.525879e-05 12.5 -21.6506) (float-vector 175.0 12.5 -21.6506)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :dimgray)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset156029644 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector -88.0 713.0 910.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 34.5 713.0 1010.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink3)
     (send blink1 :newcoords (make-coords :pos (float-vector -17.0 17.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :-z
			     :min    0.0 :max   90.0))

     ;; definition of :knob
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink1 :child-link blink2 :name :knob      :axis :x 
			     :min    0.0 :max   90.0))

     ;; definition of :lock
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink2 :child-link blink3 :name :lock      :axis :x 
			     :min  -90.0 :max    0.0))

     (setq links (list blink0 blink1 blink2 blink3))
     (setq joint-list (list joint0 joint1 joint2))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun room602-door-right (&rest args) (instance* room602-door-right-object :init args))
;; (format *error-output* "(instance room602-door-right-object :init) for generating model~%")
