;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r473M 630 46425) for Linux64 created on k-okada-t410s(Sat Apr 23 16:48:15 JST 2011)
;;
;;
(defclass room73b2-tray-object
  :super cascaded-link
  :slots (sensors))
(defmethod room73b2-tray-object
  (:init
   (&rest args &key (name "room73b2-tray") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
         joint0
        
         handle0 handle1 handle2 handle3
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset149123536
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 200.0 15.0) (float-vector -150.0 200.0 15.0) (float-vector -150.0 -200.0 15.0) (float-vector 150.0 -200.0 15.0)))
         (instance face :init :vertices (list (float-vector -150.0 200.0 5.0) (float-vector 150.0 200.0 5.0) (float-vector 150.0 -200.0 5.0) (float-vector -150.0 -200.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 200.0 15.0) (float-vector 150.0 200.0 5.0) (float-vector -150.0 200.0 5.0) (float-vector -150.0 200.0 15.0)))
         (instance face :init :vertices (list (float-vector 150.0 -200.0 15.0) (float-vector 150.0 -200.0 5.0) (float-vector 150.0 200.0 5.0) (float-vector 150.0 200.0 15.0)))
         (instance face :init :vertices (list (float-vector -150.0 -200.0 15.0) (float-vector -150.0 -200.0 5.0) (float-vector 150.0 -200.0 5.0) (float-vector 150.0 -200.0 15.0)))
         (instance face :init :vertices (list (float-vector -150.0 200.0 15.0) (float-vector -150.0 200.0 5.0) (float-vector -150.0 -200.0 5.0) (float-vector -150.0 -200.0 15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 205.0 37.5) (float-vector -150.0 205.0 37.5) (float-vector -150.0 195.0 37.5) (float-vector 150.0 195.0 37.5)))
         (instance face :init :vertices (list (float-vector -150.0 205.0 7.5) (float-vector 150.0 205.0 7.5) (float-vector 150.0 195.0 7.5) (float-vector -150.0 195.0 7.5)))
         (instance face :init :vertices (list (float-vector 150.0 205.0 37.5) (float-vector 150.0 205.0 7.5) (float-vector -150.0 205.0 7.5) (float-vector -150.0 205.0 37.5)))
         (instance face :init :vertices (list (float-vector 150.0 195.0 37.5) (float-vector 150.0 195.0 7.5) (float-vector 150.0 205.0 7.5) (float-vector 150.0 205.0 37.5)))
         (instance face :init :vertices (list (float-vector -150.0 195.0 37.5) (float-vector -150.0 195.0 7.5) (float-vector 150.0 195.0 7.5) (float-vector 150.0 195.0 37.5)))
         (instance face :init :vertices (list (float-vector -150.0 205.0 37.5) (float-vector -150.0 205.0 7.5) (float-vector -150.0 195.0 7.5) (float-vector -150.0 195.0 37.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 -195.0 37.5) (float-vector -150.0 -195.0 37.5) (float-vector -150.0 -205.0 37.5) (float-vector 150.0 -205.0 37.5)))
         (instance face :init :vertices (list (float-vector -150.0 -195.0 7.5) (float-vector 150.0 -195.0 7.5) (float-vector 150.0 -205.0 7.5) (float-vector -150.0 -205.0 7.5)))
         (instance face :init :vertices (list (float-vector 150.0 -195.0 37.5) (float-vector 150.0 -195.0 7.5) (float-vector -150.0 -195.0 7.5) (float-vector -150.0 -195.0 37.5)))
         (instance face :init :vertices (list (float-vector 150.0 -205.0 37.5) (float-vector 150.0 -205.0 7.5) (float-vector 150.0 -195.0 7.5) (float-vector 150.0 -195.0 37.5)))
         (instance face :init :vertices (list (float-vector -150.0 -205.0 37.5) (float-vector -150.0 -205.0 7.5) (float-vector 150.0 -205.0 7.5) (float-vector 150.0 -205.0 37.5)))
         (instance face :init :vertices (list (float-vector -150.0 -195.0 37.5) (float-vector -150.0 -195.0 7.5) (float-vector -150.0 -205.0 7.5) (float-vector -150.0 -205.0 37.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 155.0 200.0 37.5) (float-vector 145.0 200.0 37.5) (float-vector 145.0 -200.0 37.5) (float-vector 155.0 -200.0 37.5)))
         (instance face :init :vertices (list (float-vector 145.0 200.0 7.5) (float-vector 155.0 200.0 7.5) (float-vector 155.0 -200.0 7.5) (float-vector 145.0 -200.0 7.5)))
         (instance face :init :vertices (list (float-vector 155.0 200.0 37.5) (float-vector 155.0 200.0 7.5) (float-vector 145.0 200.0 7.5) (float-vector 145.0 200.0 37.5)))
         (instance face :init :vertices (list (float-vector 155.0 -200.0 37.5) (float-vector 155.0 -200.0 7.5) (float-vector 155.0 200.0 7.5) (float-vector 155.0 200.0 37.5)))
         (instance face :init :vertices (list (float-vector 145.0 -200.0 37.5) (float-vector 145.0 -200.0 7.5) (float-vector 155.0 -200.0 7.5) (float-vector 155.0 -200.0 37.5)))
         (instance face :init :vertices (list (float-vector 145.0 200.0 37.5) (float-vector 145.0 200.0 7.5) (float-vector 145.0 -200.0 7.5) (float-vector 145.0 -200.0 37.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -145.0 200.0 37.5) (float-vector -155.0 200.0 37.5) (float-vector -155.0 -200.0 37.5) (float-vector -145.0 -200.0 37.5)))
         (instance face :init :vertices (list (float-vector -155.0 200.0 7.5) (float-vector -145.0 200.0 7.5) (float-vector -145.0 -200.0 7.5) (float-vector -155.0 -200.0 7.5)))
         (instance face :init :vertices (list (float-vector -145.0 200.0 37.5) (float-vector -145.0 200.0 7.5) (float-vector -155.0 200.0 7.5) (float-vector -155.0 200.0 37.5)))
         (instance face :init :vertices (list (float-vector -145.0 -200.0 37.5) (float-vector -145.0 -200.0 7.5) (float-vector -145.0 200.0 7.5) (float-vector -145.0 200.0 37.5)))
         (instance face :init :vertices (list (float-vector -155.0 -200.0 37.5) (float-vector -155.0 -200.0 7.5) (float-vector -145.0 -200.0 7.5) (float-vector -145.0 -200.0 37.5)))
         (instance face :init :vertices (list (float-vector -155.0 200.0 37.5) (float-vector -155.0 200.0 7.5) (float-vector -155.0 -200.0 7.5) (float-vector -155.0 -200.0 37.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :brown)
     (send (elt bc 1) :set-color :brown)
     (send (elt bc 2) :set-color :brown)
     (send (elt bc 3) :set-color :brown)
     (send (elt bc 4) :set-color :brown)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset149123536 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 350.0 2060.0 855.0) :rot #2f((0.707107 6.661338e-16 0.707107) (-0.707107 5.689893e-16 0.707107) (5.551115e-17 -1.0 8.743006e-16)) :name "handle0"))
     (send self :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 350.0 1740.0 855.0) :rot #2f((0.707107 -6.661338e-16 0.707107) (0.707107 5.689893e-16 -0.707107) (5.551115e-17 1.0 8.743006e-16)) :name "handle1"))
     (send self :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 650.0 2060.0 855.0) :rot #2f((-0.707107 6.661338e-16 0.707107) (-0.707107 -5.551115e-16 -0.707107) (-5.551115e-17 -1.0 8.881784e-16)) :name "handle2"))
     (send self :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 650.0 1740.0 855.0) :rot #2f((-0.707107 -6.661338e-16 0.707107) (0.707107 -5.551115e-16 0.707107) (-5.551115e-17 1.0 8.881784e-16)) :name "handle3"))
     (send self :assoc handle3)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:handle () (list  handle0 handle1 handle2 handle3))
  (:handle-handle0 () handle0)
  (:handle-handle1 () handle1)
  (:handle-handle2 () handle2)
  (:handle-handle3 () handle3)
  (:attention () (list ))
  (:button () (list ))
  )

(defun room73b2-tray (&rest args) (instance* room73b2-tray-object :init args))
;; (format *error-output* "(instance room73b2-tray-object :init) for generating model~%")
