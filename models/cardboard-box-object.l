;;
;;
;; this file is automatically generated from euslisp+euslib version EusLisp 8.26(r470M 610 45357) for Linux64 created on k-okada-t410s(Thu Mar 3 11:03:39 JST 2011)
;;
;;
(defclass cardboard-box-object
  :super cascaded-link
  :slots (sensors))
(defmethod cardboard-box-object
  (:init
   (&rest args &key (name "cardboard-box") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
         joint0
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :bodyset190293544
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 190.0 215.0 185.0) (float-vector -190.0 215.0 185.0) (float-vector -190.0 -215.0 185.0) (float-vector 190.0 -215.0 185.0)))
         (instance face :init :vertices (list (float-vector -190.0 215.0 -185.0) (float-vector 190.0 215.0 -185.0) (float-vector 190.0 -215.0 -185.0) (float-vector -190.0 -215.0 -185.0)))
         (instance face :init :vertices (list (float-vector 190.0 215.0 185.0) (float-vector 190.0 215.0 -185.0) (float-vector -190.0 215.0 -185.0) (float-vector -190.0 215.0 185.0)))
         (instance face :init :vertices (list (float-vector 190.0 -215.0 185.0) (float-vector 190.0 -215.0 -185.0) (float-vector 190.0 215.0 -185.0) (float-vector 190.0 215.0 185.0)))
         (instance face :init :vertices (list (float-vector -190.0 -215.0 185.0) (float-vector -190.0 -215.0 -185.0) (float-vector 190.0 -215.0 -185.0) (float-vector 190.0 -215.0 185.0)))
         (instance face :init :vertices (list (float-vector -190.0 215.0 185.0) (float-vector -190.0 215.0 -185.0) (float-vector -190.0 -215.0 -185.0) (float-vector -190.0 -215.0 185.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :burlywood3)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset190293544 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:handle () (list ))
  (:attention () (list ))
  (:button () (list ))
  )

(defun cardboard-box (&rest args) (instance* cardboard-box-object :init args))
;; (format *error-output* "(instance cardboard-box-object :init) for generating model~%")
