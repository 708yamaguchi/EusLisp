;;
;;
;; this file is automatically generated from euslisp+euslib
;;
;;
(defclass toshiba-microwave-oven-object
  :super cascaded-link
  :slots (sensors))
(defmethod toshiba-microwave-oven-object
  (:init
   (&rest args &key (name "toshiba-microwave-oven") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
         joint0 joint1 joint2
        
         )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 250.0 350.0) (float-vector -200.0 250.0 350.0) (float-vector -200.0 170.0 350.0) (float-vector 200.0 170.0 350.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 0.0) (float-vector 200.0 250.0 0.0) (float-vector 200.0 170.0 0.0) (float-vector -200.0 170.0 0.0)))
         (instance face :init :vertices (list (float-vector 200.0 250.0 350.0) (float-vector 200.0 250.0 0.0) (float-vector -200.0 250.0 0.0) (float-vector -200.0 250.0 350.0)))
         (instance face :init :vertices (list (float-vector 200.0 170.0 350.0) (float-vector 200.0 170.0 0.0) (float-vector 200.0 250.0 0.0) (float-vector 200.0 250.0 350.0)))
         (instance face :init :vertices (list (float-vector -200.0 170.0 350.0) (float-vector -200.0 170.0 0.0) (float-vector 200.0 170.0 0.0) (float-vector 200.0 170.0 350.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 350.0) (float-vector -200.0 250.0 0.0) (float-vector -200.0 170.0 0.0) (float-vector -200.0 170.0 350.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 250.0 350.0) (float-vector -200.0 250.0 350.0) (float-vector -200.0 -250.0 350.0) (float-vector 150.0 -250.0 350.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 330.0) (float-vector 150.0 250.0 330.0) (float-vector 150.0 -250.0 330.0) (float-vector -200.0 -250.0 330.0)))
         (instance face :init :vertices (list (float-vector 150.0 250.0 350.0) (float-vector 150.0 250.0 330.0) (float-vector -200.0 250.0 330.0) (float-vector -200.0 250.0 350.0)))
         (instance face :init :vertices (list (float-vector 150.0 -250.0 350.0) (float-vector 150.0 -250.0 330.0) (float-vector 150.0 250.0 330.0) (float-vector 150.0 250.0 350.0)))
         (instance face :init :vertices (list (float-vector -200.0 -250.0 350.0) (float-vector -200.0 -250.0 330.0) (float-vector 150.0 -250.0 330.0) (float-vector 150.0 -250.0 350.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 350.0) (float-vector -200.0 250.0 330.0) (float-vector -200.0 -250.0 330.0) (float-vector -200.0 -250.0 350.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 250.0 60.0) (float-vector -200.0 250.0 60.0) (float-vector -200.0 -250.0 60.0) (float-vector 200.0 -250.0 60.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 0.0) (float-vector 200.0 250.0 0.0) (float-vector 200.0 -250.0 0.0) (float-vector -200.0 -250.0 0.0)))
         (instance face :init :vertices (list (float-vector 200.0 250.0 60.0) (float-vector 200.0 250.0 0.0) (float-vector -200.0 250.0 0.0) (float-vector -200.0 250.0 60.0)))
         (instance face :init :vertices (list (float-vector 200.0 -250.0 60.0) (float-vector 200.0 -250.0 0.0) (float-vector 200.0 250.0 0.0) (float-vector 200.0 250.0 60.0)))
         (instance face :init :vertices (list (float-vector -200.0 -250.0 60.0) (float-vector -200.0 -250.0 0.0) (float-vector 200.0 -250.0 0.0) (float-vector 200.0 -250.0 60.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 60.0) (float-vector -200.0 250.0 0.0) (float-vector -200.0 -250.0 0.0) (float-vector -200.0 -250.0 60.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -190.0 240.0 330.0) (float-vector -200.0 240.0 330.0) (float-vector -200.0 -240.0 330.0) (float-vector -190.0 -240.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 240.0 60.0) (float-vector -190.0 240.0 60.0) (float-vector -190.0 -240.0 60.0) (float-vector -200.0 -240.0 60.0)))
         (instance face :init :vertices (list (float-vector -190.0 240.0 330.0) (float-vector -190.0 240.0 60.0) (float-vector -200.0 240.0 60.0) (float-vector -200.0 240.0 330.0)))
         (instance face :init :vertices (list (float-vector -190.0 -240.0 330.0) (float-vector -190.0 -240.0 60.0) (float-vector -190.0 240.0 60.0) (float-vector -190.0 240.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 -240.0 330.0) (float-vector -200.0 -240.0 60.0) (float-vector -190.0 -240.0 60.0) (float-vector -190.0 -240.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 240.0 330.0) (float-vector -200.0 240.0 60.0) (float-vector -200.0 -240.0 60.0) (float-vector -200.0 -240.0 330.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 250.0 330.0) (float-vector -200.0 250.0 330.0) (float-vector -200.0 240.0 330.0) (float-vector 150.0 240.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 60.0) (float-vector 150.0 250.0 60.0) (float-vector 150.0 240.0 60.0) (float-vector -200.0 240.0 60.0)))
         (instance face :init :vertices (list (float-vector 150.0 250.0 330.0) (float-vector 150.0 250.0 60.0) (float-vector -200.0 250.0 60.0) (float-vector -200.0 250.0 330.0)))
         (instance face :init :vertices (list (float-vector 150.0 240.0 330.0) (float-vector 150.0 240.0 60.0) (float-vector 150.0 250.0 60.0) (float-vector 150.0 250.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 240.0 330.0) (float-vector -200.0 240.0 60.0) (float-vector 150.0 240.0 60.0) (float-vector 150.0 240.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 330.0) (float-vector -200.0 250.0 60.0) (float-vector -200.0 240.0 60.0) (float-vector -200.0 240.0 330.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 -240.0 330.0) (float-vector -200.0 -240.0 330.0) (float-vector -200.0 -250.0 330.0) (float-vector 150.0 -250.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 -240.0 60.0) (float-vector 150.0 -240.0 60.0) (float-vector 150.0 -250.0 60.0) (float-vector -200.0 -250.0 60.0)))
         (instance face :init :vertices (list (float-vector 150.0 -240.0 330.0) (float-vector 150.0 -240.0 60.0) (float-vector -200.0 -240.0 60.0) (float-vector -200.0 -240.0 330.0)))
         (instance face :init :vertices (list (float-vector 150.0 -250.0 330.0) (float-vector 150.0 -250.0 60.0) (float-vector 150.0 -240.0 60.0) (float-vector 150.0 -240.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 -250.0 330.0) (float-vector -200.0 -250.0 60.0) (float-vector 150.0 -250.0 60.0) (float-vector 150.0 -250.0 330.0)))
         (instance face :init :vertices (list (float-vector -200.0 -240.0 330.0) (float-vector -200.0 -240.0 60.0) (float-vector -200.0 -250.0 60.0) (float-vector -200.0 -250.0 330.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :white)
     (send (elt bc 4) :set-color :white)
     (send (elt bc 5) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset158641380
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -25.0 395.0 0.0) (float-vector -25.0 -25.0 0.0) (float-vector -25.0 -25.0 300.0) (float-vector -25.0 395.0 300.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -25.0 375.0 280.0) (float-vector -25.0 -5.0 280.0) (float-vector -25.0 -5.0 20.0) (float-vector -25.0 375.0 20.0)))
))
         (instance face :init :vertices (list (float-vector 25.0 -25.0 0.0) (float-vector 25.0 -25.0 300.0) (float-vector -25.0 -25.0 300.0) (float-vector -25.0 -25.0 0.0)))
         (instance face :init :vertices (list (float-vector 25.0 395.0 0.0) (float-vector 25.0 395.0 300.0) (float-vector 25.0 -25.0 300.0) (float-vector 25.0 -25.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 25.0 -5.0 20.0) (float-vector 25.0 -5.0 280.0) (float-vector 25.0 375.0 280.0) (float-vector 25.0 375.0 20.0)))
))
         (instance face :init :vertices (list (float-vector -25.0 395.0 300.0) (float-vector -25.0 -25.0 300.0) (float-vector 25.0 -25.0 300.0) (float-vector 25.0 395.0 300.0)))
         (instance face :init :vertices (list (float-vector 25.0 395.0 0.0) (float-vector 25.0 -25.0 0.0) (float-vector -25.0 -25.0 0.0) (float-vector -25.0 395.0 0.0)))
         (instance face :init :vertices (list (float-vector -25.0 395.0 0.0) (float-vector -25.0 395.0 300.0) (float-vector 25.0 395.0 300.0) (float-vector 25.0 395.0 0.0)))
         (instance face :init :vertices (list (float-vector -25.0 -5.0 20.0) (float-vector -25.0 -5.0 280.0) (float-vector 25.0 -5.0 280.0) (float-vector 25.0 -5.0 20.0)))
         (instance face :init :vertices (list (float-vector 25.0 375.0 280.0) (float-vector 25.0 -5.0 280.0) (float-vector -25.0 -5.0 280.0) (float-vector -25.0 375.0 280.0)))
         (instance face :init :vertices (list (float-vector 25.0 375.0 20.0) (float-vector 25.0 375.0 280.0) (float-vector -25.0 375.0 280.0) (float-vector -25.0 375.0 20.0)))
         (instance face :init :vertices (list (float-vector -25.0 375.0 20.0) (float-vector -25.0 -5.0 20.0) (float-vector 25.0 -5.0 20.0) (float-vector 25.0 375.0 20.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 25.0 380.0 285.0) (float-vector -25.0 380.0 285.0) (float-vector -25.0 -10.0 285.0) (float-vector 25.0 -10.0 285.0)))
         (instance face :init :vertices (list (float-vector -25.0 380.0 15.0) (float-vector 25.0 380.0 15.0) (float-vector 25.0 -10.0 15.0) (float-vector -25.0 -10.0 15.0)))
         (instance face :init :vertices (list (float-vector 25.0 380.0 285.0) (float-vector 25.0 380.0 15.0) (float-vector -25.0 380.0 15.0) (float-vector -25.0 380.0 285.0)))
         (instance face :init :vertices (list (float-vector 25.0 -10.0 285.0) (float-vector 25.0 -10.0 15.0) (float-vector 25.0 380.0 15.0) (float-vector 25.0 380.0 285.0)))
         (instance face :init :vertices (list (float-vector -25.0 -10.0 285.0) (float-vector -25.0 -10.0 15.0) (float-vector 25.0 -10.0 15.0) (float-vector 25.0 -10.0 285.0)))
         (instance face :init :vertices (list (float-vector -25.0 380.0 285.0) (float-vector -25.0 380.0 15.0) (float-vector -25.0 -10.0 15.0) (float-vector -25.0 -10.0 285.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 57.135 210.0 276.183) (float-vector 15.0001 421.827 276.183) (float-vector 15.0001 427.462 279.633) (float-vector 16.6113 428.13 285.0) (float-vector 60.0 210.0 285.0)))
         (instance face :init :vertices (list (float-vector 16.6113 428.13 285.0) (float-vector 15.0001 427.462 279.633) (float-vector 15.0 430.541 285.0)))
         (instance face :init :vertices (list (float-vector 16.6096 -8.13382 285.0) (float-vector 15.0002 -10.5424 285.0) (float-vector 15.0001 -7.46713 279.639)))
         (instance face :init :vertices (list (float-vector 57.135 210.0 276.183) (float-vector 60.0 210.0 285.0) (float-vector 16.6096 -8.13382 285.0) (float-vector 15.0001 -7.46713 279.639) (float-vector 15.0 -1.82237 276.183)))
         (instance face :init :vertices (list (float-vector 16.6113 428.13 285.0) (float-vector 15.0 430.541 285.0) (float-vector 15.0001 427.462 290.368)))
         (instance face :init :vertices (list (float-vector 60.0 210.0 285.0) (float-vector 16.6113 428.13 285.0) (float-vector 15.0001 427.462 290.368) (float-vector 15.0001 421.828 293.817) (float-vector 57.1353 210.0 293.817)))
         (instance face :init :vertices (list (float-vector 15.0001 -7.46713 290.362) (float-vector 15.0002 -10.5424 285.0) (float-vector 16.6096 -8.13382 285.0)))
         (instance face :init :vertices (list (float-vector 15.0 -1.82372 293.817) (float-vector 15.0001 -7.46713 290.362) (float-vector 16.6096 -8.13382 285.0) (float-vector 60.0 210.0 285.0) (float-vector 57.1353 210.0 293.817)))
         (instance face :init :vertices (list (float-vector 57.1353 210.0 293.817) (float-vector 15.0001 421.828 293.817) (float-vector 15.0001 384.122 299.266) (float-vector 49.6353 210.0 299.266)))
         (instance face :init :vertices (list (float-vector 15.0001 35.881 299.266) (float-vector 15.0 -1.82372 293.817) (float-vector 57.1353 210.0 293.817) (float-vector 49.6353 210.0 299.266)))
         (instance face :init :vertices (list (float-vector 49.6353 210.0 299.266) (float-vector 15.0001 384.122 299.266) (float-vector 15.0 337.517 299.266) (float-vector 40.3647 210.0 299.266)))
         (instance face :init :vertices (list (float-vector 15.0 82.4856 299.266) (float-vector 15.0001 35.881 299.266) (float-vector 49.6353 210.0 299.266) (float-vector 40.3647 210.0 299.266)))
         (instance face :init :vertices (list (float-vector 40.3647 210.0 299.266) (float-vector 15.0 337.517 299.266) (float-vector 15.0 299.812 293.817) (float-vector 32.8647 210.0 293.817)))
         (instance face :init :vertices (list (float-vector 15.0 120.19 293.817) (float-vector 15.0 82.4856 299.266) (float-vector 40.3647 210.0 299.266) (float-vector 32.8647 210.0 293.817)))
         (instance face :init :vertices (list (float-vector 32.8647 210.0 293.817) (float-vector 15.0 299.812 293.817) (float-vector 15.0 285.41 285.0) (float-vector 30.0 210.0 285.0)))
         (instance face :init :vertices (list (float-vector 15.0 134.592 285.0) (float-vector 15.0 120.19 293.817) (float-vector 32.8647 210.0 293.817) (float-vector 30.0 210.0 285.0)))
         (instance face :init :vertices (list (float-vector 30.0 210.0 285.0) (float-vector 15.0 285.41 285.0) (float-vector 15.0 299.812 276.183) (float-vector 32.8647 210.0 276.183)))
         (instance face :init :vertices (list (float-vector 15.0 120.19 276.183) (float-vector 15.0 134.592 285.0) (float-vector 30.0 210.0 285.0) (float-vector 32.8647 210.0 276.183)))
         (instance face :init :vertices (list (float-vector 32.8647 210.0 276.183) (float-vector 15.0 299.812 276.183) (float-vector 15.0 337.517 270.734) (float-vector 40.3647 210.0 270.734)))
         (instance face :init :vertices (list (float-vector 15.0 82.4856 270.734) (float-vector 15.0 120.19 276.183) (float-vector 32.8647 210.0 276.183) (float-vector 40.3647 210.0 270.734)))
         (instance face :init :vertices (list (float-vector 40.3647 210.0 270.734) (float-vector 15.0 337.517 270.734) (float-vector 15.0001 384.122 270.734) (float-vector 49.6353 210.0 270.734)))
         (instance face :init :vertices (list (float-vector 15.0001 35.881 270.734) (float-vector 15.0 82.4856 270.734) (float-vector 40.3647 210.0 270.734) (float-vector 49.6353 210.0 270.734)))
         (instance face :init :vertices (list (float-vector 49.6353 210.0 270.734) (float-vector 15.0001 384.122 270.734) (float-vector 15.0001 421.827 276.183) (float-vector 57.135 210.0 276.183)))
         (instance face :init :vertices (list (float-vector 57.135 210.0 276.183) (float-vector 15.0 -1.82237 276.183) (float-vector 15.0001 35.881 270.734) (float-vector 49.6353 210.0 270.734)))
         (instance face :init :vertices (list (float-vector 15.0 337.517 270.734) (float-vector 15.0 299.812 276.183) (float-vector 15.0 285.41 285.0) (float-vector 15.0 299.812 293.817) (float-vector 15.0 337.517 299.266) (float-vector 15.0001 384.122 299.266) (float-vector 15.0001 421.828 293.817) (float-vector 15.0001 427.462 290.368) (float-vector 15.0 430.541 285.0) (float-vector 15.0001 427.462 279.633) (float-vector 15.0001 421.827 276.183) (float-vector 15.0001 384.122 270.734)))
         (instance face :init :vertices (list (float-vector 15.0001 35.881 270.734) (float-vector 15.0 -1.82237 276.183) (float-vector 15.0001 -7.46713 279.639) (float-vector 15.0002 -10.5424 285.0) (float-vector 15.0001 -7.46713 290.362) (float-vector 15.0 -1.82372 293.817) (float-vector 15.0001 35.881 299.266) (float-vector 15.0 82.4856 299.266) (float-vector 15.0 120.19 293.817) (float-vector 15.0 134.592 285.0) (float-vector 15.0 120.19 276.183) (float-vector 15.0 82.4856 270.734)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :black)
     (gl::transparent (elt bc 1) 0.9)
     (send (elt bc 2) :set-color :white)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset158641380 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bodyset158635128
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 20.0 0.0 0.0) (float-vector 17.3205 10.0 1.525879e-05) (float-vector 17.3205 10.0 10.0) (float-vector 20.0 0.0 10.0)))
         (instance face :init :vertices (list (float-vector 10.0 17.3205 1.525879e-05) (float-vector 10.0 17.3205 10.0) (float-vector 17.3205 10.0 10.0) (float-vector 17.3205 10.0 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 7.629395e-06 20.0 0.0) (float-vector 0.0 20.0 10.0) (float-vector 10.0 17.3205 10.0) (float-vector 10.0 17.3205 1.525879e-05)))
         (instance face :init :vertices (list (float-vector -9.99999 17.3205 0.0) (float-vector -9.99999 17.3205 10.0) (float-vector 0.0 20.0 10.0) (float-vector 7.629395e-06 20.0 0.0)))
         (instance face :init :vertices (list (float-vector -17.3205 10.0 0.0) (float-vector -17.3205 10.0 10.0) (float-vector -9.99999 17.3205 10.0) (float-vector -9.99999 17.3205 0.0)))
         (instance face :init :vertices (list (float-vector -20.0 1.525879e-05 1.525879e-05) (float-vector -20.0 1.525879e-05 10.0) (float-vector -17.3205 10.0 10.0) (float-vector -17.3205 10.0 0.0)))
         (instance face :init :vertices (list (float-vector -17.3205 -9.99998 0.0) (float-vector -17.3205 -9.99998 10.0) (float-vector -20.0 1.525879e-05 10.0) (float-vector -20.0 1.525879e-05 1.525879e-05)))
         (instance face :init :vertices (list (float-vector -10.0 -17.3205 0.0) (float-vector -10.0 -17.3205 10.0) (float-vector -17.3205 -9.99998 10.0) (float-vector -17.3205 -9.99998 0.0)))
         (instance face :init :vertices (list (float-vector -1.525879e-05 -20.0 0.0) (float-vector -2.288818e-05 -20.0 10.0) (float-vector -10.0 -17.3205 10.0) (float-vector -10.0 -17.3205 0.0)))
         (instance face :init :vertices (list (float-vector 9.99998 -17.3205 1.525879e-05) (float-vector 9.99998 -17.3205 10.0) (float-vector -2.288818e-05 -20.0 10.0) (float-vector -1.525879e-05 -20.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.3205 -10.0 1.525879e-05) (float-vector 17.3205 -10.0 10.0) (float-vector 9.99998 -17.3205 10.0) (float-vector 9.99998 -17.3205 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 20.0 0.0 10.0) (float-vector 17.3205 10.0 10.0) (float-vector 10.0 17.3205 10.0) (float-vector 0.0 20.0 10.0) (float-vector -9.99999 17.3205 10.0) (float-vector -17.3205 10.0 10.0) (float-vector -20.0 1.525879e-05 10.0) (float-vector -17.3205 -9.99998 10.0) (float-vector -10.0 -17.3205 10.0) (float-vector -2.288818e-05 -20.0 10.0) (float-vector 9.99998 -17.3205 10.0) (float-vector 17.3205 -10.0 10.0)))
         (instance face :init :vertices (list (float-vector 17.3205 -10.0 1.525879e-05) (float-vector 9.99998 -17.3205 1.525879e-05) (float-vector -1.525879e-05 -20.0 0.0) (float-vector -10.0 -17.3205 0.0) (float-vector -17.3205 -9.99998 0.0) (float-vector -20.0 1.525879e-05 1.525879e-05) (float-vector -17.3205 10.0 0.0) (float-vector -9.99999 17.3205 0.0) (float-vector 7.629395e-06 20.0 0.0) (float-vector 10.0 17.3205 1.525879e-05) (float-vector 17.3205 10.0 1.525879e-05) (float-vector 20.0 0.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 15.0 0.0 1.525879e-05) (float-vector 14.3301 2.5 1.525879e-05) (float-vector 12.5 4.33012 1.525879e-05) (float-vector 10.0 5.0 1.525879e-05) (float-vector 7.5 4.33012 1.525879e-05) (float-vector 5.66988 2.5 1.525879e-05) (float-vector 5.0 0.0 1.525879e-05) (float-vector 5.66987 -2.5 1.525879e-05) (float-vector 7.5 -4.33012 1.525879e-05) (float-vector 9.99999 -5.0 1.525879e-05) (float-vector 12.5 -4.33012 1.525879e-05) (float-vector 14.3301 -2.5 1.525879e-05)))
))
         (instance face :init :vertices (list (float-vector 20.0 0.0 0.0) (float-vector 20.0 0.0 10.0) (float-vector 17.3205 -10.0 10.0) (float-vector 17.3205 -10.0 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 15.0 0.0 1.00002) (float-vector 14.3301 2.5 1.00002) (float-vector 14.3301 2.5 1.525879e-05) (float-vector 15.0 0.0 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 14.3301 2.5 1.525879e-05) (float-vector 14.3301 2.5 1.00002) (float-vector 12.5 4.33012 1.00002) (float-vector 12.5 4.33012 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 12.5 4.33012 1.525879e-05) (float-vector 12.5 4.33012 1.00002) (float-vector 10.0 5.0 1.00002) (float-vector 10.0 5.0 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 10.0 5.0 1.525879e-05) (float-vector 10.0 5.0 1.00002) (float-vector 7.5 4.33012 1.00002) (float-vector 7.5 4.33012 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 7.5 4.33012 1.525879e-05) (float-vector 7.5 4.33012 1.00002) (float-vector 5.66988 2.5 1.00002) (float-vector 5.66988 2.5 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 5.66988 2.5 1.525879e-05) (float-vector 5.66988 2.5 1.00002) (float-vector 5.0 0.0 1.00002) (float-vector 5.0 0.0 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 5.0 0.0 1.525879e-05) (float-vector 5.0 0.0 1.00002) (float-vector 5.66987 -2.5 1.00002) (float-vector 5.66987 -2.5 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 5.66987 -2.5 1.525879e-05) (float-vector 5.66987 -2.5 1.00002) (float-vector 7.5 -4.33012 1.00002) (float-vector 7.5 -4.33012 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 7.5 -4.33012 1.525879e-05) (float-vector 7.5 -4.33012 1.00002) (float-vector 9.99999 -5.0 1.00002) (float-vector 9.99999 -5.0 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 9.99999 -5.0 1.525879e-05) (float-vector 9.99999 -5.0 1.00002) (float-vector 12.5 -4.33012 1.00002) (float-vector 12.5 -4.33012 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 12.5 -4.33012 1.525879e-05) (float-vector 12.5 -4.33012 1.00002) (float-vector 14.3301 -2.5 1.00002) (float-vector 14.3301 -2.5 1.525879e-05)))
         (instance face :init :vertices (list (float-vector 14.3301 -2.5 1.00002) (float-vector 12.5 -4.33012 1.00002) (float-vector 9.99999 -5.0 1.00002) (float-vector 7.5 -4.33012 1.00002) (float-vector 5.66987 -2.5 1.00002) (float-vector 5.0 0.0 1.00002) (float-vector 5.66988 2.5 1.00002) (float-vector 7.5 4.33012 1.00002) (float-vector 10.0 5.0 1.00002) (float-vector 12.5 4.33012 1.00002) (float-vector 14.3301 2.5 1.00002) (float-vector 15.0 0.0 1.00002)))
         (instance face :init :vertices (list (float-vector 14.3301 -2.5 1.525879e-05) (float-vector 14.3301 -2.5 1.00002) (float-vector 15.0 0.0 1.00002) (float-vector 15.0 0.0 1.525879e-05)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bodyset158635128 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector 210.0 210.0 85.0) :rot #2f((4.241202e-07 0.0 -1.0) (0.0 1.0 0.0) (1.0 0.0 4.241202e-07))))
     (send blink0 :assoc blink2)
     (send blink1 :newcoords (make-coords :pos (float-vector 175.0 -225.0 50.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :y 
			     :min    0.0 :max   90.0))

     ;; definition of :knob
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :knob      :axis :-z
			     :min    0.0 :max  360.0))

     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     self))
  )

(defun toshiba-microwave-oven (&rest args) (instance* toshiba-microwave-oven-object :init args))
;; (format *error-output* "(instance toshiba-microwave-oven-object :init) for generating model~%")
