static pointer UWP259();
static pointer UWP264();
static pointer UWP269();
static pointer CLO328();
static pointer (*ftab[55])();

#define QUOTE_STRINGS_SIZE 395
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "\"pq-handler db=~s~%\"",
    ":consume",
    "*pgsql-readtable*",
    "*readtable*",
    "read-from-string",
    "#(:host :port :options :tty :dbname :user :pass)",
    "\"localhost\"",
    "\"PGDATABASE\"",
    "\"USER\"",
    "\"PGUSER\"",
    "\"USER\"",
    "setdblogin",
    "pqstatus",
    "zerop",
    "*debug*",
    "\";; Postgres connection to ~a:~a dbname=~a user=~a~%\"",
    "pqhost",
    "pqport",
    "pqdb",
    "pquser",
    "warning-message",
    "\";; Postgres connection failed due to ~a~%\"",
    "errormessage",
    ":name",
    "*db*",
    "hash-table",
    ":init",
    ":size",
    ":make-type-hashtab",
    "socket",
    "*top-selector*",
    ":add-port",
    "pq-handler",
    ":exec",
    "\"set datestyle to 'ISO'\"",
    "finish",
    ":remove-port",
    "pqpass",
    ":clear",
    "\"select oid,typname,typelem,typlen from pg_type where typtype='b'  order by oid\"",
    "*keyword-package*",
    "*package*",
    "sethash",
    "gethash",
    ":char",
    ":array",
    "sendquery",
    "consumeinput",
    "isbusy",
    "\"db ~s is still busy after consumeInput\"",
    ":process-result",
    "getresult",
    "functionp",
    "send",
    "nfields",
    "fname",
    "ntuples",
    "vector",
    ":type-name",
    "ftype",
    "getvalue",
    "(:text :char)",
    ":date",
    "read-iso-date",
    ":time",
    "read-iso-time",
    "(:datetime :timespan :timespan)",
    "read-iso-datetime",
    ":getfields",
    "clear",
    "resultstatus",
    "0",
    "\";; empty query~%\"",
    "1",
    "\";; pgsql OK~%\"",
    "oidstatus",
    "2",
    ":getvalues",
    "make-foreign-string",
    "(3 4)",
    "\";; copy in/out started~%\"",
    "5",
    "\";; db bad response~%\"",
    "6",
    "\";; db non fatal error\"",
    "7",
    "\";; db fatal error\"",
    "pqexec",
    "lo_creat",
    "\"begin\"",
    "lo_import",
    "\"end\"",
    "\"begin\"",
    "lo_export",
    "\"end\"",
    "lo_open",
    "lo_write",
    "lo_read",
    "lo_lseek",
    "lo_close",
    "lo_unlink",
    "\"begin\"",
    "\"begin\"",
    "\"begin\"",
    "make-string",
    "/=",
    "concatenate",
    "string",
    "\"end\"",
    "\"end\"",
    "\"end\"",
    "\"select attnum, att.attname, typ.typname\n	 from pg_attribute att,  pg_type typ\n	 where att.attrelid=(\n		select typrelid from pg_type where typname='~a') \n	 and typ.oid=att.atttypid  and attnum>0 order by attnum\"",
    "\"select cls.relname, usr.usename, cls.relkind,\n		cls.relnatts, cls.relhasindex, cls.relhaspkey, relacl\n	 from pg_class cls, pg_user usr\n	 where cls.relname='~a' and usr.usesysid=cls.relowner\"",
    "\"select attname\n	 from pg_attribute\n	 where attrelid=(\n		select typrelid from pg_type where typname='~a') \n	 and attnum=1\n	 order by attnum\"",
    "make-string-output-stream",
    "get-output-stream-string",
    "format",
    "*pgsql-debug*",
    ":sendquery",
    "car",
    "\"select * from pg_tables\"",
    "\"'~a'\"",
    "\"~a\"",
    "\"'~a'\"",
    "\"~a\"",
    "\"(~a)\"",
    "where",
    "\" ~a \"",
    "#(:where :limit :limit-offset :order-by)",
    "\"select ~a from ~a ~a ~a ~a\"",
    "\",\"",
    "\",\"",
    "plusp",
    "\"where ~a \"",
    "\"\"",
    "\"order by ~a\"",
    "\"\"",
    "\"limit ~a,~a\"",
    "\"limit ~a\"",
    "\"\"",
    "#(:where)",
    "\", \"",
    "\"update ~a set ~a where ~a\"",
    "\"update ~a set ~a\"",
    "\"~a=~a\"",
    "\"'~a'\"",
    "\"INSERT INTO ~a (~a) VALUES (~a)\"",
    "first",
    "\", \"",
    "second",
    "\", \"",
    "\"INSERT INTO ~a (~a) VALUES (~a)\"",
    "\", \"",
    "\", \"",
    "#(:where)",
    "\"DELETE FROM ~a where ~a\"",
    "\"DELETE FROM ~a\"",
    "\"count(*)\"",
    "\"LISP\"",
    "\"time\"",
    "require",
    "\"PQ\"",
    "\"PQ\"",
    "make-package",
    "\"PQ\"",
    "\"PQ\"",
    "\"no such package\"",
    "(pgsql query escape-quote table-fields table-attributes table-pkey tables select update-record insert-record insert-record2 delimit-list delete-record record-count)",
    "\"/usr/lib/libpq.so.5\"",
    "load",
    "*libpq*",
    "\"PQsetdbLogin\"",
    "nil",
    "(:foreign-string 4436)",
    "make-foreign-code",
    "\"PQfinish\"",
    "(:string)",
    ":integer",
    "pqreset",
    "\"PQreset\"",
    "(:string)",
    "\"PQdb\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQuser\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQpass\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQhost\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQport\"",
    "(:string)",
    "(:foreign-string)",
    "pqtty",
    "\"PQtty\"",
    "(:string)",
    "(:foreign-string)",
    "pqoptions",
    "\"PQoptions\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQstatus\"",
    "(:string)",
    "\"PQerrorMessage\"",
    "(:string)",
    "(:foreign-string)",
    "backendpid",
    "\"PQbackendPID\"",
    "(:string)",
    "\"PQexec\"",
    "(:string :string)",
    "\"PQresultStatus\"",
    "resulterrormessage",
    "\"PQresultErrorMessage\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQntuples\"",
    "(:string)",
    "\"PQnfields\"",
    "(:string)",
    "binarytuples",
    "\"PQbinaryTuples\"",
    "(:string)",
    "\"PQfname\"",
    "(:string :integer)",
    "(:foreign-string)",
    "fnumber",
    "\"PQfnumber\"",
    "(:string :string)",
    "\"PQftype\"",
    "(:string :integer)",
    "fsize",
    "\"PQfsize\"",
    "(:string :integer)",
    "fmod",
    "\"PQfmod\"",
    "(:string :integer)",
    "\"PQgetvalue\"",
    "(:string :integer :integer)",
    "(:foreign-string)",
    "getlength",
    "\"PQgetlength\"",
    "(:string :integer :integer)",
    "cmdstatus",
    "\"PQcmdStatus\"",
    "(:string)",
    "(:foreign-string)",
    "\"PQoidStatus\"",
    "(:foreign-string)",
    "\"PQclear\"",
    "\"PQsendQuery\"",
    "(:string :string)",
    "\"PQgetResult\"",
    "(:string)",
    "\"PQconsumeInput\"",
    "(:string)",
    "\"PQisBusy\"",
    "(:string)",
    "\"PQsocket\"",
    "(:string)",
    "\"lo_creat\"",
    "(:string :integer)",
    "\"lo_import\"",
    "(:string :string)",
    "\"lo_export\"",
    "(:string :integer :string)",
    "\"lo_open\"",
    "(:string :integer :integer)",
    "\"lo_write\"",
    "(:string :integer :string :integer)",
    "\"lo_read\"",
    "(:string :integer :string :integer)",
    "\"lo_lseek\"",
    "(:string :integer :integer :integer)",
    "\"lo_close\"",
    "(:string :integer)",
    "\"lo_unlink\"",
    "(:string :integer)",
    "inv_write",
    ":constant",
    "inv_read",
    "seek_set",
    "seek_cur",
    "seek_end",
    ":global",
    "copy-readtable",
    "set-syntax-from-char",
    ":vtype",
    "\"(db)\"",
    "pgsql-field",
    "\"(str)\"",
    "pgsql",
    ":super",
    "propertied-object",
    ":slots",
    "(connection socket-fd fields records notify types ntuples nfields type-hashtab type-conversion oid)",
    ":metaclass",
    ":element-type",
    ":documentation",
    "make-class",
    "\"(self class &key (host \\\"localhost\\\") (port 0) (options 0) (tty 0) (dbname (cond ((unix:getenv \\\"PGDATABASE\\\")) (t (unix:getenv \\\"USER\\\")))) (user (cond ((unix:getenv \\\"PGUSER\\\")) (t (unix:getenv \\\"USER\\\")))) (pass 0))\"",
    ":finish",
    "\"(self class)\"",
    ":dbname",
    "\"(self class)\"",
    ":user",
    "\"(self class)\"",
    ":host",
    "\"(self class)\"",
    ":port",
    "\"(self class)\"",
    ":password",
    "\"(self class)\"",
    ":type-conversion",
    "\"(self class flag)\"",
    ":types",
    "\"(self class)\"",
    ":oid",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class id)\"",
    ":records",
    "\"(self class)\"",
    ":fields",
    "\"(self class)\"",
    "\"(self class)\"",
    ":notify",
    "\"(self class &rest x)\"",
    "\"(self class query &rest x)\"",
    "\"(self class)\"",
    "\"(self class result)\"",
    ":ntuples",
    "\"(self class)\"",
    ":nfields",
    "\"(self class)\"",
    "\"(self class result)\"",
    "\"(self class stat)\"",
    "\"(self class query)\"",
    ":lo-creat",
    "\"(self class &optional (mode (logior inv_read inv_write)))\"",
    ":lo-import",
    "\"(self class fname)\"",
    ":lo-export",
    "\"(self class loid fname)\"",
    ":lo-open",
    "\"(self class oid &optional (mode (logior inv_read inv_write)))\"",
    ":lo-write",
    "\"(self class fd bytes &optional (len (length bytes)))\"",
    ":lo-read",
    "\"(self class fd buf len)\"",
    ":lo-lseek",
    "\"(self class fd offset &optional (whence seek_set))\"",
    ":lo-close",
    "\"(self class fd)\"",
    ":lo-unlink",
    "\"(self class loid)\"",
    ":lo-test",
    "\"(self class loid &optional (mode (logior inv_read inv_write)) &aux f)\"",
    ":lo-put",
    "\"(self class datum &optional (oid nil))\"",
    ":lo-get",
    "\"(self class loid)\"",
    "table-fields",
    "\"(db table)\"",
    "table-attributes",
    "\"(db table)\"",
    "table-pkey",
    "\"(db table)\"",
    "escape-quote",
    "\"(str)\"",
    "query",
    "\"(db handler &rest sql)\"",
    "tables",
    "\"(db)\"",
    "delimit-list",
    "\"(xlist delimiter &optional quotep)\"",
    "\"(expression)\"",
    "select",
    "\"(db fields table &key where limit limit-offset order-by)\"",
    "update-record",
    "\"(db table field-values &key where)\"",
    "insert-record",
    "\"(db table field-values)\"",
    "insert-record2",
    "\"(db table fields values)\"",
    "delete-record",
    "\"(db table &key where)\"",
    "record-count",
    "\"(db table)\"",
    ":pgsql",
    "\"@(#)$Id: pgsql.l,v 1.1.1.1 2003/11/20 07:53:26 eus Exp $\"",
    "provide",
  };
