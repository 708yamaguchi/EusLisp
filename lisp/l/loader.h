static pointer FLET29843();
static pointer UWP30113();
static pointer UWP30413();
static pointer FLET30589();
static pointer FLET30591();
static pointer FLET30593();
static pointer UWP31168();
static pointer UWP31217();
static pointer UWP31332();
static pointer UWP31450();
static pointer UWP31551();
static pointer UWP32270();
static pointer UWP32509();
static pointer (*ftab[24])();

#define QUOTE_STRINGS_SIZE 203
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "namestring",
    "#(:direction :if-exists :if-does-not-exist :permission :buffer-size)",
    ":input",
    ":new-version",
    "default",
    "io-stream-p",
    "instream",
    "fname",
    ":error",
    ":create",
    "system:openfile",
    "(:output :io)",
    ":io",
    ":append",
    "(:new-version :supersede :rename)",
    ":overwrite",
    "(nil :error)",
    "\"unknown if-exist flag\"",
    "(:overwrite :append)",
    "nil",
    "\"unknown if-does-not-exist flag\"",
    "\"unknown stream direction\"",
    "string",
    "\"cannot open \"",
    "let",
    "open",
    "unwind-protect",
    "progn",
    "close",
    "49152",
    ":socket",
    "40960",
    ":link",
    "32768",
    ":file",
    "24576",
    ":block",
    "16384",
    ":directory",
    "8192",
    ":character",
    "4096",
    ":fifo",
    "objmagic",
    "make-string",
    "\"PATH\"",
    ":start",
    "position",
    "\"/\"",
    "\"/\"",
    "truename",
    "merge-pathnames",
    "pathname-name",
    "#(:quote-file :entry :symbol-input :symbol-output :ld-option :verbose :print :package)",
    "\"___\"",
    "\"\"",
    "\"\"",
    "*load-verbose*",
    "*package*",
    "pathname",
    "pathname-directory",
    ":root",
    "\"file ~s not found\"",
    "*loader-current-directory*",
    "*load-path*",
    ":test",
    "string=",
    "union",
    "concatenate-pathnames",
    "\"file ~s not found\"",
    "\";; ~Aloading ~A into ~s~%\"",
    "directory-namestring",
    "*loaded-modules*",
    ":key",
    "load-module-file-name",
    "equal",
    "find",
    "system::unbinload",
    "\";; ~A is unloaded.~%\"",
    "\"bin\"",
    "\"txt\"",
    "(:file :character :fifo :socket)",
    "member",
    "\".so\"",
    "\".o\"",
    "\".l\"",
    ":verbose",
    "\"\n\"",
    "concatenate",
    ":infd",
    "/=",
    "\"cannot read binary file\"",
    "file-stream",
    "with-open-file",
    "cons",
    "while",
    "not",
    "eql",
    "setq",
    "read-line",
    "read",
    "load",
    ":entry",
    "system::list-module-initializers",
    "\"~a \"",
    "*standard-output*",
    "*print-length*",
    "*print-level*",
    "*print-circle*",
    "*print-object*",
    ":direction",
    ":output",
    "*print-structure*",
    "quote",
    "dump-structure",
    "\"file ~s not found\"",
    "#(:direction :offset :length :protection :share :private :address)",
    ":if-exists",
    "((:input . 1) (:output . 2) (:io . 3))",
    "unix:mmap",
    "keywordp",
    "string-upcase",
    "*keyword-package*",
    "*modules*",
    "assoc",
    "string-downcase",
    "\"@(#)$Id: loader.l,v 1.1.1.1 2003/11/20 07:46:31 eus Exp $\"",
    "\"LISP\"",
    "\"LISP\"",
    "\"no such package\"",
    "(file-write-date file-newer open with-open-file probe-file object-file-p path-list find-executable *load-path* *loader-current-directory* *load-verbose* load load-files load-library read-file read-strings read-lines read-lists read-binary-file read-lines-till-eof do-file-line do-file-form dump-object dump-structure dump-loadable-structure file-size map-file *modules* provide require *loaded-modules*)",
    "file-write-date",
    "\"(file)\"",
    "file-newer",
    "\"(new old)\"",
    "\"(file &key (direction :input) (if-exists :new-version) (if-does-not-exist 'default) (permission 420) (buffer-size 512))\"",
    "\"(fspec &rest bod)\"",
    "probe-file",
    "\"(path)\"",
    ":constant",
    ":vax",
    "*features*",
    ":irix",
    ":irix6",
    ":mips",
    ":solaris2",
    ":linux",
    ":alpha",
    "(11 8 7)",
    "object-file-p",
    "\"(path)\"",
    "path-list",
    "\"(&optional (pstring (unix:getenv \\\"PATH\\\")))\"",
    "find-executable",
    "\"(progname)\"",
    "system::txtload",
    "\"(fname &optional print)\"",
    ":vtype",
    ":global",
    "\"./\"",
    "*eusdir*",
    "\"~alib/\"",
    "\"~alib/llib/\"",
    "\"~alib/demo/\"",
    ":special",
    "\"./\"",
    "\"(lm)\"",
    "\"(fname &key (quote-file nil) (entry (concatenate string \\\"___\\\" (pathname-name fname))) (symbol-input) (symbol-output \\\"\\\") (ld-option \\\"\\\") (verbose *load-verbose*) (print nil) ((:package packag) *package*))\"",
    "load-files",
    "\"(&rest files)\"",
    "read-file",
    "\"(file)\"",
    "read-strings",
    "\"(infile)\"",
    "read-lines",
    "\"(infile)\"",
    "read-lists",
    "\"(file-name)\"",
    "read-binary-file",
    "\"(fname)\"",
    "read-lines-till-eof",
    "\"(str)\"",
    "do-file-line",
    "\"(arg &rest forms)\"",
    "do-file-form",
    "\"(arg &rest forms)\"",
    "load-library",
    "\"(file modules &rest load-args)\"",
    "dump-object",
    "\"(file &rest objects)\"",
    "\"(file &rest objects)\"",
    "dump-loadable-structure",
    "\"(file &rest symbols)\"",
    "file-size",
    "\"(f)\"",
    "directory-p",
    "\"(f &aux stat)\"",
    "map-file",
    "\"(fname &key (direction :input) (offset 0) (length nil) (protection nil) (share t) (private nil) (address 0))\"",
    "provide",
    "\"(module-name &rest version-info)\"",
    "require",
    "\"(module-name &rest load-arg)\"",
  };
