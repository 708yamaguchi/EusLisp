static pointer CLO10457();
static pointer CLO11844();
static pointer CLO11952();
static pointer CLO12077();
static pointer CLO12113();
static pointer CLO13408();
static pointer CLO17412();
static pointer CLO17525();
static pointer UWP21730();
static pointer (*ftab[34])();

#define QUOTE_STRINGS_SIZE 680
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "compiled-code",
    "quote",
    "vars",
    "\"class expected for type check\"",
    "position",
    "comp",
    ":error",
    "\"no such obj var\"",
    "(integer :integer fixnum :fixnum)",
    "integer",
    "(float :float)",
    "float",
    "\"car/cdr\"",
    "\"mismatch arg for \"",
    "warn",
    "function-result-type",
    "name",
    ":enter",
    "make-array",
    "string",
    ":eval",
    "trans",
    ":discard",
    ":load-nil",
    "constantp",
    "(nil t)",
    ":load-t",
    "symbol",
    "keywordp",
    ":load-quote",
    ":load-var",
    ":load-int",
    ":load-float",
    ":load-ovaf",
    "apply",
    "function",
    ":get-function",
    "lambda",
    ":funcall",
    "special",
    ":special-form",
    "macro",
    "macroexpand",
    "closure",
    ":call-closure",
    "\"unknown func type\"",
    "\"symbol expected for a func. name\"",
    "compiled-function-p",
    "((0 . lambda) (1 . macro) (2 . special))",
    "*debug*",
    ":load-local",
    "fourth",
    "fifth",
    ":get",
    "identifier",
    ":init",
    ":enter-special",
    "\"~%~C[34;7m~S~C[0;34m is assumed to be global~C[0m~%\"",
    "ovaf",
    ":variable",
    ":binding",
    ":find",
    "unknown",
    "\"not variable\"",
    "\"symbol expected for function argument\"",
    ":enter-variable",
    ":special",
    "local",
    ":local",
    "arg",
    ":load-arg",
    "\"illegal binding\"",
    ":bind-special",
    "stack-frame",
    ":create-frame",
    ":level",
    ":unbind-special",
    ":warning",
    "\"no special object variables allowed\"",
    ":del-frame",
    ":pop-frame",
    "(integer fixnum float number t nil)",
    ":load-indexed-ov",
    "\"no such object variable\"",
    "binding",
    "(special)",
    ":load-global",
    "(local let lambda)",
    "offset",
    "level",
    "(param arg)",
    "(object)",
    ":load-obj",
    "\"declared but unknown variable\"",
    ":type",
    "(integer fixnum float number t nil)",
    ":store-indexed-ov",
    ":store-ovaf",
    "(special)",
    ":store-global",
    "(local let lambda)",
    ":store-local",
    "(param arg)",
    ":store-arg",
    "(object)",
    ":store-obj",
    "(slot setslot)",
    "(null not)",
    "null",
    ":nullx",
    "(eq)",
    "eq",
    ":eqx",
    "(memq)",
    "memq",
    ":memqx",
    "(1+)",
    "1+",
    ":1+",
    "(1-)",
    "1-",
    ":1-",
    "(car first)",
    ":car",
    "(cdr rest)",
    ":cdr",
    "(cadr second)",
    ":cadr",
    "(caar)",
    ":caar",
    "(cdar)",
    ":cdar",
    "(cddr)",
    ":cddr",
    "(caddr third)",
    ":caddr",
    "(cons)",
    "cons",
    ":cons",
    "(symbolp consp stringp integerp numberp floatp)",
    ":type-check-predicate",
    "(svref)",
    "svref",
    ":svref",
    "(svset)",
    "svset",
    ":svset",
    "(char schar)",
    ":char",
    "(setchar)",
    ":setchar",
    "(bit sbit)",
    ":bit",
    "(setbit)",
    ":setbit",
    "(aref aset)",
    "((aref . 2) (aset . 3))",
    ":call",
    ":vector-op",
    "(+ logand logior * -)",
    ":arithmetic",
    "(slot)",
    "slot",
    ":slot",
    "(setslot)",
    "setslot",
    ":setslot",
    "(abs)",
    "abs",
    ":int-abs",
    ":flt-abs",
    "((aref . :vref) (aset . :vset))",
    "integer-vector",
    "character",
    "float-vector",
    "bit-vector",
    "vector",
    "pointer",
    ":dupe",
    "*safety*",
    "-",
    "every",
    "(1)",
    ":int-neg",
    "(2)",
    ":int-op2",
    "+",
    "(1)",
    ":flt-neg",
    "(2)",
    ":flt-op2",
    "(:integer integer fixnum :fixnum)",
    "(:float float)",
    "(:integer integer fixnum :fixnum)",
    "(:float float)",
    "(quote)",
    "(setq)",
    ":setq",
    "(if)",
    ":if",
    "(let)",
    ":let",
    "(let*)",
    ":let*",
    "(cond)",
    ":cond",
    "(while)",
    ":while",
    "(and)",
    ":and",
    "(or)",
    ":or",
    "(block)",
    ":block",
    "(return-from)",
    ":return-from",
    "(catch)",
    ":catch",
    "(throw)",
    ":throw",
    "(tagbody)",
    ":tagbody",
    "(go)",
    ":go",
    "(flet)",
    ":flet",
    "(labels)",
    "(unwind-protect)",
    ":unwind-protect",
    "(progn)",
    ":progn",
    "(function)",
    ":function",
    "(the)",
    "(defun)",
    "\"defun must be at toplevel\"",
    "(defmacro)",
    "\"defmacro must be at toplevel\"",
    "(defmethod)",
    "\"defmethod must be at toplevel\"",
    "(eval-when)",
    "\"eval-when must appear at toplevel, ignored\"",
    "\"Compiling method is not yet implemented.\"",
    ":if-nil",
    ":if-t",
    ":conditional-jump",
    ":if-neq",
    ":if-eq",
    "(null not)",
    ":evcon",
    "and",
    ":genlabel",
    "\"AND\"",
    ":jump",
    ":label",
    "or",
    "\"OR\"",
    "(symbolp numberp integerp floatp atom consp stringp)",
    ":if-not-type",
    ":if-type",
    "(< > = <= >=)",
    "(integer fixnum float)",
    "member",
    "((integer . int) (fixnum . int) (float . float))",
    "((< . >=) (> . <=) (<= . >) (>= . <) (= . <>) (<> . =))",
    ":compare",
    "\"IF\"",
    "\"IF\"",
    ":adjust",
    ":var-binding",
    "(special ovaf)",
    ":store-var",
    "\"illegal ovaf\"",
    "declare",
    ":declare",
    ":bind",
    ":offset-from-fp",
    ":delete-frame",
    ":special-variable-p",
    "\"CON\"",
    "\"CON\"",
    "\"WHL\"",
    "\"WHX\"",
    ":enter-block",
    ":leave-block",
    "\"AND\"",
    "\"OR\"",
    "\"CAT\"",
    ":entercatch",
    ":exitcatch",
    "\"UWP\"",
    ":closure",
    ":copy-compiler",
    ":add-closure",
    ":bind-cleaner",
    ":call-cleaner",
    "\"BLK\"",
    "\"no symbolic block label\"",
    "\"no such block\"",
    "\"return-from in a closure cannot be compiled\"",
    "\"TAG\"",
    "\"no such tag to go\"",
    ":go-tag",
    ":getfunc",
    "\"CLO\"",
    "\"FLET\"",
    ":change-flets",
    "send-all",
    "type",
    "ftype",
    "(integer :integer fixnum :fixnum :float float)",
    "optimize",
    "*optimize*",
    "safety",
    "space",
    "*space*",
    "inline",
    "not-inline",
    "\"unknown declaration\"",
    "&optional",
    "&rest",
    "&key",
    "&aux",
    "&allow-other-keys",
    "\"ENT\"",
    "\"RST\"",
    "\"keyword parameter\"",
    "\"keyword variable\"",
    "symbol-name",
    "*keyword-package*",
    "\"Too many keyword parameters>32 ~s\"",
    ":check-req-arg",
    ":check-opt-arg",
    ":rest",
    ":check-rest-arg",
    ":parse-key-params",
    "\"KEY\"",
    ":check-key-arg",
    "\"KEY\"",
    "*verbose*",
    "\"~C[7;35m~S~C[0m\"",
    ":lambda",
    ":return",
    "\" ~3,3F sec~%\"",
    "defun",
    "\"F\"",
    "user-function-entry",
    "*defun-list*",
    "\"F\"",
    "\"~s\"",
    ":lambda-block",
    ":add-initcode",
    "object",
    "self",
    "class",
    "\"M\"",
    "\"~s\"",
    "defmethod",
    "\"closure: ~s~%\"",
    ":declare-forward-function",
    "\"closure or cleaner\"",
    ":compile-closures",
    ":compile-a-closure",
    "(defun defmacro)",
    ":defun",
    "cdddr",
    "(defmethod)",
    ":defmethod",
    "(function quote return-from)",
    "macro-function",
    "eval-when",
    "compile",
    "load",
    ":toplevel",
    "progn",
    ":def-user-entry",
    ":toplevel-eval",
    "defmacro",
    ":defmacro",
    "#(:cc-option :optimize :c-optimize :safety :cc :pic :verbose :entry :o)",
    "\"\"",
    "*do-cc*",
    "*pic*",
    "pathname-name",
    "\" -O\"",
    "*coptflags*",
    "\"\"",
    "pathname",
    "merge-pathnames",
    "\".o\"",
    "\".c\"",
    "\".h\"",
    "\".q\"",
    "\".o\"",
    "\".so\"",
    "\".so\"",
    "*package*",
    "probe-file",
    "\".l\"",
    "\"file ~A not found~%\"",
    "\"compiling file: ~A~%\"",
    "namestring",
    "open",
    "*multipass-optimize*",
    "$eof$",
    ":init-file",
    ":init-frames",
    ":eusmain",
    ":toplevel-execution",
    ":declare-ftab",
    ":ftab-initializer",
    "symvector",
    "symcount",
    ":write-quote-vector",
    ":close",
    "*cc*",
    "\" -c\"",
    "\" -o \"",
    ":sun3",
    "*features*",
    "\" -Dsun3 -w\"",
    ":sun4",
    "\" -Dsun4 -w\"",
    ":irix",
    "\" -Dmips -DIRIX -w \"",
    ":irix6",
    "\" -Dmips -DIRIX6 -woff all\"",
    ":vax",
    "\" -Dvax -J\"",
    ":news",
    "\" -Dnews\"",
    ":sanyo",
    "\" -Dsanyo\"",
    ":linux",
    "\" -Di386 -DLinux -falign-functions=4 -w\"",
    ":alpha",
    "\" -Dalpha -Dsystem5 -D_REENTRANT -w\"",
    ":i386",
    "\" -Di386\"",
    "\"cpu type is not properly set\"",
    ":sunos4",
    "\" -DSunOS4 -Bstatic\"",
    ":sunos4.1",
    "\" -DSunOS4_1\"",
    ":solaris2",
    "\" -DSolaris2\"",
    "\"\"",
    ":gcc",
    "\" -DGCC \"",
    ":thread",
    "\" -DTHREADED\"",
    ":pthread",
    "\" -DPTHREAD\"",
    "\" -fpic\"",
    "\" -fpic \"",
    "\" -K pic\"",
    "\" -fpic\"",
    "\" -KPIC\"",
    "\" -KPIC\"",
    "\" -fpic\"",
    "\" -pic\"",
    "\" -I\"",
    "*eusdir*",
    "\"include\"",
    "*cflags*",
    "\" \"",
    "\"; ld -o \"",
    "\" \"",
    "\"; ld -shared -o \"",
    "\" \"",
    "\"; ld -shared -o \"",
    "\" \"",
    "\"\"",
    "\"; ld -shared -update_registry so_locations -expect_unresolved '*' -g0 -O1 -o \"",
    "\" \"",
    "\"\"",
    "\"~A\"",
    "remprop",
    "*error-output*",
    "car",
    ":frame",
    ":closure-level",
    "translator",
    "identifier-table",
    ":direction",
    ":output",
    "pprint",
    ":compile-file",
    "send",
    "\"eus~d~A.l\"",
    "\"C\"",
    "dump-function",
    ":defaults",
    "\"c\"",
    "make-pathname",
    "\"h\"",
    "\"so\"",
    "\"q\"",
    "\"./\"",
    "\".l\"",
    "\".o\"",
    "\"o\"",
    "file-newer",
    "compile-file",
    ":o",
    "\"EusLisp compiler version 1.54   June/1986 ... May/1996\"",
    "\"euscomp$ \"",
    "*prompt-string*",
    "euserror",
    "*error-handler*",
    "eustop",
    "\"euscomp [-c] [-V] [-O] [-On] [-Sn] [-X form] [-P pkg] [-D feature] file1 file2 ...~%\"",
    "exit",
    "string-upcase",
    "\"-O\"",
    "\" -O\"",
    "\"-O1\"",
    "\"-O2\"",
    "\"-O3\"",
    "\"-V\"",
    "\"-S0\"",
    "\"-S1\"",
    "\"-S2\"",
    "\"-S3\"",
    "\"-X\"",
    "read-from-string",
    "\"-c\"",
    "\"-D\"",
    "\"-P\"",
    "make-package",
    "\"no such package\"",
    "\"-pic\"",
    "\"-npic\"",
    "string-equal",
    "\"COMPILER\"",
    "\"COMPILER\"",
    "\"no such package\"",
    "(compile compile-file comfile identifier compile-file-if-src-newer)",
    "(*safety* *space* *verbose* *optimize* *speed* *cc*)",
    "compiled-code-p",
    "\"(x)\"",
    ":global",
    "\"\"",
    "\"\"",
    "\"gcc\"",
    "\"cc -ieee_with_inexact\"",
    "\"cc\"",
    ":vtype",
    "\"$Id: comp.l,v 1.1.1.1 2003/11/20 07:46:28 eus Exp $\"",
    "ovafp",
    "\"(form)\"",
    "class-symbolp",
    "\"(x)\"",
    "quoted-symbolp",
    "\"(x)\"",
    "proclaimed-special-p",
    "\"(var)\"",
    "proclaimed-global-p",
    "\"(var)\"",
    "object-variable-names",
    "\"(klass-name)\"",
    "object-variable-type",
    "\"(klass var)\"",
    "coerce-type",
    "\"(tp)\"",
    "check-arg",
    "\"(req n &optional (fn \\\"car/cdr\\\"))\"",
    "def-function-type",
    "\"(type funcs)\"",
    "(ash logand logior logxor 1+ 1- length floor ceiling truncate round)",
    "(sin cos tan asin acos atan sqrt exp log v. v.* norm distance)",
    "(scale v+ v- v* transform)",
    ":super",
    ":slots",
    "(name type binding level offset)",
    ":metaclass",
    ":element-type",
    ":size",
    ":documentation",
    "make-class",
    "\"(self class &optional (tp type))\"",
    ":offset",
    "\"(self class &optional (off offset))\"",
    "\"(self class &optional (bin binding))\"",
    "\"(self class sym bin lev off)\"",
    "(frames level maxlevel)",
    "\"(self class id &optional (lev level))\"",
    "\"(self class id &optional (lev level))\"",
    "\"(self class id &optional (lev level))\"",
    "\"(self class id)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":clear-frame",
    "\"(self class)\"",
    "\"(self class &optional (lvl level))\"",
    "\"(self class &optional (n level))\"",
    "\"(self class)\"",
    "\"(self class &optional (maxlev 20))\"",
    "(offset specials locals)",
    "\"(self class &optional (off nil))\"",
    "\"(self class &optional (i 0))\"",
    "\"(self class &optional (i 0))\"",
    "\"(self class)\"",
    "compiler",
    "(idtable closure-level scope frames blocks tags function-closures initcodes flets unwind-frames)",
    "\"(self class head)\"",
    "\"(self class bodies)\"",
    "\"(self class form)\"",
    "\"(self class fn)\"",
    "\"(self class fdef args)\"",
    "\"(self class var)\"",
    "\"(self class var)\"",
    "\"(self class id)\"",
    "\"(self class id)\"",
    "\"(self class id binding offset &optional (keyvarp nil))\"",
    "\"(self class)\"",
    "\"(self class flag)\"",
    "\"(self class form var)\"",
    "\"(self class var)\"",
    "\"(self class form varname)\"",
    "\"(self class var)\"",
    "\"(self class sym args)\"",
    "\"(self class func argcount arg-type-list)\"",
    "\"(self class obj klass index)\"",
    "\"(self class obj klass index newval)\"",
    "\"(self class op argcount arg-type-list)\"",
    "\"(self class fn args)\"",
    "\"(self class t-label nil-label)\"",
    "\"(self class condition t-label nil-label)\"",
    "\"(self class forms)\"",
    "\"(self class var-val)\"",
    "\"(self class bodies)\"",
    "\"(self class bodies)\"",
    "\"(self class clauses)\"",
    "\"(self class bodies)\"",
    "\"(self class bodies)\"",
    "\"(self class bodies)\"",
    "\"(self class label bodies)\"",
    "\"(self class lab val)\"",
    "\"(self class prot cleanup)\"",
    "\"(self class lab)\"",
    "\"(self class)\"",
    "\"(self class lab bodies)\"",
    "\"(self class lab val)\"",
    "\"(self class bodies)\"",
    "\"(self class lab)\"",
    "\"(self class fn)\"",
    "\"(self class funcs bodies recursive-scope &aux (flets-save flets))\"",
    "\"(self class newflets)\"",
    "\"(self class args)\"",
    "\"(self class param forms)\"",
    "\"(self class name arglist bodies cname)\"",
    "\"(self class form)\"",
    "\"(self class fun-macro name arglist bodies)\"",
    "\"(self class methods)\"",
    "\"(self class form)\"",
    "\"(self class clo)\"",
    "\"(self class increment)\"",
    "\"(self class entry def)\"",
    "\"(self class)\"",
    "\"(self class form)\"",
    "\"(self class form compiler-eval &optional pass)\"",
    "\"(self class form)\"",
    "\"(self class file &key (cc-option \\\"\\\") (optimize *optimize*) (c-optimize 1) (safety *safety*) (cc *do-cc*) (pic *pic*) (verbose *verbose*) (entry (pathname-name file)) (o))\"",
    ":specials",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(file &rest names)\"",
    "comfile",
    "\"(&rest files)\"",
    "\"(file &rest keys)\"",
    "\"(&rest funcs)\"",
    "compile-file-if-src-newer",
    "\"(srcfile &optional (objdir \\\"./\\\") &rest args)\"",
    "comp-file-toplevel",
    "\"(&rest argv)\"",
    ":comp",
    "\"@(#)$Id: comp.l,v 1.1.1.1 2003/11/20 07:46:28 eus Exp $\"",
    "provide",
  };
