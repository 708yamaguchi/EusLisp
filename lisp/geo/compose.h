static pointer CLO2435();
static pointer FLET2441();
static pointer CLO2486();
static pointer CLO2546();
static pointer CLO2583();
static pointer CLO2584();
static pointer CLO2641();
static pointer CLO2711();
static pointer CLO2852();
static pointer UWP2884();
static pointer (*ftab[31])();

#define QUOTE_STRINGS_SIZE 226
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ":intersect-edge",
    ":edges",
    "oddp",
    "\"odd intersects\"",
    ":normal",
    "maxindex",
    ">",
    "<",
    "*edge-class*",
    ":init",
    ":pvertex",
    ":nvertex",
    ":pface",
    ":nface",
    ":box",
    ":intersection-p",
    ":coplanar-line",
    "eps=",
    ":direction",
    "midpoint",
    ":insidep",
    ":border",
    ":flags",
    "fourth",
    "fifth",
    "\"ifac not list ~s\"",
    "\"ifac not list ~s\"",
    "member",
    "sixth",
    "eps<>",
    "seventh",
    "normal",
    ":outside",
    ">=",
    "<=",
    ":test",
    "eps-v=",
    "remove-duplicates",
    ":on-edge",
    ":approximated",
    "acons",
    "cadr",
    "eq",
    "find-if",
    "*bug-edges*",
    "*face-class*",
    ":set-face",
    ":count",
    "delete",
    ":primitive-face",
    "find-method",
    ":body",
    ":id",
    "*debug*",
    "\"faces=~s~%holes=~s~%\"",
    "pvert",
    ":inside",
    "*hole-class*",
    ":face",
    ":enter-hole",
    "*bug*",
    "\"outer circuit not found~%\"",
    "gethash",
    "bodyp",
    "append",
    ":all-vertices",
    "send-all",
    ":all-edges",
    ":size",
    "make-hash-table",
    "sethash",
    "maphash",
    "colinear",
    "body",
    ":contactp",
    "car",
    "cdr",
    "(:included :including)",
    "\"testing edge-edge contact~%\"",
    ":next-vertex",
    ":aligned-plane",
    ":vertices",
    ":colinear-line",
    "assoc",
    ":another-face",
    ":replace-face",
    ":point",
    "\"unknow contacting edge state ~s ~s~%\"",
    "warn",
    "f1e",
    "f2e",
    "\"aln1: \"",
    "break",
    "\"face2edges left\"",
    "\"aln3: \"",
    ":worldcoords",
    ":faces",
    ":common-box",
    "i1",
    "i2",
    "*seg1*",
    "*seg2*",
    "*se1*",
    "*se2*",
    "\"crossing edges~%\"",
    "\"3: \"",
    "\"~d face-to-face contact(s) found.~%\"",
    "\"con: \"",
    "delete-if-not",
    "\"~d face-to-face alignment(s) found.~%\"",
    "*faces*",
    "\"merging finished, start constructing faces~%\"",
    "\"5: \"",
    "\"~d \"",
    "\"~d \"",
    "flatten",
    "\"~f ~f ~f ~f ~f ~f ~f~%\"",
    "*body-class*",
    ":csg",
    ":primitive-bodies",
    "primitive-body-p",
    "position",
    "\"not a primitive ~A\"",
    ":copied-primitive",
    ":assoc",
    ":copy-csg",
    "+",
    "*",
    ":evert",
    "evertedp",
    "-",
    ":intersectp",
    "bounding-box",
    ":init2",
    ":distance",
    "semi-space",
    "distance",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "*package*",
    "\"no such package\"",
    "(cut-body compose-body body+ body* body- body-interference semi-space body/)",
    "(contacting-faces aligned-faces)",
    "*body*",
    ":vtype",
    ":global",
    "*bodies*",
    "*edges*",
    "intersecting-edges",
    "\"(pln edges)\"",
    "cut-body",
    "\"(bod cutting-plane)\"",
    "insert-intersections",
    "\"(intlists faces common-box)\"",
    "make-edge-segments",
    "\"(intersects target-body side)\"",
    "intersecting-segments",
    "\"(segments)\"",
    "sort-edges-by-face",
    "\"(intlist)\"",
    "make-crossing-edges",
    "\"(intfaces1 intfaces2 first side)\"",
    "add-alist",
    "\"(key val alist)\"",
    "merge-segments",
    "\"(segments s2 s3)\"",
    "find-connecting-edge",
    "\"(vert edges &optional (test #'eq))\"",
    "construct-faces",
    "\"(fac-edges)\"",
    "initial-intersection-list",
    "\"(edges htab &aux res)\"",
    "make-vertex-edge-htab",
    "\"(bodfacs)\"",
    "copy-add-vertex",
    "\"(htab)\"",
    "find-colinear-int",
    "\"(conint)\"",
    "contacting-faces",
    "\"(body1 body2)\"",
    "aligned-faces",
    "\"(body1 body2)\"",
    "find-equivalent-edge",
    "\"(e1 edges2)\"",
    "unify-vertex",
    "\"(edges)\"",
    "merge-edges-if-colinear",
    "\"(e1 e2 seg1 seg2)\"",
    "merge-contacting-faces",
    "\"(face1 face2 seg1 seg2)\"",
    "merge-aligned-faces",
    "\"(face1 face2 seg1 seg2)\"",
    "compose-body",
    "\"(body1 body2 side)\"",
    "set-original-face",
    "\"(newbody)\"",
    "body+",
    "\"(&rest bodies)\"",
    "body*",
    "\"(&rest bodies)\"",
    "body-",
    "\"(body1 &rest bodies)\"",
    "body-interference",
    "\"(&rest bodies)\"",
    "plane",
    "\"(self class)\"",
    ":super",
    ":slots",
    "nil",
    ":metaclass",
    ":element-type",
    ":documentation",
    "make-class",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &optional (tolerance 0.0))\"",
    "\"(self class pnt)\"",
    "\"(self class &optional x)\"",
    "\"(self class &optional x)\"",
    "\"(self class &optional x)\"",
    "\"(self class point &optional tol)\"",
    "body/",
    "\"(body1 pln)\"",
    ":compose",
    "\"@(#)$Id: compose.l,v 1.1.1.1 2003/11/20 07:46:28 eus Exp $\"",
    "provide",
  };
